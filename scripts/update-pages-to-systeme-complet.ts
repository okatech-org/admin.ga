#!/usr/bin/env bun

/**
 * SCRIPT DE MISE √Ä JOUR DES PAGES
 * Met √† jour les pages pour utiliser le syst√®me complet des 141 organismes
 * au lieu de l'ancienne API base de donn√©es
 *
 * Usage: bun run scripts/update-pages-to-systeme-complet.ts
 */

import * as fs from 'fs';
import * as path from 'path';

// Liste des fichiers √† mettre √† jour avec leurs remplacements
const filesToUpdate = [
  {
    path: 'app/super-admin/organismes-vue-ensemble/page.tsx',
    oldEndpoint: '/api/organizations/list',
    newEndpoint: '/api/systeme-complet/organismes',
    description: 'Page Vue d\'Ensemble des Organismes'
  },
  {
    path: 'app/super-admin/fonctionnaires-attente/page.tsx',
    oldEndpoint: '/api/fonctionnaires/en-attente',
    newEndpoint: '/api/systeme-complet/fonctionnaires-attente',
    description: 'Page Fonctionnaires en Attente'
  },
  {
    path: 'app/super-admin/gestion-comptes/page.tsx',
    oldEndpoint: '/api/users/list',
    newEndpoint: '/api/systeme-complet/utilisateurs',
    description: 'Page Gestion des Comptes'
  },
  {
    path: 'app/super-admin/utilisateurs/page.tsx',
    oldEndpoint: '/api/users/list',
    newEndpoint: '/api/systeme-complet/utilisateurs',
    description: 'Page Gestion des Utilisateurs'
  }
];

async function updateFile(fileInfo: typeof filesToUpdate[0]) {
  const filePath = path.join(process.cwd(), fileInfo.path);

  // V√©rifier si le fichier existe
  if (!fs.existsSync(filePath)) {
    console.log(`‚ö†Ô∏è Fichier non trouv√©: ${fileInfo.path}`);
    return false;
  }

  try {
    // Lire le contenu du fichier
    let content = fs.readFileSync(filePath, 'utf-8');

    // Cr√©er une sauvegarde
    const backupPath = filePath + '.backup-' + Date.now();
    fs.writeFileSync(backupPath, content);
    console.log(`   üìÅ Sauvegarde cr√©√©e: ${backupPath}`);

    // Remplacer l'ancien endpoint par le nouveau
    const regex = new RegExp(fileInfo.oldEndpoint.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g');
    const replacements = (content.match(regex) || []).length;

    if (replacements > 0) {
      content = content.replace(regex, fileInfo.newEndpoint);

      // Sauvegarder le fichier modifi√©
      fs.writeFileSync(filePath, content);
      console.log(`   ‚úÖ ${replacements} remplacement(s) effectu√©(s)`);
      return true;
    } else {
      console.log(`   ‚ÑπÔ∏è Aucun remplacement n√©cessaire (endpoint d√©j√† √† jour ou non trouv√©)`);
      // Supprimer la sauvegarde si aucun changement
      fs.unlinkSync(backupPath);
      return false;
    }
  } catch (error) {
    console.error(`   ‚ùå Erreur: ${error}`);
    return false;
  }
}

async function main() {
  console.log('\n' + '='.repeat(60));
  console.log('üîÑ MISE √Ä JOUR DES PAGES VERS LE SYST√àME COMPLET');
  console.log('='.repeat(60) + '\n');

  console.log('üìã Pages √† mettre √† jour:');
  filesToUpdate.forEach(file => {
    console.log(`   ‚Ä¢ ${file.description}`);
  });

  console.log('\nüöÄ D√©but de la mise √† jour...\n');

  let updated = 0;
  let failed = 0;

  for (const fileInfo of filesToUpdate) {
    console.log(`\nüìù ${fileInfo.description}:`);
    console.log(`   Fichier: ${fileInfo.path}`);
    console.log(`   ${fileInfo.oldEndpoint} ‚Üí ${fileInfo.newEndpoint}`);

    const success = await updateFile(fileInfo);
    if (success) {
      updated++;
    } else {
      failed++;
    }
  }

  console.log('\n' + '='.repeat(60));
  console.log('üìä R√âSUM√â');
  console.log('='.repeat(60));
  console.log(`   ‚úÖ Fichiers mis √† jour: ${updated}`);
  console.log(`   ‚ö†Ô∏è Fichiers non modifi√©s: ${failed}`);

  if (updated > 0) {
    console.log('\n‚úÖ MISE √Ä JOUR R√âUSSIE!');
    console.log('\n‚ö†Ô∏è IMPORTANT:');
    console.log('   1. Les pages utilisent maintenant le syst√®me complet des 141 organismes');
    console.log('   2. Les donn√©es sont charg√©es depuis la m√©moire, pas de la base de donn√©es');
    console.log('   3. Red√©marrez l\'application pour voir les changements');
    console.log('   4. Les sauvegardes ont √©t√© cr√©√©es avec l\'extension .backup-[timestamp]');

    console.log('\nüìã PROCHAINES √âTAPES:');
    console.log('   1. Tester les pages mises √† jour');
    console.log('   2. V√©rifier que les 141 organismes s\'affichent');
    console.log('   3. Supprimer les sauvegardes si tout fonctionne');
  } else {
    console.log('\n‚ö†Ô∏è Aucune mise √† jour effectu√©e');
    console.log('   Les fichiers sont peut-√™tre d√©j√† √† jour ou les endpoints n\'ont pas √©t√© trouv√©s');
  }

  console.log('\nüí° Pour tester les nouvelles API directement:');
  console.log('   curl http://localhost:3000/api/systeme-complet/organismes');
  console.log('   curl http://localhost:3000/api/systeme-complet/utilisateurs');
  console.log('   curl http://localhost:3000/api/systeme-complet/statistiques');
  console.log('   curl http://localhost:3000/api/systeme-complet/fonctionnaires-attente');
}

// Ex√©cuter le script
main().catch(console.error);
