// Test de la base de donn√©es pour la gestion des domaines

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testDomainDatabase() {
  console.log('üß™ TEST BASE DE DONN√âES - Gestion des Domaines');
  console.log('===============================================');
  console.log('');

  try {
    // Test 1: V√©rifier la connexion √† la base
    console.log('üìä Test 1: Connexion √† la base de donn√©es');
    await prisma.$connect();
    console.log('‚úÖ Connexion r√©ussie');
    console.log('');

    // Test 2: V√©rifier que la table domain_configs existe
    console.log('üìã Test 2: V√©rification table domain_configs');
    const tableExists = await prisma.$queryRaw`
      SELECT table_name
      FROM information_schema.tables
      WHERE table_schema = 'public'
      AND table_name = 'domain_configs'
    `;

    if (tableExists.length > 0) {
      console.log('‚úÖ Table domain_configs trouv√©e');
    } else {
      console.log('‚ùå Table domain_configs manquante');
      return;
    }
    console.log('');

    // Test 3: Cr√©er un enregistrement de test
    console.log('üíæ Test 3: Cr√©ation enregistrement de test');
    const testDomain = await prisma.domainConfig.create({
      data: {
        domain: 'test-administration.ga',
        applicationId: 'admin-test',
        dnsRecords: JSON.stringify([
          { type: 'A', name: '@', value: '185.26.106.234', ttl: 3600 }
        ]),
        deploymentConfig: JSON.stringify({
          port: 3000,
          ssl: true,
          nginx: true
        }),
        status: 'pending'
      }
    });

    console.log(`‚úÖ Enregistrement cr√©√© avec ID: ${testDomain.id}`);
    console.log('');

    // Test 4: Lire l'enregistrement
    console.log('üìñ Test 4: Lecture de l\'enregistrement');
    const readDomain = await prisma.domainConfig.findUnique({
      where: { domain: 'test-administration.ga' }
    });

    if (readDomain) {
      console.log('‚úÖ Enregistrement lu avec succ√®s');
      console.log(`   Domaine: ${readDomain.domain}`);
      console.log(`   Status: ${readDomain.status}`);
      console.log(`   Cr√©√©: ${readDomain.createdAt}`);
    } else {
      console.log('‚ùå Impossible de lire l\'enregistrement');
    }
    console.log('');

    // Test 5: Cr√©er un log de d√©ploiement
    console.log('üìù Test 5: Cr√©ation log de d√©ploiement');
    const deployLog = await prisma.deploymentLog.create({
      data: {
        domainId: testDomain.id,
        action: 'DNS_SETUP',
        status: 'SUCCESS',
        message: 'Configuration DNS r√©ussie pour test-administration.ga'
      }
    });

    console.log(`‚úÖ Log cr√©√© avec ID: ${deployLog.id}`);
    console.log('');

    // Test 6: Lire avec relation
    console.log('üîó Test 6: Lecture avec relations');
    const domainWithLogs = await prisma.domainConfig.findUnique({
      where: { domain: 'test-administration.ga' },
      include: {
        deploymentLogs: true
      }
    });

    if (domainWithLogs && domainWithLogs.deploymentLogs.length > 0) {
      console.log('‚úÖ Relations fonctionnelles');
      console.log(`   Logs trouv√©s: ${domainWithLogs.deploymentLogs.length}`);
      console.log(`   Premier log: ${domainWithLogs.deploymentLogs[0].action}`);
    } else {
      console.log('‚ùå Probl√®me avec les relations');
    }
    console.log('');

    // Test 7: Nettoyage
    console.log('üßπ Test 7: Nettoyage des donn√©es de test');

    // Supprimer les logs (cascade automatique)
    await prisma.domainConfig.delete({
      where: { id: testDomain.id }
    });

    console.log('‚úÖ Donn√©es de test supprim√©es');
    console.log('');

    // Test 8: Test API administration.ga
    console.log('üåê Test 8: Configuration administration.ga');
    try {
      const adminDomain = await prisma.domainConfig.upsert({
        where: { domain: 'administration.ga' },
        update: {
          status: 'configured',
          dnsRecords: JSON.stringify([
            { type: 'A', name: '@', value: '185.26.106.234', ttl: 3600 },
            { type: 'A', name: 'www', value: '185.26.106.234', ttl: 3600 }
          ]),
          deploymentConfig: JSON.stringify({
            port: 3000,
            ssl: true,
            nginx: true,
            domain: 'administration.ga'
          })
        },
        create: {
          domain: 'administration.ga',
          applicationId: 'administration-ga',
          status: 'configured',
          dnsRecords: JSON.stringify([
            { type: 'A', name: '@', value: '185.26.106.234', ttl: 3600 },
            { type: 'A', name: 'www', value: '185.26.106.234', ttl: 3600 }
          ]),
          deploymentConfig: JSON.stringify({
            port: 3000,
            ssl: true,
            nginx: true,
            domain: 'administration.ga'
          })
        }
      });

      console.log('‚úÖ Configuration administration.ga mise √† jour');
      console.log(`   ID: ${adminDomain.id}`);
      console.log(`   Status: ${adminDomain.status}`);
      console.log('');

    } catch (error) {
      console.log('‚ùå Erreur configuration administration.ga:', error.message);
    }

    console.log('üéâ TOUS LES TESTS R√âUSSIS !');
    console.log('==========================');
    console.log('');
    console.log('‚úÖ Base de donn√©es configur√©e');
    console.log('‚úÖ Tables cr√©√©es et fonctionnelles');
    console.log('‚úÖ Relations configur√©es');
    console.log('‚úÖ Administration.ga pr√™t');
    console.log('');
    console.log('üöÄ Vous pouvez maintenant utiliser la section Domaines !');

  } catch (error) {
    console.error('‚ùå ERREUR:', error);
    console.error('');
    console.error('D√©tails:', error.message);

    if (error.code) {
      console.error('Code:', error.code);
    }

    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter les tests
testDomainDatabase();
