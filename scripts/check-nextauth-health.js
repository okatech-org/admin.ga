#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üè• Diagnostic NextAuth - V√©rification compl√®te\n');

// 1. V√©rifier les variables d'environnement
console.log('üìã V√©rification des variables d\'environnement...');

const envFiles = ['.env.local', '.env'];
let envFound = false;
let envVars = {};

for (const envFile of envFiles) {
  const envPath = path.join(process.cwd(), envFile);
  if (fs.existsSync(envPath)) {
    console.log(`‚úÖ Fichier ${envFile} trouv√©`);
    const envContent = fs.readFileSync(envPath, 'utf8');
    
    // Parse les variables
    envContent.split('\n').forEach(line => {
      const [key, value] = line.split('=');
      if (key && value) {
        envVars[key.trim()] = value.trim().replace(/["']/g, '');
      }
    });
    
    envFound = true;
    break;
  }
}

if (!envFound) {
  console.log('‚ùå Aucun fichier d\'environnement trouv√©');
  console.log('üìù Cr√©ation de .env.local...');
  
  const envContent = `# NextAuth Configuration
NEXTAUTH_URL=http://localhost:3000
NEXTAUTH_SECRET=${require('crypto').randomBytes(32).toString('base64')}

# Database
DATABASE_URL="postgresql://user:password@localhost:5432/admin_ga"
`;
  
  fs.writeFileSync('.env.local', envContent);
  console.log('‚úÖ Fichier .env.local cr√©√© avec des valeurs par d√©faut\n');
} else {
  // V√©rifier les variables requises
  const requiredVars = ['NEXTAUTH_URL', 'NEXTAUTH_SECRET', 'DATABASE_URL'];
  
  requiredVars.forEach(varName => {
    if (envVars[varName]) {
      if (varName === 'NEXTAUTH_SECRET') {
        const length = envVars[varName].length;
        if (length >= 32) {
          console.log(`‚úÖ ${varName} pr√©sent et valide (${length} caract√®res)`);
        } else {
          console.log(`‚ö†Ô∏è  ${varName} trop court (${length} caract√®res, minimum 32)`);
        }
      } else {
        console.log(`‚úÖ ${varName} pr√©sent`);
      }
    } else {
      console.log(`‚ùå ${varName} manquant`);
    }
  });
}

console.log();

// 2. V√©rifier les fichiers NextAuth
console.log('üìÅ V√©rification des fichiers NextAuth...');

const files = [
  { path: 'lib/auth.ts', name: 'Configuration NextAuth' },
  { path: 'app/api/auth/[...nextauth]/route.ts', name: 'Route API NextAuth' },
  { path: 'app/api/auth/health/route.ts', name: 'Health Check' },
  { path: 'types/next-auth.d.ts', name: 'Types NextAuth' },
  { path: 'middleware.ts', name: 'Middleware' },
];

files.forEach(file => {
  if (fs.existsSync(file.path)) {
    console.log(`‚úÖ ${file.name} pr√©sent`);
  } else {
    console.log(`‚ùå ${file.name} manquant (${file.path})`);
  }
});

console.log();

// 3. V√©rifier les d√©pendances
console.log('üì¶ V√©rification des d√©pendances...');

if (fs.existsSync('package.json')) {
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  const deps = { ...packageJson.dependencies, ...packageJson.devDependencies };
  
  const requiredDeps = [
    'next-auth',
    '@auth/prisma-adapter',
    'bcryptjs',
    '@types/bcryptjs',
    '@prisma/client',
  ];
  
  requiredDeps.forEach(dep => {
    if (deps[dep]) {
      console.log(`‚úÖ ${dep} install√© (${deps[dep]})`);
    } else {
      console.log(`‚ùå ${dep} manquant`);
    }
  });
} else {
  console.log('‚ùå package.json non trouv√©');
}

console.log();

// 4. Instructions de correction
console.log('üîß √âtapes de correction recommand√©es :');
console.log('1. V√©rifiez les variables d\'environnement ci-dessus');
console.log('2. Installez les d√©pendances manquantes : npm install');
console.log('3. G√©n√©rez le client Prisma : npx prisma generate');
console.log('4. Nettoyez le cache : rm -rf .next');
console.log('5. Red√©marrez le serveur : npm run dev');
console.log('6. Testez l\'endpoint sant√© : curl http://localhost:3000/api/auth/health');

console.log('\nüéØ Une fois le serveur d√©marr√©, v√©rifiez :');
console.log('- http://localhost:3000/api/auth/providers');
console.log('- http://localhost:3000/api/auth/session');
console.log('- http://localhost:3000/api/auth/health');