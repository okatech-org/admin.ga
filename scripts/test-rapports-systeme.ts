#!/usr/bin/env bun

/**
 * Script de test pour la g√©n√©ration de rapports
 * Test des fonctionnalit√©s de rapport de contr√¥le et d'analyse
 *
 * Usage: bun run scripts/test-rapports-systeme.ts
 */

import {
  genererRapportControle,
  genererRapportDetaille,
  genererRapportAvecExtensions,
  exporterRapportTexte,
  exporterRapportHTML,
  exporterRapportCSV,
  comparerRapports
} from '../lib/data/systeme-rapports';

import {
  implementerSystemeComplet,
  initialiserSysteme
} from '../lib/data/systeme-complet-gabon';

import {
  extensionsSysteme,
  ajouterOrganismePersonnalise,
  genererUtilisateursSupplementaires
} from '../lib/data/systeme-extensions';

import * as fs from 'fs';

async function testerRapports() {
  console.log('\n' + '='.repeat(60));
  console.log('üß™ TEST DU SYST√àME DE RAPPORTS');
  console.log('='.repeat(60) + '\n');

  try {
    // ==================== TEST 1: RAPPORT DE BASE ====================
    console.log('üìä 1. G√©n√©ration du rapport de contr√¥le de base...\n');

    const startTime = Date.now();
    const systeme = await implementerSystemeComplet();
    const tempsGeneration = Date.now() - startTime;

    const rapport = genererRapportControle(systeme);

    console.log('   ‚úÖ Rapport g√©n√©r√© avec succ√®s!');
    console.log(`   ‚Ä¢ Temps de g√©n√©ration syst√®me: ${tempsGeneration}ms`);
    console.log('\n   üìã R√âSUM√â:');
    console.log(`   ‚Ä¢ Total organismes: ${rapport["üìã R√âSUM√â G√âN√âRAL"]["Total organismes"]}`);
    console.log(`   ‚Ä¢ Total utilisateurs: ${rapport["üìã R√âSUM√â G√âN√âRAL"]["Total utilisateurs"]}`);
    console.log(`   ‚Ä¢ Moyenne par organisme: ${rapport["üìã R√âSUM√â G√âN√âRAL"]["Moyenne utilisateurs/organisme"]}`);

    // ==================== TEST 2: VALIDATION ====================
    console.log('\n‚úÖ 2. Validation du syst√®me...\n');

    const validation = rapport["‚úÖ VALIDATION"];
    console.log('   R√©sultats de validation:');
    Object.entries(validation).forEach(([key, value]) => {
      const icon = value ? '‚úÖ' : '‚ùå';
      console.log(`   ${icon} ${key}: ${value ? 'OUI' : 'NON'}`);
    });

    // ==================== TEST 3: M√âTRIQUES DE QUALIT√â ====================
    console.log('\nüìä 3. M√©triques de qualit√©...\n');

    const metriques = rapport["üìä M√âTRIQUES DE QUALIT√â"];
    console.log(`   ‚Ä¢ Score de compl√©tude: ${metriques.scoreCompletude}%`);
    console.log(`   ‚Ä¢ Score de validation: ${metriques.scoreValidation}%`);
    console.log(`   ‚Ä¢ Score de couverture: ${metriques.scoreCouverture}%`);
    console.log(`   ‚Ä¢ SCORE GLOBAL: ${metriques.scoreGlobal}%`);

    const evaluation = metriques.scoreGlobal >= 80 ? 'EXCELLENT' :
                      metriques.scoreGlobal >= 60 ? 'BON' :
                      metriques.scoreGlobal >= 40 ? 'MOYEN' : 'FAIBLE';
    console.log(`   ‚Ä¢ √âvaluation: ${evaluation}`);

    // ==================== TEST 4: TOP 10 ORGANISMES ====================
    console.log('\nüìà 4. TOP 10 organismes par nombre d\'utilisateurs...\n');

    const top10 = rapport["üìà TOP 10 ORGANISMES PAR UTILISATEURS"];
    top10.slice(0, 5).forEach((org, index) => {
      console.log(`   ${index + 1}. ${org.nom} (${org.code})`);
      console.log(`      ‚Ä¢ ${org.utilisateurs} utilisateurs`);
      console.log(`      ‚Ä¢ R√©partition: ${org.admins} admin, ${org.users} users, ${org.receptionists} recep`);
    });
    console.log('   ...');

    // ==================== TEST 5: ANOMALIES ====================
    console.log('\n‚ö†Ô∏è 5. D√©tection d\'anomalies...\n');

    const anomalies = rapport["‚ö†Ô∏è ANOMALIES D√âTECT√âES"];
    if (anomalies.length === 1 && anomalies[0] === "Aucune anomalie d√©tect√©e ‚úÖ") {
      console.log('   ‚úÖ Aucune anomalie d√©tect√©e!');
    } else {
      console.log(`   ‚ö†Ô∏è ${anomalies.length} anomalie(s) d√©tect√©e(s):`);
      anomalies.forEach(anomalie => {
        console.log(`      ‚Ä¢ ${anomalie}`);
      });
    }

    // ==================== TEST 6: RAPPORT D√âTAILL√â ====================
    console.log('\nüîç 6. G√©n√©ration du rapport d√©taill√©...\n');

    const rapportDetaille = genererRapportDetaille(systeme, tempsGeneration);

    console.log('   ‚úÖ Rapport d√©taill√© g√©n√©r√©');
    console.log('\n   üë§ Analyse des utilisateurs:');
    const analyse = rapportDetaille["üë§ ANALYSE DES UTILISATEURS"];
    console.log(`   ‚Ä¢ Total hommes: ${analyse.totalHommes}`);
    console.log(`   ‚Ä¢ Total femmes: ${analyse.totalFemmes}`);
    console.log(`   ‚Ä¢ Ratio H/F: ${analyse.ratioHommesFemmes}`);
    console.log(`   ‚Ä¢ Utilisateurs actifs: ${analyse.utilisateursActifs}`);
    console.log(`   ‚Ä¢ Emails dupliqu√©s: ${analyse.emailsDupliques.length}`);

    // ==================== TEST 7: STATISTIQUES PAR TYPE ====================
    console.log('\nüéØ 7. Statistiques par type d\'organisme...\n');

    const stats = rapport["üéØ STATISTIQUES D√âTAILL√âES"];
    console.log('   Minist√®res:');
    console.log(`   ‚Ä¢ Total: ${stats["Minist√®res"].total}`);
    console.log(`   ‚Ä¢ Utilisateurs: ${stats["Minist√®res"].utilisateurs}`);
    console.log(`   ‚Ä¢ Moyenne: ${stats["Minist√®res"].moyenneParMinistere} users/minist√®re`);

    console.log('\n   Directions G√©n√©rales:');
    console.log(`   ‚Ä¢ Total: ${stats["Directions G√©n√©rales"].total}`);
    console.log(`   ‚Ä¢ Utilisateurs: ${stats["Directions G√©n√©rales"].utilisateurs}`);
    console.log(`   ‚Ä¢ Moyenne: ${stats["Directions G√©n√©rales"].moyenneParDirection} users/direction`);

    // ==================== TEST 8: EXPORT TEXTE ====================
    console.log('\nüìù 8. Export du rapport en format texte...\n');

    const rapportTexte = exporterRapportTexte(rapport);
    console.log('   ‚úÖ Export texte g√©n√©r√©');
    console.log(`   ‚Ä¢ Taille: ${Math.round(rapportTexte.length / 1024)}KB`);
    console.log(`   ‚Ä¢ Lignes: ${rapportTexte.split('\n').length}`);

    // ==================== TEST 9: EXPORT HTML ====================
    console.log('\nüåê 9. Export du rapport en format HTML...\n');

    const rapportHTML = exporterRapportHTML(rapport);
    console.log('   ‚úÖ Export HTML g√©n√©r√©');
    console.log(`   ‚Ä¢ Taille: ${Math.round(rapportHTML.length / 1024)}KB`);

    // Sauvegarder le rapport HTML
    fs.writeFileSync('rapport-controle.html', rapportHTML);
    console.log('   ‚Ä¢ Fichier sauvegard√©: rapport-controle.html');

    // ==================== TEST 10: EXPORT CSV ====================
    console.log('\nüìä 10. Export du rapport en format CSV...\n');

    const rapportCSV = exporterRapportCSV(rapport);
    console.log('   ‚úÖ Export CSV g√©n√©r√©');
    console.log(`   ‚Ä¢ Lignes: ${rapportCSV.split('\n').length}`);

    // Sauvegarder le rapport CSV
    fs.writeFileSync('rapport-controle.csv', rapportCSV);
    console.log('   ‚Ä¢ Fichier sauvegard√©: rapport-controle.csv');

    // ==================== TEST 11: RAPPORT AVEC EXTENSIONS ====================
    console.log('\nüîÑ 11. Test du rapport avec extensions...\n');

    // R√©initialiser et ajouter des extensions
    extensionsSysteme.reinitialiser();

    // Sauvegarder le rapport avant extensions
    const rapportAvant = rapport;

    // Ajouter quelques extensions
    ajouterOrganismePersonnalise({
      nom: 'Centre Test Rapport',
      code: 'CTR_TEST',
      type: 'ETABLISSEMENT_PUBLIC'
    });

    genererUtilisateursSupplementaires('MIN_ECO_FIN', 3, ['USER']);

    // G√©n√©rer le rapport avec extensions
    const rapportAvecExt = await genererRapportAvecExtensions();

    console.log('   ‚úÖ Rapport avec extensions g√©n√©r√©');
    console.log(`   ‚Ä¢ Organismes: ${rapportAvecExt["üìã R√âSUM√â G√âN√âRAL"]["Total organismes"]}`);
    console.log(`   ‚Ä¢ Utilisateurs: ${rapportAvecExt["üìã R√âSUM√â G√âN√âRAL"]["Total utilisateurs"]}`);

    // ==================== TEST 12: COMPARAISON DE RAPPORTS ====================
    console.log('\nüîÑ 12. Comparaison des rapports (avant/apr√®s extensions)...\n');

    const comparaison = comparerRapports(rapportAvant, rapportAvecExt);

    console.log('   üìä √âvolution:');
    console.log(`   ‚Ä¢ Organismes ajout√©s: ${comparaison["üìä √âVOLUTION"]["Organismes ajout√©s"]}`);
    console.log(`   ‚Ä¢ Utilisateurs ajout√©s: ${comparaison["üìä √âVOLUTION"]["Utilisateurs ajout√©s"]}`);
    console.log(`   ‚Ä¢ √âvolution score: ${comparaison["üìä √âVOLUTION"]["√âvolution score global"]}%`);

    // ==================== TEST 13: AFFICHAGE JSON ====================
    console.log('\nüìã 13. Affichage du rapport JSON complet...\n');

    // Cr√©er un rapport simplifi√© pour l'affichage
    const rapportSimplifie = {
      "üìã R√âSUM√â": rapport["üìã R√âSUM√â G√âN√âRAL"],
      "‚úÖ VALIDATION": rapport["‚úÖ VALIDATION"],
      "üìä SCORES": rapport["üìä M√âTRIQUES DE QUALIT√â"],
      "üèÜ TOP 3": top10.slice(0, 3).map(o => ({
        nom: o.nom,
        utilisateurs: o.utilisateurs
      })),
      "‚ö†Ô∏è STATUT": anomalies[0]
    };

    console.log(JSON.stringify(rapportSimplifie, null, 2));

    // ==================== R√âSUM√â FINAL ====================
    console.log('\n' + '='.repeat(60));
    console.log('üéâ TOUS LES TESTS DE RAPPORTS SONT PASS√âS!');
    console.log('='.repeat(60));

    console.log(`
üìä R√âSUM√â DES TESTS:
‚Ä¢ Rapport de contr√¥le g√©n√©r√© avec succ√®s
‚Ä¢ ${rapport["üìã R√âSUM√â G√âN√âRAL"]["Total organismes"]} organismes analys√©s
‚Ä¢ ${rapport["üìã R√âSUM√â G√âN√âRAL"]["Total utilisateurs"]} utilisateurs v√©rifi√©s
‚Ä¢ Score de qualit√© global: ${metriques.scoreGlobal}%
‚Ä¢ Validation compl√®te: ${Object.values(validation).every(v => v) ? '‚úÖ' : '‚ö†Ô∏è'}
‚Ä¢ Exports disponibles: TXT, HTML, CSV, JSON
‚Ä¢ Comparaison avant/apr√®s extensions fonctionnelle

‚úÖ Le syst√®me de rapports est totalement op√©rationnel!

üìÅ Fichiers g√©n√©r√©s:
‚Ä¢ rapport-controle.html - Rapport visuel complet
‚Ä¢ rapport-controle.csv - Donn√©es pour Excel/Google Sheets
    `);

    // Nettoyer
    console.log('üóëÔ∏è Nettoyage des extensions pour les prochains tests...');
    extensionsSysteme.reinitialiser();

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
    process.exit(1);
  }
}

// Ex√©cuter le test
testerRapports().catch(console.error);
