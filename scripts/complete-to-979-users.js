const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

// Noms et pr√©noms gabonais authentiques
const PRENOMS_MASCULINS = [
  'Alexandre', 'Jean-Baptiste', 'Guy Patrick', 'Hermann', 'Roger', 'Fran√ßois', 'Alain', 'Paul',
  'Bertrand', 'Michel', 'Pierre', 'Andr√©', 'Joseph', 'Emmanuel', 'Daniel', 'David', 'Martin',
  'Claude', 'Bernard', 'Philippe', 'Pascal', 'Thierry', 'Christian', 'Olivier', 'Laurent',
  'St√©phane', 'S√©bastien', 'Nicolas', 'Vincent', 'Patrick', 'Fr√©d√©ric', 'J√©r√¥me', 'Didier',
  'Jean-Claude', 'Jean-Marie', 'Jean-Pierre', 'Jean-Paul', 'Marie-Joseph', 'Sylvain', 'Lucien'
];

const PRENOMS_FEMININS = [
  'Marie-Claire', 'Paulette', 'R√©gine', 'Micheline', 'Sylvie', 'Christine', 'Antoinette', 'Georgette',
  'Marie-Christine', 'Gr√¢ce', 'V√©ronique', 'Claudine', 'Fran√ßoise', 'Sylviane', 'Monique', 'Catherine',
  'Brigitte', 'Isabelle', 'Nathalie', 'Sophie', 'Martine', 'Nicole', 'Chantal', 'Dominique',
  '√âlisabeth', 'Jacqueline', 'Marie-France', 'Anne-Marie', 'Marie-Jos√©', 'Patricia', 'Christiane'
];

const NOMS_FAMILLES_GABONAIS = [
  'NGOUA', 'OBAME', 'MISSAMBO', 'NKOGHE', 'MBOUMBA', 'ESSONO', 'OBIANG NDONG', 'ONDO',
  'MOUNGUENGUI', 'IMMONGAULT', 'BAKOMBA', 'MARIN', 'NDONG', 'KOMBILA', 'MOUNANGA', 'LEYAMA',
  'EKOMO', 'MBA', 'OWONO MEBA', 'NDZANG', 'RUFIN ONDZONDO', 'OYANE', 'MINDZIE', 'NGUEMA',
  'BIYOGHE', 'BOUROUMBA', 'ELLA', 'EYEGHE', 'FANG', 'KOMBILA', 'MABIALA', 'MEZUI',
  'MINKO', 'MOUSSOUNDA', 'NDONG AYONG', 'NGOUA', 'NKOGHE MVEANG', 'NTOUTOUME', 'NZIGOU'
];

const POSTES_ADMIN = [
  'Ministre', 'Ministre D√©l√©gu√©', 'Secr√©taire d\'√âtat', 'Directeur G√©n√©ral',
  'Directeur Central', 'Directeur des Affaires Juridiques', 'Directeur des Ressources Humaines',
  'Directeur de la Communication', 'Directeur de la Planification', 'Directeur des √âtudes',
  'Inspecteur G√©n√©ral', 'Conseiller Technique', 'Attach√© de Cabinet', 'Chef de Cabinet',
  'Directeur de Cabinet', 'Conseiller Sp√©cial'
];

// G√©n√©rateur de num√©ros de t√©l√©phone gabonais
function genererTelephone() {
  const prefixes = ['01', '02', '03', '04', '05', '06', '07', '08', '09'];
  const prefix = prefixes[Math.floor(Math.random() * prefixes.length)];
  const numero = Math.floor(Math.random() * 90000000 + 10000000).toString();
  return `+241 ${prefix} ${numero.slice(0, 2)} ${numero.slice(2, 4)} ${numero.slice(4, 6)}`;
}

// G√©n√©rateur d'email professionnel
function genererEmail(prenom, nom, poste, organisationCode) {
  const prenomClean = prenom.toLowerCase().replace(/[^a-z]/g, '');
  const nomClean = nom.toLowerCase().replace(/[^a-z]/g, '');
  const posteCode = poste.toLowerCase()
    .replace(/ministre/g, 'ministre')
    .replace(/directeur/g, 'dir')
    .replace(/chef/g, 'chef')
    .replace(/secr√©taire/g, 'sg')
    .replace(/[^a-z]/g, '.');

  const options = [
    `${prenomClean}.${nomClean}@${organisationCode.toLowerCase()}.gouv.ga`,
    `${posteCode}@${organisationCode.toLowerCase()}.gouv.ga`,
    `${prenomClean}${nomClean.charAt(0)}@${organisationCode.toLowerCase()}.gouv.ga`
  ];

  return options[Math.floor(Math.random() * options.length)];
}

async function completeUsers() {
  console.log('üöÄ Compl√©tion pour atteindre 979 utilisateurs...\n');

  try {
    // V√©rifier l'√©tat actuel
    const currentCount = await prisma.user.count();
    console.log(`üìä Utilisateurs actuels : ${currentCount}`);

    const missingCount = 979 - currentCount;
    console.log(`‚ûï Utilisateurs manquants : ${missingCount}\n`);

    if (missingCount <= 0) {
      console.log('‚úÖ Objectif d√©j√† atteint !');
      return;
    }

    // R√©cup√©rer les organisations
    const organizations = await prisma.organization.findMany();
    console.log(`üìã ${organizations.length} organisations disponibles`);

    // R√©partir les utilisateurs manquants
    const adminCount = Math.min(missingCount, 71); // ADMIN prioritaires
    const restCount = missingCount - adminCount;

    const usersToCreate = [];

    // 1. ADMINS (71 pour compl√©ter)
    console.log(`üëë Cr√©ation de ${adminCount} Administrateurs...`);

    for (let i = 0; i < adminCount; i++) {
      const org = organizations[Math.floor(Math.random() * organizations.length)];
      const isEven = Math.random() > 0.3; // 70% d'hommes pour les hauts postes
      const prenom = isEven ?
        PRENOMS_MASCULINS[Math.floor(Math.random() * PRENOMS_MASCULINS.length)] :
        PRENOMS_FEMININS[Math.floor(Math.random() * PRENOMS_FEMININS.length)];
      const nom = NOMS_FAMILLES_GABONAIS[Math.floor(Math.random() * NOMS_FAMILLES_GABONAIS.length)];
      const poste = POSTES_ADMIN[Math.floor(Math.random() * POSTES_ADMIN.length)];

      usersToCreate.push({
        email: genererEmail(prenom, nom, poste, org.code),
        phone: genererTelephone(),
        firstName: prenom,
        lastName: nom,
        role: 'ADMIN',
        isActive: Math.random() > 0.05, // 95% actifs
        isVerified: Math.random() > 0.1, // 90% v√©rifi√©s
        jobTitle: poste,
        primaryOrganizationId: org.id
      });
    }

    // 2. Compl√©ter le reste avec des citoyens si n√©cessaire
    if (restCount > 0) {
      console.log(`üè† Cr√©ation de ${restCount} Citoyens compl√©mentaires...`);

      const PROFESSIONS_CITOYENS = [
        'Ing√©nieur', 'Enseignant', 'M√©decin', 'Avocat', 'Comptable', 'Commer√ßant', 'Entrepreneur',
        'Informaticien', 'Architecte', 'Journaliste', 'Pharmacien', 'V√©t√©rinaire', 'Dentiste',
        'Infirmier', 'Sage-femme', 'Technicien', 'M√©canicien', '√âlectricien', 'Plombier',
        'Menuisier', 'Ma√ßon', 'Chauffeur', 'Cuisinier', 'Coiffeur', 'Couturier', 'Photographe'
      ];

      for (let i = 0; i < restCount; i++) {
        const isEven = Math.random() > 0.52; // 48% de femmes, 52% d'hommes
        const prenom = isEven ?
          PRENOMS_MASCULINS[Math.floor(Math.random() * PRENOMS_MASCULINS.length)] :
          PRENOMS_FEMININS[Math.floor(Math.random() * PRENOMS_FEMININS.length)];
        const nom = NOMS_FAMILLES_GABONAIS[Math.floor(Math.random() * NOMS_FAMILLES_GABONAIS.length)];
        const profession = PROFESSIONS_CITOYENS[Math.floor(Math.random() * PROFESSIONS_CITOYENS.length)];

        const prenomClean = prenom.toLowerCase().replace(/[^a-z]/g, '');
        const nomClean = nom.toLowerCase().replace(/[^a-z]/g, '');
        const providers = ['gmail.com', 'yahoo.fr', 'hotmail.com', 'outlook.com'];
        const provider = providers[Math.floor(Math.random() * providers.length)];
        const email = `${prenomClean}.${nomClean}${Math.floor(Math.random() * 999)}@${provider}`;

        usersToCreate.push({
          email: email,
          phone: genererTelephone(),
          firstName: prenom,
          lastName: nom,
          role: 'USER',
          isActive: Math.random() > 0.2, // 80% actifs
          isVerified: Math.random() > 0.3, // 70% v√©rifi√©s
          jobTitle: profession,
          primaryOrganizationId: null
        });
      }
    }

    console.log(`\nüìä Total utilisateurs √† cr√©er: ${usersToCreate.length}`);
    console.log('üíæ Insertion en base de donn√©es...\n');

    // Insertion par lots
    const batchSize = 50;
    let createdCount = 0;

    for (let i = 0; i < usersToCreate.length; i += batchSize) {
      const batch = usersToCreate.slice(i, i + batchSize);

      try {
        await prisma.user.createMany({
          data: batch,
          skipDuplicates: true
        });
        createdCount += batch.length;
        console.log(`‚úÖ Lot ${Math.floor(i / batchSize) + 1}: ${batch.length} utilisateurs cr√©√©s (Total: ${createdCount})`);
      } catch (batchError) {
        console.log(`‚ö†Ô∏è Erreur sur le lot ${Math.floor(i / batchSize) + 1}: ${batchError.message}`);

        // Essayer individuellement
        for (const userData of batch) {
          try {
            await prisma.user.create({ data: userData });
            createdCount++;
          } catch (individualError) {
            console.log(`‚ùå Erreur utilisateur ${userData.firstName} ${userData.lastName}: ${individualError.message}`);
          }
        }
      }
    }

    // Statistiques finales
    const finalCount = await prisma.user.count();
    const stats = await prisma.user.groupBy({
      by: ['role'],
      _count: { role: true }
    });

    console.log('\nüéâ COMPL√âTION R√âUSSIE !');
    console.log('======================');
    console.log(`üë• Total utilisateurs final: ${finalCount}`);
    console.log(`‚ûï Utilisateurs ajout√©s: ${createdCount}`);
    console.log(`üéØ Objectif 979: ${finalCount >= 979 ? '‚úÖ ATTEINT' : `‚ùå Manque ${979 - finalCount}`}`);

    console.log('\nüìä R√©partition finale par r√¥le:');
    stats.forEach(stat => {
      console.log(`   ${stat.role}: ${stat._count.role} utilisateurs`);
    });

    console.log('\nüá¨üá¶ L\'administration gabonaise a maintenant un syst√®me complet !');

  } catch (error) {
    console.error('‚ùå Erreur lors de la compl√©tion:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

completeUsers();
