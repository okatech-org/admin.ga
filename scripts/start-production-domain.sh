#!/bin/bash

# üåê D√©marrage Production - administration.ga avec Domaine

echo "üöÄ D√âMARRAGE PRODUCTION ADMINISTRATION.GA"
echo "========================================"
echo ""

# Couleurs
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# Configuration
DOMAIN="administration.ga"
LOCAL_IP="185.26.106.234"
PORT="3000"

echo -e "${BLUE}üîß Configuration D√©tect√©e${NC}"
echo "========================="
echo "‚Ä¢ Domaine: $DOMAIN"
echo "‚Ä¢ IP Publique: $LOCAL_IP"
echo "‚Ä¢ Port: $PORT"
echo "‚Ä¢ Mode: Production avec domaine"
echo ""

# V√©rification pr√©requis
echo -e "${YELLOW}üìã V√©rification des Pr√©requis${NC}"
echo "==============================="

# V√©rifier Node.js
if command -v node &> /dev/null; then
    NODE_VERSION=$(node --version)
    echo -e "${GREEN}‚úÖ Node.js: $NODE_VERSION${NC}"
else
    echo -e "${RED}‚ùå Node.js non install√©${NC}"
    exit 1
fi

# V√©rifier npm
if command -v npm &> /dev/null; then
    NPM_VERSION=$(npm --version)
    echo -e "${GREEN}‚úÖ npm: $NPM_VERSION${NC}"
else
    echo -e "${RED}‚ùå npm non install√©${NC}"
    exit 1
fi

# V√©rifier les d√©pendances
if [ -f "package.json" ]; then
    echo -e "${GREEN}‚úÖ package.json trouv√©${NC}"
else
    echo -e "${RED}‚ùå package.json manquant${NC}"
    exit 1
fi

echo ""

# Installation/Mise √† jour des d√©pendances
echo -e "${YELLOW}üì¶ Installation des D√©pendances${NC}"
echo "================================="
npm install --production=false
echo -e "${GREEN}‚úÖ D√©pendances install√©es${NC}"
echo ""

# Build de production
echo -e "${YELLOW}üî® Build de Production${NC}"
echo "======================"
npm run build
if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Build r√©ussi${NC}"
else
    echo -e "${RED}‚ùå Erreur lors du build${NC}"
    exit 1
fi
echo ""

# Configuration des variables d'environnement
echo -e "${YELLOW}‚öôÔ∏è Configuration Environnement${NC}"
echo "==============================="

# Cr√©er/Mettre √† jour .env.local pour production
cat > .env.local << EOF
# Configuration Production administration.ga
NODE_ENV=production
NEXT_PUBLIC_APP_URL=https://$DOMAIN
HOSTNAME=0.0.0.0
PORT=$PORT

# Configuration du domaine
NEXT_PUBLIC_DOMAIN=$DOMAIN
NEXT_PUBLIC_IP=$LOCAL_IP

# Configuration de base de donn√©es (√† adapter selon vos besoins)
DATABASE_URL="postgresql://username:password@localhost:5432/administration_ga"

# Cl√©s API (remplacez par vos vraies cl√©s)
NEXTAUTH_SECRET="your-nextauth-secret-key-for-production"
NEXTAUTH_URL=https://$DOMAIN

# Configuration Netim (si vous avez les cl√©s API)
NETIM_API_KEY=""
NETIM_API_SECRET=""
NETIM_BASE_URL="https://rest.netim.com/3.0"

# Configuration SSL/HTTPS
SSL_ENABLED=true
FORCE_HTTPS=true
EOF

echo -e "${GREEN}‚úÖ Variables d'environnement configur√©es${NC}"
echo ""

# V√©rification des ports
echo -e "${YELLOW}üîå V√©rification des Ports${NC}"
echo "=========================="

# V√©rifier si le port est libre
if lsof -Pi :$PORT -sTCP:LISTEN -t >/dev/null ; then
    echo -e "${YELLOW}‚ö†Ô∏è  Port $PORT d√©j√† utilis√©${NC}"
    echo "Arr√™t du processus existant..."
    pkill -f "next.*$PORT" || true
    sleep 2
fi

echo -e "${GREEN}‚úÖ Port $PORT disponible${NC}"
echo ""

# Messages d'information
echo -e "${BLUE}üìã Instructions DNS Netim${NC}"
echo "=========================="
echo "Configurez ces enregistrements chez Netim.com :"
echo ""
echo "Type: A"
echo "Nom: @"
echo "Valeur: $LOCAL_IP"
echo "TTL: 3600"
echo ""
echo "Type: A"
echo "Nom: www"
echo "Valeur: $LOCAL_IP"
echo "TTL: 3600"
echo ""

# Configuration du pare-feu (suggestions)
echo -e "${YELLOW}üõ°Ô∏è  Configuration Pare-feu (Important)${NC}"
echo "====================================="
echo "Ouvrez ces ports sur votre machine :"
echo "‚Ä¢ Port 80 (HTTP)"
echo "‚Ä¢ Port 443 (HTTPS)"
echo "‚Ä¢ Port $PORT (Application)"
echo ""
echo "Commandes suggestions (macOS) :"
echo "sudo pfctl -f /etc/pf.conf"
echo ""

# D√©marrage du serveur
echo -e "${GREEN}üöÄ D√©marrage du Serveur Production${NC}"
echo "=================================="
echo "Serveur d√©marr√© sur :"
echo "‚Ä¢ Local: http://localhost:$PORT"
echo "‚Ä¢ R√©seau: http://$LOCAL_IP:$PORT"
echo "‚Ä¢ Domaine: http://$DOMAIN:$PORT (une fois DNS propag√©)"
echo ""

# Configuration pour √©couter sur toutes les interfaces
export HOSTNAME=0.0.0.0
export PORT=$PORT

# D√©marrage avec gestion des erreurs
echo -e "${BLUE}üéØ Lancement de l'application...${NC}"
echo ""

# D√©marrer le serveur en mode production
npm start -- --hostname 0.0.0.0 --port $PORT &
SERVER_PID=$!

# Attendre que le serveur d√©marre
sleep 5

# V√©rifier si le serveur fonctionne
if curl -s -f http://localhost:$PORT >/dev/null; then
    echo -e "${GREEN}‚úÖ Serveur d√©marr√© avec succ√®s !${NC}"
    echo ""
    echo -e "${BLUE}üåê URLs d'Acc√®s${NC}"
    echo "==============="
    echo "‚Ä¢ Application: http://localhost:$PORT"
    echo "‚Ä¢ Configuration: http://localhost:$PORT/admin-web/config/administration.ga"
    echo "‚Ä¢ API Test: http://localhost:$PORT/api/domain-management/dns?domain=$DOMAIN"
    echo ""
    echo -e "${YELLOW}‚è≥ En attente de propagation DNS...${NC}"
    echo "Une fois configur√© chez Netim, votre site sera accessible √† :"
    echo "‚Ä¢ http://$DOMAIN:$PORT"
    echo "‚Ä¢ https://$DOMAIN (avec SSL automatique)"
    echo ""
    echo -e "${GREEN}üéâ Serveur pr√™t pour production !${NC}"
    echo ""
    echo "Appuyez sur Ctrl+C pour arr√™ter le serveur"

    # Garder le script actif
    wait $SERVER_PID
else
    echo -e "${RED}‚ùå Erreur lors du d√©marrage du serveur${NC}"
    exit 1
fi
