#!/usr/bin/env bun

/**
 * TEST SP√âCIFIQUE DE LA VUE D'ENSEMBLE
 * V√©rifie que les statistiques se chargent correctement dans la page postes-emploi
 */

async function testVueEnsembleStats() {
  console.log('\n' + '='.repeat(70));
  console.log('üß™ TEST VUE D\'ENSEMBLE - STATISTIQUES');
  console.log('='.repeat(70) + '\n');

  try {
    // 1. Test de l'API statistiques
    console.log('üìä 1. Test de l\'API /api/rh/statistiques...');
    const statsResponse = await fetch('http://localhost:3000/api/rh/statistiques');

    if (!statsResponse.ok) {
      throw new Error(`API statistiques √©chou√©: ${statsResponse.status}`);
    }

    const statsResult = await statsResponse.json();

    if (!statsResult.success) {
      throw new Error('API statistiques retourne success: false');
    }

    console.log('   ‚úÖ API statistiques fonctionne');

    // 2. Analyser la structure des donn√©es
    console.log('\nüìã 2. Structure des donn√©es statistiques...');
    const rawStats = statsResult.data;

    console.log('   üìä Sections disponibles:');
    Object.keys(rawStats).forEach(key => {
      if (typeof rawStats[key] === 'object' && rawStats[key] !== null && !Array.isArray(rawStats[key])) {
        console.log(`      ‚Ä¢ ${key}: ${Object.keys(rawStats[key]).length} m√©triques`);
      } else if (Array.isArray(rawStats[key])) {
        console.log(`      ‚Ä¢ ${key}: ${rawStats[key].length} √©l√©ments`);
      } else {
        console.log(`      ‚Ä¢ ${key}: ${rawStats[key]}`);
      }
    });

    // 3. Extraire les donn√©es cl√©s
    console.log('\nüî¢ 3. Extraction des donn√©es cl√©s...');

    const vueEnsemble = rawStats['üìä VUE D\'ENSEMBLE'] || {};
    const situationPostes = rawStats['üìã SITUATION DES POSTES'] || {};
    const ressourcesHumaines = rawStats['üë• RESSOURCES HUMAINES'] || {};
    const statistiquesDetailees = rawStats['statistiques_detaillees'] || {};

    console.log('   üìä Vue d\'ensemble:');
    Object.entries(vueEnsemble).forEach(([key, value]) => {
      console.log(`      ‚Ä¢ ${key}: ${value}`);
    });

    console.log('   üìã Situation des postes:');
    Object.entries(situationPostes).forEach(([key, value]) => {
      console.log(`      ‚Ä¢ ${key}: ${value}`);
    });

    console.log('   üë• Ressources humaines:');
    Object.entries(ressourcesHumaines).forEach(([key, value]) => {
      console.log(`      ‚Ä¢ ${key}: ${value}`);
    });

    // 4. Simuler la transformation des donn√©es comme dans la page
    console.log('\nüîÑ 4. Simulation de la transformation des donn√©es...');

    const transformedStats = {
      global: {
        total_organismes: vueEnsemble['Total organismes'] || 0,
        total_postes: vueEnsemble['Total postes'] || 0,
        total_fonctionnaires: vueEnsemble['Total fonctionnaires'] || 0,
        taux_occupation: statistiquesDetailees.taux_occupation || 60,
        postes_vacants: situationPostes['Postes vacants'] || 0,
        fonctionnaires_disponibles: ressourcesHumaines['En attente d\'affectation'] || 0
      }
    };

    console.log('   ‚úÖ Donn√©es transform√©es pour la page:');
    Object.entries(transformedStats.global).forEach(([key, value]) => {
      console.log(`      ‚Ä¢ ${key}: ${value}`);
    });

    // 5. Validation des donn√©es
    console.log('\n‚úÖ 5. Validation des donn√©es...');

    const validations = [
      {
        test: 'Total organismes > 0',
        result: transformedStats.global.total_organismes > 0,
        value: transformedStats.global.total_organismes
      },
      {
        test: 'Total postes > 0',
        result: transformedStats.global.total_postes > 0,
        value: transformedStats.global.total_postes
      },
      {
        test: 'Total fonctionnaires > 0',
        result: transformedStats.global.total_fonctionnaires > 0,
        value: transformedStats.global.total_fonctionnaires
      },
      {
        test: 'Postes vacants > 0',
        result: transformedStats.global.postes_vacants > 0,
        value: transformedStats.global.postes_vacants
      },
      {
        test: 'Fonctionnaires disponibles > 0',
        result: transformedStats.global.fonctionnaires_disponibles > 0,
        value: transformedStats.global.fonctionnaires_disponibles
      },
      {
        test: 'Taux occupation r√©aliste (0-100%)',
        result: transformedStats.global.taux_occupation >= 0 && transformedStats.global.taux_occupation <= 100,
        value: `${transformedStats.global.taux_occupation}%`
      }
    ];

    let validationsPassees = 0;
    validations.forEach(validation => {
      if (validation.result) {
        console.log(`   ‚úÖ ${validation.test}: ${validation.value}`);
        validationsPassees++;
      } else {
        console.log(`   ‚ùå ${validation.test}: ${validation.value}`);
      }
    });

    // 6. Test de coh√©rence
    console.log('\nüîç 6. Tests de coh√©rence...');

    const coherenceTests = [
      {
        test: 'Organismes = 141 (attendu)',
        result: transformedStats.global.total_organismes === 141,
        detail: `${transformedStats.global.total_organismes} organismes`
      },
      {
        test: 'Postes vacants < Total postes',
        result: transformedStats.global.postes_vacants < transformedStats.global.total_postes,
        detail: `${transformedStats.global.postes_vacants} vacants sur ${transformedStats.global.total_postes} total`
      },
      {
        test: 'Fonctionnaires disponibles < Total fonctionnaires',
        result: transformedStats.global.fonctionnaires_disponibles < transformedStats.global.total_fonctionnaires,
        detail: `${transformedStats.global.fonctionnaires_disponibles} disponibles sur ${transformedStats.global.total_fonctionnaires} total`
      }
    ];

    let coherenceScore = 0;
    coherenceTests.forEach(test => {
      if (test.result) {
        console.log(`   ‚úÖ ${test.test}`);
        console.log(`      ${test.detail}`);
        coherenceScore++;
      } else {
        console.log(`   ‚ùå ${test.test}`);
        console.log(`      ${test.detail}`);
      }
    });

    // R√©sultats finaux
    console.log('\n' + '='.repeat(50));
    console.log('üéØ R√âSULTATS FINAUX');
    console.log('='.repeat(50));

    if (validationsPassees === validations.length && coherenceScore === coherenceTests.length) {
      console.log('\nüéâ TOUS LES TESTS SONT PASS√âS !');
      console.log('\n‚ú® La vue d\'ensemble affichera maintenant:');
      console.log(`   üìä ${transformedStats.global.total_organismes} organismes`);
      console.log(`   üìã ${transformedStats.global.total_postes} postes (${transformedStats.global.postes_vacants} vacants)`);
      console.log(`   üë• ${transformedStats.global.total_fonctionnaires} fonctionnaires (${transformedStats.global.fonctionnaires_disponibles} disponibles)`);
      console.log(`   üìà ${transformedStats.global.taux_occupation}% taux d'occupation`);

      console.log('\nüöÄ RECOMMANDATIONS:');
      console.log('   ‚Ä¢ Actualiser la page /super-admin/postes-emploi');
      console.log('   ‚Ä¢ V√©rifier l\'onglet "Vue d\'ensemble"');
      console.log('   ‚Ä¢ Les 4 cartes de statistiques doivent afficher les vraies donn√©es');

      return { success: true, stats: transformedStats };
    } else {
      console.log(`\n‚ö†Ô∏è  Probl√®mes d√©tect√©s:`);
      console.log(`   ‚Ä¢ ${validations.length - validationsPassees} validation(s) √©chou√©e(s)`);
      console.log(`   ‚Ä¢ ${coherenceTests.length - coherenceScore} test(s) de coh√©rence √©chou√©(s)`);

      return { success: false, validationsPassees, coherenceScore };
    }

  } catch (error) {
    console.error('\n‚ùå ERREUR LORS DU TEST:', error);
    console.log('\n‚ÑπÔ∏è  V√©rifiez que:');
    console.log('   ‚Ä¢ Le serveur de d√©veloppement est d√©marr√©');
    console.log('   ‚Ä¢ L\'API /api/rh/statistiques fonctionne');
    console.log('   ‚Ä¢ Le syst√®me RH gabonais est initialis√©');

    return { success: false, error };
  }
}

// Fonction principale
async function main() {
  console.log('üß™ Test des statistiques de la vue d\'ensemble...');
  console.log('‚ÑπÔ∏è  Ce test v√©rifie que les donn√©es se chargent correctement');

  try {
    const result = await testVueEnsembleStats();

    if (result.success) {
      console.log('\n‚úÖ Test r√©ussi - Les statistiques sont pr√™tes!');
      process.exit(0);
    } else {
      console.log('\n‚ùå Test √©chou√© - V√©rifiez les erreurs ci-dessus');
      process.exit(1);
    }
  } catch (error) {
    console.error('\nüí• Erreur fatale:', error);
    process.exit(1);
  }
}

// Lancer le test
setTimeout(() => {
  main().catch(console.error);
}, 500);
