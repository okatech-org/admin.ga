#!/bin/bash

# üß™ Test Connexion Rapide - administration.ga (Configuration Netim R√©elle)

echo "üß™ TEST CONNEXION ADMINISTRATION.GA"
echo "==================================="
echo ""

# Configuration r√©elle Netim
DOMAIN="administration.ga"
REAL_IP="185.26.106.234"

# Couleurs
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üéØ Configuration Netim D√©tect√©e${NC}"
echo "‚Ä¢ Domaine: $DOMAIN"
echo "‚Ä¢ IP r√©elle: $REAL_IP"
echo ""

# Test 1: R√©solution DNS
echo -e "${YELLOW}üîç Test 1: R√©solution DNS${NC}"
echo "========================="

resolved_ip=$(nslookup $DOMAIN 2>/dev/null | grep "Address:" | tail -1 | awk '{print $2}')

if [ "$resolved_ip" = "$REAL_IP" ]; then
    echo -e "${GREEN}‚úÖ DNS OK: $DOMAIN ‚Üí $REAL_IP${NC}"
else
    echo -e "${RED}‚ùå DNS incorrect${NC}"
    echo "   R√©solu: ${resolved_ip:-'Non r√©solu'}"
    echo "   Attendu: $REAL_IP"
fi

# Test 2: Ping
echo ""
echo -e "${YELLOW}üèì Test 2: Ping${NC}"
echo "==============="

if ping -c 1 $REAL_IP > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Ping OK: $REAL_IP r√©pond${NC}"
else
    echo -e "${RED}‚ùå Ping √©chou√©: $REAL_IP ne r√©pond pas${NC}"
fi

# Test 3: Port 80 (HTTP)
echo ""
echo -e "${YELLOW}üåê Test 3: Port 80 (HTTP)${NC}"
echo "=========================="

if timeout 5 bash -c "</dev/tcp/$REAL_IP/80" 2>/dev/null; then
    echo -e "${GREEN}‚úÖ Port 80 ouvert sur $REAL_IP${NC}"
else
    echo -e "${RED}‚ùå Port 80 ferm√© sur $REAL_IP${NC}"
fi

# Test 4: Port 3000 (Next.js)
echo ""
echo -e "${YELLOW}‚ö° Test 4: Port 3000 (Next.js)${NC}"
echo "=============================="

if timeout 5 bash -c "</dev/tcp/$REAL_IP/3000" 2>/dev/null; then
    echo -e "${GREEN}‚úÖ Port 3000 ouvert sur $REAL_IP${NC}"

    # Test HTTP sur port 3000
    if curl -s -f --connect-timeout 5 "http://$REAL_IP:3000" >/dev/null; then
        echo -e "${GREEN}‚úÖ Application Next.js accessible${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Port ouvert mais application pas pr√™te${NC}"
    fi
else
    echo -e "${RED}‚ùå Port 3000 ferm√© sur $REAL_IP${NC}"
    echo "   D√©marrez votre application: npm start"
fi

# Test 5: Domaine HTTP
echo ""
echo -e "${YELLOW}üåç Test 5: Acc√®s Domaine${NC}"
echo "========================"

if curl -s -f --connect-timeout 5 "http://$DOMAIN" >/dev/null; then
    echo -e "${GREEN}‚úÖ http://$DOMAIN accessible${NC}"
elif curl -s -f --connect-timeout 5 "http://$DOMAIN:3000" >/dev/null; then
    echo -e "${GREEN}‚úÖ http://$DOMAIN:3000 accessible${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Domaine pas encore accessible${NC}"
    echo "   Normal si l'application n'est pas d√©marr√©e"
fi

# Test 6: HTTPS
echo ""
echo -e "${YELLOW}üîí Test 6: HTTPS${NC}"
echo "=================="

if curl -s -f --connect-timeout 5 "https://$DOMAIN" >/dev/null; then
    echo -e "${GREEN}‚úÖ https://$DOMAIN accessible (SSL configur√©)${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  HTTPS pas encore configur√©${NC}"
    echo "   Configurez Let's Encrypt pour activer SSL"
fi

# R√©sum√©
echo ""
echo -e "${BLUE}üìä R√âSUM√â${NC}"
echo "========"

if [ "$resolved_ip" = "$REAL_IP" ]; then
    echo -e "${GREEN}‚úÖ DNS configur√© correctement${NC}"
else
    echo -e "${RED}‚ùå Probl√®me DNS${NC}"
fi

if ping -c 1 $REAL_IP > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Serveur accessible${NC}"
else
    echo -e "${RED}‚ùå Serveur non accessible${NC}"
fi

if timeout 5 bash -c "</dev/tcp/$REAL_IP/3000" 2>/dev/null; then
    echo -e "${GREEN}‚úÖ Application pr√™te${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Application √† d√©marrer${NC}"
fi

echo ""
echo -e "${BLUE}üöÄ Prochaines √©tapes:${NC}"
if [ "$resolved_ip" != "$REAL_IP" ]; then
    echo "1. V√©rifier la configuration DNS chez Netim"
fi

if ! timeout 5 bash -c "</dev/tcp/$REAL_IP/3000" 2>/dev/null; then
    echo "2. D√©marrer l'application: npm start"
fi

echo "3. Configurer Nginx pour le port 80"
echo "4. Configurer SSL avec Let's Encrypt"
echo ""
