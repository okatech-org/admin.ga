/**
 * Script de test pour v√©rifier que toutes les nouvelles APIs fonctionnent correctement
 */

const API_BASE_URL = 'http://localhost:3000';

const ENDPOINTS = [
  '/api/super-admin/stats/organismes',
  '/api/super-admin/stats/postes',
  '/api/super-admin/stats/utilisateurs',
  '/api/super-admin/stats/services',
  '/api/super-admin/stats/relations',
  '/api/super-admin/stats/synthese'
];

async function testAPI(endpoint: string) {
  try {
    console.log(`üîç Test de ${endpoint}...`);

    const response = await fetch(`${API_BASE_URL}${endpoint}`);
    const data = await response.json();

    if (response.ok && data.success) {
      console.log(`‚úÖ ${endpoint} - OK`);
      console.log(`   üìä Donn√©es charg√©es: ${Object.keys(data.data).length} sections`);
      return true;
    } else {
      console.log(`‚ùå ${endpoint} - ERREUR: ${data.error || 'R√©ponse invalide'}`);
      return false;
    }
  } catch (error) {
    console.log(`‚ùå ${endpoint} - ERREUR: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
    return false;
  }
}

async function testAllAPIs() {
  console.log('üöÄ Test des APIs de statistiques...\n');

  const results = await Promise.all(
    ENDPOINTS.map(endpoint => testAPI(endpoint))
  );

  const successCount = results.filter(result => result).length;
  const totalCount = results.length;

  console.log(`\nüìà R√©sultats: ${successCount}/${totalCount} APIs fonctionnelles`);

  if (successCount === totalCount) {
    console.log('üéâ Tous les tests sont R√âUSSIS !');
    console.log('\nüìã Prochaines √©tapes:');
    console.log('   1. D√©marrer l\'application: npm run dev');
    console.log('   2. Acc√©der √† /super-admin pour voir les nouvelles donn√©es');
    console.log('   3. Tester chaque page: organismes, utilisateurs, postes, services, relations');
  } else {
    console.log('‚ö†Ô∏è  Certaines APIs ont √©chou√©. V√©rifiez:');
    console.log('   1. Que le serveur Next.js est d√©marr√© (npm run dev)');
    console.log('   2. Que les donn√©es sont charg√©es (npm run db:migrate-real)');
    console.log('   3. Les logs du serveur pour plus de d√©tails');
  }
}

// Test rapide des donn√©es √©chantillon
async function testSampleData() {
  try {
    console.log('\nüóÇÔ∏è  Test des donn√©es √©chantillon...');

    // Import dynamique pour √©viter les erreurs de module
    const { default: DONNEES_ECHANTILLON } = await import('../lib/data/donnees-reelles-echantillon-gabon-2025');

    console.log('‚úÖ Donn√©es √©chantillon trouv√©es:');
    console.log(`   üìä ${DONNEES_ECHANTILLON.organismes.total_organismes} organismes`);
    console.log(`   üë• ${DONNEES_ECHANTILLON.fonctionnaires.total_fonctionnaires_reels} fonctionnaires`);
    console.log(`   üíº ${DONNEES_ECHANTILLON.systeme_utilisateurs.total_utilisateurs_systeme} utilisateurs syst√®me`);
    console.log(`   üèõÔ∏è  ${DONNEES_ECHANTILLON.services.total_services} services`);
    console.log(`   üîó ${DONNEES_ECHANTILLON.relations.total_relations} relations`);

    return true;
  } catch (error) {
    console.log(`‚ùå Erreur lors du chargement des donn√©es: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
    return false;
  }
}

// Ex√©cution des tests
async function main() {
  console.log('üá¨üá¶ TEST DES STATISTIQUES GABON 2025\n');

  // Test des donn√©es
  await testSampleData();

  // Test des APIs (uniquement si le serveur est accessible)
  const healthCheck = await fetch(`${API_BASE_URL}/api/auth/health`).catch(() => null);

  if (healthCheck) {
    await testAllAPIs();
  } else {
    console.log('\n‚ö†Ô∏è  Serveur Next.js non accessible.');
    console.log('   D√©marrez le serveur avec: npm run dev');
    console.log('   Puis relancez ce test avec: npx tsx scripts/test-apis.ts');
  }
}

main().catch(console.error);
