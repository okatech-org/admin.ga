'use client';

import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { AuthenticatedLayout } from '@/components/layouts/authenticated-layout';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Switch } from '@/components/ui/switch';
import { Checkbox } from '@/components/ui/checkbox';
import { toast } from 'sonner';
import {
  Target,
  Users,
  MapPin,
  Search,
  Filter,
  Download,
  RefreshCw,
  TrendingUp,
  UserCheck,
  BarChart3,
  ArrowRight,
  Eye,
  Settings,
  Loader2,
  Phone,
  Mail,
  Calendar,
  Star,
  AlertCircle,
  Euro,
  Building2,
  Briefcase,
  Crown,
  Activity,
  Plus,
  Edit,
  CheckCircle,
  Shield,
  Database,
  Settings2,
  FileText,
  BarChart,
  Trash2,
  Archive,
  AlertTriangle,
  ChevronDown,
  ExternalLink,
  Globe,
  Clock,
  Tag,
  Save,
  X,
  UserX,
  MessageSquare,
  History,
  BarChart2,
  Palette,
  Upload,
  Image,
  Link,
  Code,
  Monitor,
  Smartphone,
  Tablet,
  Copy,
  Check,
  Info,
  Zap,
  ChevronLeft,
  ChevronRight,
  ChevronsLeft,
  ChevronsRight,
  Layers,
  TreePine,
  Scale,
  Gavel,
  HelpCircle,
  Bell,
  Lock,
  Key,
  FileCheck,
  Users2
} from 'lucide-react';

import { organismeCommercialService } from '@/lib/services/organisme-commercial.service';
import { OrganismeCommercial, OrganismeCommercialGabon, ConversionProspectData, TypeContrat } from '@/lib/types/organisme';
import DGBFIPUsersManagement from '@/components/dgbfip/dgbfip-users-management';
import { getOrganismesComplets, STATISTIQUES_ORGANISMES, OrganismeGabonais } from '@/lib/data/gabon-organismes-141';
import { getAllOrganismesProspects, STATISTIQUES_PROSPECTS } from '@/lib/data/organismes-prospects-complete';
import { STATISTIQUES_POSTES_INTERNES } from '@/lib/data/postes-internes-ministeres';
import { OrganismeModalComplete } from '@/components/organismes/organisme-modal-complete';

interface LoadingStates {
  loading: boolean;
  refreshing: boolean;
  converting: string | null;
  updating: string | null;
  contactant: string | null;
}

interface ProspectsStats {
  totalProspects: number;
  prioriteHaute: number;
  prioriteMoyenne: number;
  prioriteBasse: number;
  valeurPipeline: number;
  conversionsObjectif: number;
  contactsRecents: number;
  repartitionSources: Record<string, number>;
}

// Classification officielle 5e République du Gabon
interface ClassificationOrganisme {
  id: string;
  nom: string;
  description: string;
  icon: any;
  color: string;
  groupes: string[];
  count: number;
}

// Pagination
interface PaginationState {
  page: number;
  itemsPerPage: number;
  totalItems: number;
  totalPages: number;
}

// Filtres avancés pour les 160 organismes
interface FiltresGabon {
  classification: string;
  groupe: string;
  province: string;
  niveauHierarchique: string;
  estPrincipal: boolean | null;
}

// Classifications officielles - Fonction pour calculer les classifications dynamiques
const getClassificationsOfficielles = (organismesGabon: OrganismeGabonais[]): ClassificationOrganisme[] => {
  return [
    {
      id: 'institutions-supremes',
      nom: 'Institutions Suprêmes',
      description: 'Présidence, Primature, Gouvernement et institutions constitutionnelles',
      icon: Crown,
      color: 'red',
      groupes: ['A'],
      count: organismesGabon.filter(org => org.groupe === 'A').length
    },
    {
      id: 'ministeres',
      nom: 'Ministères',
      description: 'Ministères sectoriels et départements ministériels',
      icon: Building2,
      color: 'blue',
      groupes: ['B'],
      count: organismesGabon.filter(org => org.groupe === 'B').length
    },
    {
      id: 'directions-generales',
      nom: 'Directions Générales',
      description: 'Directions générales autonomes et services déconcentrés',
      icon: Layers,
      color: 'green',
      groupes: ['C'],
      count: organismesGabon.filter(org => org.groupe === 'C').length
    },
    {
      id: 'institutions-judiciaires',
      nom: 'Institutions Judiciaires',
      description: 'Cours, tribunaux et institutions de justice',
      icon: Scale,
      color: 'purple',
      groupes: ['D'],
      count: organismesGabon.filter(org => org.groupe === 'D').length
    },
    {
      id: 'agences-specialisees',
      nom: 'Agences Spécialisées',
      description: 'Agences autonomes et établissements publics spécialisés',
      icon: Target,
      color: 'orange',
      groupes: ['E'],
      count: organismesGabon.filter(org => org.groupe === 'E').length
    },
    {
      id: 'administrations-territoriales',
      nom: 'Administrations Territoriales',
      description: 'Gouvernorats, mairies et collectivités territoriales',
      icon: TreePine,
      color: 'teal',
      groupes: ['F'],
      count: organismesGabon.filter(org => org.groupe === 'F').length
    },
    {
      id: 'pouvoir-legislatif',
      nom: 'Pouvoir Législatif',
      description: 'Assemblée Nationale et Sénat',
      icon: Gavel,
      color: 'indigo',
      groupes: ['L'],
      count: organismesGabon.filter(org => org.groupe === 'L').length
    },
    {
      id: 'institutions-independantes',
      nom: 'Institutions Indépendantes',
      description: 'Autorités administratives indépendantes',
      icon: Shield,
      color: 'gray',
      groupes: ['I'],
      count: organismesGabon.filter(org => org.groupe === 'I').length
    }
  ];
};

export default function OrganismesProspectsPage() {
  // États d'onglets
  const [activeTab, setActiveTab] = useState<string>('pipeline-commercial');

  // États de base
  const [searchTerm, setSearchTerm] = useState<string>('');
  const [selectedPriorite, setSelectedPriorite] = useState<string>('all');
  const [selectedSource, setSelectedSource] = useState<string>('all');
  const [selectedLocalisation, setSelectedLocalisation] = useState<string>('all');
  const [selectedType, setSelectedType] = useState<string>('all');

  // États pour les 160 organismes gabonais
  const [organismesGabon, setOrganismesGabon] = useState<OrganismeGabonais[]>([]);
  const [filtresGabon, setFiltresGabon] = useState<FiltresGabon>({
    classification: 'all',
    groupe: 'all',
    province: 'all',
    niveauHierarchique: 'all',
    estPrincipal: null
  });

  // Pagination pour les organismes gabonais (onglet officiel)
  const [pagination, setPagination] = useState<PaginationState>({
    page: 1,
    itemsPerPage: 20,
    totalItems: 0,
    totalPages: 0
  });

  // Pagination pour les prospects (onglet Pipeline Commercial)
  const [prospectsPagination, setProspectsPagination] = useState<PaginationState>({
    page: 1,
    itemsPerPage: 12, // 12 cartes par page pour un affichage optimal
    totalItems: 0,
    totalPages: 0
  });

  // États pour gestion générale
  const [allOrganismes, setAllOrganismes] = useState<OrganismeCommercialGabon[]>([]);
  const [selectedOrganismes, setSelectedOrganismes] = useState<string[]>([]);
  const [gestionAction, setGestionAction] = useState<string>('');

  // États des données
  const [prospects, setProspects] = useState<OrganismeCommercialGabon[]>([]);
  const [stats, setStats] = useState<ProspectsStats | null>(null);

  // États des modales
  const [isConvertModalOpen, setIsConvertModalOpen] = useState(false);
  const [isUpdateModalOpen, setIsUpdateModalOpen] = useState(false);
  const [isManageModalOpen, setIsManageModalOpen] = useState(false);
  const [selectedProspect, setSelectedProspect] = useState<OrganismeCommercialGabon | null>(null);
  const [modalActiveTab, setModalActiveTab] = useState('general');

  // États des formulaires
  const [conversionForm, setConversionForm] = useState<ConversionProspectData>({
    organismeId: '',
    typeContrat: 'STANDARD',
    montantAnnuel: 2500000,
    dureeContrat: 24,
    servicesSelectionnes: [],
    responsableCommercial: 'Jean-Pierre MBOUMBA',
    dateSignature: new Date().toISOString().split('T')[0],
    conditions: 'Contrat standard avec clauses gouvernementales'
  });

  // Formulaire de gestion complète
  const [manageForm, setManageForm] = useState({
    // Configuration générale
    nom: '',
    code: '',
    type: '',
    localisation: '',
    description: '',
    // Contact
    telephone: '',
    email: '',
    adresse: '',
    responsableContact: '',
    // Prospect info
    source: 'DEMANDE_DIRECTE',
    priorite: 'MOYENNE',
    notes: '',
    responsableProspection: '',
    // Services
    servicesSelectionnes: [] as string[],
    // Statut
    isActive: true,
    // Personnalisation & Multi-tenant
    slug: '',
    domainePersonnalise: '',
    logoUrl: '',
    faviconUrl: '',
    couleurPrimaire: '#1976d2',
    couleurSecondaire: '#42a5f5',
    cssPersonnalise: '',
    langueDefaut: 'fr',
    maxUtilisateurs: 50,
    fonctionnalitesActives: [] as string[],
    // Configuration avancée
    ssoActif: false,
    apiPubliqueActivee: false,
    webhooksActifs: false,
    // Pages personnalisées
    pageAccueilContenu: '',
    messageBienvenue: '',
    piedPagePersonnalise: '',
    // Notifications & Alertes
    canauxNotification: [] as string[],
    typesAlertes: [] as string[],
    // Gestion Utilisateurs
    rolesPersonnalises: [] as string[],
    approbationManuelle: false,
    sessionTimeout: 30,
    // Templates & Documents
    templatesActifs: [] as string[],
    signatureNumerique: false,
    // Sauvegardes & Sécurité
    sauvegardeAuto: true,
    retentionDonnees: 365,
    chiffrementAvance: false,
    // Intégrations tierces
    integrationsActives: [] as string[]
  });

  // États de chargement
  const [loadingStates, setLoadingStates] = useState<LoadingStates>({
    loading: true,
    refreshing: false,
    converting: null,
    updating: null,
    contactant: null
  });

  // Classifications officielles dynamiques basées sur les données réelles
  const classificationsOfficielles = useMemo(() => getClassificationsOfficielles(organismesGabon), [organismesGabon]);

  // Fonctions utilitaires pour la transformation des données
  const getGroupeFromType = (type: string): string => {
    const typeGroups: Record<string, string> = {
      'PRESIDENCE': 'A',
      'VICE_PRESIDENCE_GOUVERNEMENT': 'A',
      'SECRETARIAT_GENERAL': 'A',
      'SERVICE': 'A',
      'DIRECTION': 'A',
      'MINISTERE_ETAT': 'B',
      'MINISTERE': 'B',
      'DIRECTION_GENERALE': 'C',
      'INSTITUTION_JUDICIAIRE': 'D',
      'AGENCE_SPECIALISEE': 'E',
      'AGENCE_NATIONALE': 'E',
      'ORGANISME_SOCIAL': 'E',
      'GOUVERNORAT': 'F',
      'PREFECTURE': 'F',
      'MAIRIE': 'F',
      'POUVOIR_LEGISLATIF': 'L',
      'INSTITUTION_INDEPENDANTE': 'I'
    };
    return typeGroups[type] || 'AUTRE';
  };

  const getNiveauHierarchique = (type: string): number => {
    const niveaux: Record<string, number> = {
      'PRESIDENCE': 1,
      'VICE_PRESIDENCE_GOUVERNEMENT': 2,
      'MINISTERE_ETAT': 2,
      'SECRETARIAT_GENERAL': 2,
      'MINISTERE': 3,
      'DIRECTION_GENERALE': 3,
      'GOUVERNORAT': 3,
      'INSTITUTION_JUDICIAIRE': 3,
      'POUVOIR_LEGISLATIF': 3,
      'AGENCE_SPECIALISEE': 3,
      'AGENCE_NATIONALE': 3,
      'ORGANISME_SOCIAL': 3,
      'MAIRIE': 4,
      'PREFECTURE': 4,
      'SERVICE': 4,
      'DIRECTION': 4,
      'INSTITUTION_INDEPENDANTE': 4
    };
    return niveaux[type] || 5;
  };

  const isOrganismePrincipalFromType = (type: string): boolean => {
    const typesPrincipaux = [
      'PRESIDENCE', 'VICE_PRESIDENCE_GOUVERNEMENT', 'SECRETARIAT_GENERAL',
      'MINISTERE_ETAT', 'MINISTERE', 'DIRECTION_GENERALE', 'GOUVERNORAT',
      'INSTITUTION_JUDICIAIRE', 'POUVOIR_LEGISLATIF', 'AGENCE_SPECIALISEE',
      'AGENCE_NATIONALE', 'ORGANISME_SOCIAL', 'INSTITUTION_INDEPENDANTE'
    ];
    return typesPrincipaux.includes(type);
  };

  // Charger les données des organismes gabonais depuis la base de données
  const loadOrganismesGabon = useCallback(async () => {
    try {
      // Charger tous les organismes depuis la base de données
      const response = await fetch('/api/organizations/list?limit=500');
      const data = await response.json();

      if (data.success) {
        // Transformer les données de l'API vers le format OrganismeGabonais
        const organismesTransformes = data.data.organizations.map((org: any) => ({
          id: org.id,
          code: org.code,
          name: org.name,
          type: org.type,
          groupe: getGroupeFromType(org.type),
          description: org.description,
          city: org.city,
          address: org.address,
          phone: org.phone,
          email: org.email,
          website: org.website,
          niveau_hierarchique: getNiveauHierarchique(org.type),
          est_organisme_principal: isOrganismePrincipalFromType(org.type)
        }));

        setOrganismesGabon(organismesTransformes);

        // Mettre à jour la pagination
        setPagination(prev => ({
          ...prev,
          totalItems: organismesTransformes.length,
          totalPages: Math.ceil(organismesTransformes.length / prev.itemsPerPage)
        }));

        toast.success(`🎉 ${organismesTransformes.length} organismes autonomes gabonais chargés depuis la base de données`);
      } else {
        throw new Error(data.error || 'Erreur lors du chargement');
      }
    } catch (error) {
      console.error('❌ Erreur chargement organismes gabonais:', error);
      toast.error('❌ Erreur lors du chargement des organismes depuis la base');

      // Fallback vers les fichiers statiques en cas d'erreur
      console.log('📁 Fallback vers les fichiers statiques...');
      const organismesExistants = getOrganismesComplets();
      const organismesProspects = getAllOrganismesProspects();
      const tousOrganismes = [...organismesExistants, ...organismesProspects];
      setOrganismesGabon(tousOrganismes);
      setPagination(prev => ({
        ...prev,
        totalItems: tousOrganismes.length,
        totalPages: Math.ceil(tousOrganismes.length / prev.itemsPerPage)
      }));
    }
  }, []);

  // Charger les données
  useEffect(() => {
    loadData();
    loadOrganismesGabon();
  }, []);

  const loadData = useCallback(async () => {
    try {
      // Charger directement les 141 organismes gabonais comme prospects par défaut
      const organismesGabonais = getOrganismesComplets();
      console.log('🏛️ Organismes gabonais chargés comme prospects:', organismesGabonais.length);

      // Debug: Afficher la répartition par groupe
      const repartitionParGroupe = organismesGabonais.reduce((acc, org) => {
        acc[org.groupe] = (acc[org.groupe] || 0) + 1;
        return acc;
      }, {} as Record<string, number>);
      console.log('📊 Répartition par groupe:', repartitionParGroupe);

      // Debug: Afficher la répartition par type
      const repartitionParType = organismesGabonais.reduce((acc, org) => {
        acc[org.type] = (acc[org.type] || 0) + 1;
        return acc;
      }, {} as Record<string, number>);
      console.log('🏛️ Répartition par type:', repartitionParType);

      // Transformer les organismes gabonais en prospects avec des informations de prospection intelligentes
      const prospectsData: OrganismeCommercialGabon[] = organismesGabonais.map((org, index: number) => {
          const sources = ['REFERENCEMENT', 'DEMANDE_DIRECTE', 'RECOMMANDATION'];
          const priorites = ['HAUTE', 'MOYENNE', 'BASSE'];

          // Assigner les priorités selon le groupe et le niveau hiérarchique
          let priorite: 'HAUTE' | 'MOYENNE' | 'BASSE' = 'MOYENNE';
          if (['A', 'L'].includes(org.groupe) || org.niveau_hierarchique <= 2) {
            priorite = 'HAUTE';
          } else if (org.niveau_hierarchique >= 5 || ['E', 'F'].includes(org.groupe)) {
            priorite = 'BASSE';
          }

          // Définir la source selon le type d'organisme
          let source: 'REFERENCEMENT' | 'DEMANDE_DIRECTE' | 'RECOMMANDATION' = 'REFERENCEMENT';
          if (org.est_organisme_principal) source = 'REFERENCEMENT';
          else if (['E', 'F'].includes(org.groupe)) source = 'DEMANDE_DIRECTE';
          else source = 'RECOMMANDATION'; // Pour les autres groupes

          return {
            id: `GABON_${org.id}`,
            code: org.code,
            nom: org.name,
            type: org.type,
            localisation: org.city,
            status: 'PROSPECT',
            dateAjout: new Date().toISOString(),
            contact: {
              telephone: org.phone || `+241 0${1 + index % 9} ${Math.floor(Math.random() * 90 + 10)} ${Math.floor(Math.random() * 90 + 10)} ${Math.floor(Math.random() * 90 + 10)}`,
              email: org.email || `contact@${org.code.toLowerCase()}.gov.ga`,
              adresse: org.address || `${org.city}, ${org.province || 'Estuaire'}, Gabon`,
              responsable: `${org.type === 'MINISTERE' ? 'Ministre' : org.type === 'DIRECTION_GENERALE' ? 'Directeur Général' : 'Responsable'}`
            },
            prospectInfo: {
              source: source,
              priorite: priorite,
              notes: `Organisme public gabonais - Groupe ${org.groupe} - Niveau ${org.niveau_hierarchique}. ${org.description || 'Organisme gouvernemental nécessitant une digitalisation administrative.'} ${org.est_organisme_principal ? 'ORGANISME PRINCIPAL - Priorité élevée.' : ''}`,
              responsableProspection: index % 4 === 0 ? 'Marie OBIANG' : index % 4 === 1 ? 'Jean MESSI' : index % 4 === 2 ? 'Sarah MBEGA' : 'Paul EKOMI',
              dernierContact: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString(),
              prochainContact: new Date(Date.now() + Math.random() * 14 * 24 * 60 * 60 * 1000).toISOString()
            },
            stats: {
              totalUsers: Math.floor(Math.random() * 200) + 50, // 50-250 utilisateurs estimés
              totalServices: Math.floor(Math.random() * 15) + 5, // 5-20 services
              totalPostes: Math.floor(Math.random() * 50) + 10, // 10-60 postes
              activeUsers: Math.floor(Math.random() * 150) + 30 // 30-180 utilisateurs actifs
            },
            services: [
              'Gestion des Utilisateurs',
              'Documents Administratifs',
              org.type === 'MINISTERE' ? 'Processus Métiers Dématérialisés' : 'Archivage Numérique',
              'Support Technique',
              ...(org.secteurs || []).slice(0, 2)
            ],
            users: [],
            postes: [],

            // Informations spécifiques aux organismes gabonais
            secteur: org.secteurs?.[0] || 'ADMINISTRATION_PUBLIQUE',
            province: org.province,
            groupe: org.groupe,
            niveau_hierarchique: org.niveau_hierarchique,
            est_organisme_principal: org.est_organisme_principal,
            budget: {
              estimation: (['A', 'L'].includes(org.groupe)) ? 50000000 :
                         (org.groupe === 'B') ? 30000000 :
                         (org.groupe === 'C') ? 20000000 :
                         (org.groupe === 'D') ? 15000000 : 10000000,
              devise: 'XAF'
            },
            dateCreation: new Date(Date.now() - Math.random() * 60 * 24 * 60 * 60 * 1000).toISOString(),
            dateMiseAJour: new Date().toISOString()
          };
        });

      // Calcul des statistiques prospects basées sur les données réelles
      const prospectsStats: ProspectsStats = {
        totalProspects: prospectsData.length,
        prioriteHaute: prospectsData.filter(p => p.prospectInfo?.priorite === 'HAUTE').length,
        prioriteMoyenne: prospectsData.filter(p => p.prospectInfo?.priorite === 'MOYENNE').length,
        prioriteBasse: prospectsData.filter(p => p.prospectInfo?.priorite === 'BASSE').length,
        valeurPipeline: prospectsData.reduce((acc, p) => acc + (p.budget?.estimation || 15000000), 0),
        conversionsObjectif: Math.floor(prospectsData.length * 0.15), // 15% objectif conversion
        contactsRecents: Math.floor(prospectsData.length * 0.4),
        repartitionSources: prospectsData.reduce((acc, prospect) => {
          const source = prospect.prospectInfo?.source || 'AUTRE';
          acc[source] = (acc[source] || 0) + 1;
          return acc;
        }, {} as Record<string, number>)
      };

      setAllOrganismes(prospectsData); // Pour compatibilité
      setProspects(prospectsData);
      setStats(prospectsStats);

      toast.success(`🎉 ${prospectsData.length} organismes gabonais intégrés au pipeline commercial (${repartitionParGroupe.A || 0} institutions suprêmes, ${repartitionParGroupe.B || 0} ministères/directions, ${repartitionParGroupe.C || 0} directions générales, etc.)`);
    } catch (error) {
      console.error('❌ Erreur chargement des organismes gabonais:', error);

      // Fallback vers le service existant en cas d'erreur
      console.log('📁 Fallback vers le service organismes commerciaux...');

      const allOrganismesData = organismeCommercialService.getAllOrganismes();
      const prospectsData = allOrganismesData.filter(org => org.status === 'PROSPECT');

      setAllOrganismes(allOrganismesData);

      // Calcul des statistiques prospects
      const prospectsStats: ProspectsStats = {
        totalProspects: prospectsData.length,
        prioriteHaute: prospectsData.filter(p => p.prospectInfo?.priorite === 'HAUTE').length,
        prioriteMoyenne: prospectsData.filter(p => p.prospectInfo?.priorite === 'MOYENNE').length,
        prioriteBasse: prospectsData.filter(p => p.prospectInfo?.priorite === 'BASSE').length,
        valeurPipeline: prospectsData.length * 15000000,
        conversionsObjectif: 0,
        contactsRecents: Math.floor(prospectsData.length * 0.3),
        repartitionSources: prospectsData.reduce((acc, prospect) => {
          const source = prospect.prospectInfo?.source || 'AUTRE';
          acc[source] = (acc[source] || 0) + 1;
          return acc;
        }, {} as Record<string, number>)
      };

      setProspects(prospectsData);
      setStats(prospectsStats);
      toast.success('Données des prospects chargées (fallback)');
    } finally {
      setLoadingStates(prev => ({ ...prev, loading: false }));
    }
  }, []);

  // Filtrer les prospects
  const filteredProspects = useMemo(() => {
    return prospects.filter(prospect => {
      const matchSearch = prospect.nom.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         prospect.code.toLowerCase().includes(searchTerm.toLowerCase());
      const matchPriorite = selectedPriorite === 'all' || prospect.prospectInfo?.priorite === selectedPriorite;
      const matchSource = selectedSource === 'all' || prospect.prospectInfo?.source === selectedSource;
      const matchLocalisation = selectedLocalisation === 'all' || prospect.localisation === selectedLocalisation;
      const matchType = selectedType === 'all' || prospect.type === selectedType;

      return matchSearch && matchPriorite && matchSource && matchLocalisation && matchType;
    });
  }, [prospects, searchTerm, selectedPriorite, selectedSource, selectedLocalisation, selectedType]);

  // Pagination des prospects filtrés
  const prospectsPagines = useMemo(() => {
    const startIndex = (prospectsPagination.page - 1) * prospectsPagination.itemsPerPage;
    const endIndex = startIndex + prospectsPagination.itemsPerPage;
    return filteredProspects.slice(startIndex, endIndex);
  }, [filteredProspects, prospectsPagination.page, prospectsPagination.itemsPerPage]);

  // Mettre à jour la pagination des prospects quand les données changent
  useEffect(() => {
    const totalItems = filteredProspects.length;
    const totalPages = Math.ceil(totalItems / prospectsPagination.itemsPerPage);
    setProspectsPagination(prev => ({
      ...prev,
      totalItems,
      totalPages,
      page: prev.page > totalPages && totalPages > 0 ? totalPages : prev.page
    }));
  }, [filteredProspects.length, prospectsPagination.itemsPerPage]);

  // Reset pagination quand les filtres changent
  useEffect(() => {
    setProspectsPagination(prev => ({ ...prev, page: 1 }));
  }, [searchTerm, selectedPriorite, selectedSource, selectedLocalisation, selectedType]);

  // Fonctions de gestion de la pagination des prospects
  const handleProspectsPageChange = useCallback((newPage: number) => {
    setProspectsPagination(prev => ({ ...prev, page: newPage }));
  }, []);

  const handleProspectsItemsPerPageChange = useCallback((newItemsPerPage: number) => {
    setProspectsPagination(prev => ({
      ...prev,
      itemsPerPage: newItemsPerPage,
      page: 1 // Reset à la première page
    }));
  }, []);

  // Listes uniques pour les filtres
  const localisationsUniques = useMemo(() => [...new Set(prospects.map(p => p.localisation))], [prospects]);
  const typesUniques = useMemo(() => [...new Set(prospects.map(p => p.type))], [prospects]);

  // Filtrage des organismes gabonais
  const organismesGabonFiltres = useMemo(() => {
    return organismesGabon.filter(organisme => {
      const matchSearch = organisme.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         organisme.code.toLowerCase().includes(searchTerm.toLowerCase());

      const matchClassification = filtresGabon.classification === 'all' ||
        classificationsOfficielles.find(c => c.id === filtresGabon.classification)?.groupes.includes(organisme.groupe);

      const matchGroupe = filtresGabon.groupe === 'all' || organisme.groupe === filtresGabon.groupe;
      const matchProvince = filtresGabon.province === 'all' || organisme.province === filtresGabon.province;
      const matchNiveau = filtresGabon.niveauHierarchique === 'all' ||
        organisme.niveau_hierarchique.toString() === filtresGabon.niveauHierarchique;
      const matchPrincipal = filtresGabon.estPrincipal === null ||
        organisme.est_organisme_principal === filtresGabon.estPrincipal;

      return matchSearch && matchClassification && matchGroupe && matchProvince && matchNiveau && matchPrincipal;
    });
  }, [organismesGabon, searchTerm, filtresGabon, classificationsOfficielles]);

  // Pagination des organismes gabonais
  const organismesGabonPagines = useMemo(() => {
    const startIndex = (pagination.page - 1) * pagination.itemsPerPage;
    const endIndex = startIndex + pagination.itemsPerPage;
    return organismesGabonFiltres.slice(startIndex, endIndex);
  }, [organismesGabonFiltres, pagination.page, pagination.itemsPerPage]);

  // Mettre à jour la pagination quand les filtres changent
  useEffect(() => {
    setPagination(prev => ({
      ...prev,
      page: 1,
      totalItems: organismesGabonFiltres.length,
      totalPages: Math.ceil(organismesGabonFiltres.length / prev.itemsPerPage)
    }));
  }, [organismesGabonFiltres]);

  // Listes uniques pour les filtres gabonais
  const provincesUniques = useMemo(() =>
    [...new Set(organismesGabon.map(o => o.province).filter(Boolean))], [organismesGabon]);
  const niveauxUniques = useMemo(() =>
    [...new Set(organismesGabon.map(o => o.niveau_hierarchique))].sort((a, b) => a - b), [organismesGabon]);

  // Gestionnaires d'événements
  const handleRefreshData = useCallback(async () => {
    try {
      setLoadingStates(prev => ({ ...prev, refreshing: true }));
      await loadData();
    } finally {
      setLoadingStates(prev => ({ ...prev, refreshing: false }));
    }
  }, [loadData]);

  const handleConvertToClient = useCallback(async (prospect: OrganismeCommercialGabon) => {
    try {
      setLoadingStates(prev => ({ ...prev, converting: prospect.id }));

      // Simulation conversion
      await new Promise(resolve => setTimeout(resolve, 2000));

      const success = organismeCommercialService.convertirEnClient(prospect.id, conversionForm);

      if (success) {
        toast.success(`✅ ${prospect.nom} converti en client avec succès !`);
        setIsConvertModalOpen(false);
        await loadData(); // Recharger les données
      } else {
        toast.error('❌ Erreur lors de la conversion');
      }
    } catch (error) {
      console.error('❌ Erreur conversion:', error);
      toast.error('❌ Erreur lors de la conversion');
    } finally {
      setLoadingStates(prev => ({ ...prev, converting: null }));
    }
  }, [conversionForm, loadData]);

  const handleContactProspect = useCallback(async (prospect: OrganismeCommercialGabon) => {
    try {
      setLoadingStates(prev => ({ ...prev, contactant: prospect.id }));

      await new Promise(resolve => setTimeout(resolve, 1500));

      toast.success(`📞 Contact enregistré pour ${prospect.nom}`);
    } catch (error) {
      console.error('❌ Erreur contact:', error);
      toast.error('❌ Erreur lors de l\'enregistrement du contact');
    } finally {
      setLoadingStates(prev => ({ ...prev, contactant: null }));
    }
  }, []);

  // Gestionnaires pour gestion générale
  const handleToggleSelectOrganisme = useCallback((organismeId: string) => {
    setSelectedOrganismes(prev =>
      prev.includes(organismeId)
        ? prev.filter(id => id !== organismeId)
        : [...prev, organismeId]
    );
  }, []);

  const handleSelectAllOrganismes = useCallback(() => {
    setSelectedOrganismes(allOrganismes.map(org => org.id));
  }, [allOrganismes]);

  const handleDeselectAllOrganismes = useCallback(() => {
    setSelectedOrganismes([]);
  }, []);

  const handleExecuteGestionAction = useCallback(async (action: string) => {
    if (selectedOrganismes.length === 0) {
      toast.error('Aucun organisme sélectionné');
      return;
    }

    try {
      setLoadingStates(prev => ({ ...prev, updating: 'bulk' }));

      await new Promise(resolve => setTimeout(resolve, 1500));

      switch (action) {
        case 'archive':
          toast.success(`${selectedOrganismes.length} organisme(s) archivé(s)`);
          break;
        case 'activate':
          toast.success(`${selectedOrganismes.length} organisme(s) activé(s)`);
          break;
        case 'delete':
          toast.success(`${selectedOrganismes.length} organisme(s) supprimé(s)`);
          break;
        case 'export':
          toast.success(`Export de ${selectedOrganismes.length} organisme(s) généré`);
          break;
        default:
          toast.info(`Action "${action}" exécutée sur ${selectedOrganismes.length} organisme(s)`);
      }

      setSelectedOrganismes([]);
      setGestionAction('');
      await loadData();
    } catch (error) {
      console.error('❌ Erreur action gestion:', error);
      toast.error('❌ Erreur lors de l\'exécution de l\'action');
    } finally {
      setLoadingStates(prev => ({ ...prev, updating: null }));
    }
  }, [selectedOrganismes, loadData]);

  // Gestionnaire du modal de gestion
  const handleOpenManageModal = useCallback((organisme: OrganismeCommercialGabon) => {
    setSelectedProspect(organisme);
    setManageForm({
      // Configuration générale
      nom: organisme.nom,
      code: organisme.code,
      type: organisme.type,
      localisation: organisme.localisation,
      description: '',
      // Contact
      telephone: organisme.contact?.telephone || '',
      email: organisme.contact?.email || '',
      adresse: organisme.contact?.adresse || '',
      responsableContact: organisme.contact?.responsable || '',
      // Prospect info
      source: organisme.prospectInfo?.source || 'DEMANDE_DIRECTE',
      priorite: organisme.prospectInfo?.priorite || 'MOYENNE',
      notes: organisme.prospectInfo?.notes || '',
      responsableProspection: organisme.prospectInfo?.responsableProspection || '',
      // Services
      servicesSelectionnes: organisme.services || [],
      // Statut
      isActive: true,
      // Personnalisation & Multi-tenant
      slug: organisme.code.toLowerCase().replace(/[^a-z0-9]/g, '-'),
      domainePersonnalise: '',
      logoUrl: '',
      faviconUrl: '',
      couleurPrimaire: '#1976d2',
      couleurSecondaire: '#42a5f5',
      cssPersonnalise: '',
      langueDefaut: 'fr',
      maxUtilisateurs: 50,
      fonctionnalitesActives: ['Dashboard Avancé', 'Rapports Analytiques'],
      // Configuration avancée
      ssoActif: false,
      apiPubliqueActivee: false,
      webhooksActifs: false,
      // Pages personnalisées
      pageAccueilContenu: `# Bienvenue chez ${organisme.nom}\n\nAccédez à vos services administratifs en ligne de manière simple et sécurisée.`,
      messageBienvenue: `Bienvenue sur la plateforme numérique de ${organisme.nom}. Connectez-vous pour accéder à vos services.`,
      piedPagePersonnalise: `© ${new Date().getFullYear()} ${organisme.nom}. Tous droits réservés.`
    });
    setModalActiveTab('general');
    setIsManageModalOpen(true);
  }, []);

  const handleSaveOrganisme = useCallback(async () => {
    if (!selectedProspect) return;

    try {
      setLoadingStates(prev => ({ ...prev, updating: selectedProspect.id }));

      // Simulation de sauvegarde
      await new Promise(resolve => setTimeout(resolve, 2000));

      toast.success(`✅ ${manageForm.nom} mis à jour avec succès !`);
      setIsManageModalOpen(false);
      await loadData();
    } catch (error) {
      console.error('❌ Erreur mise à jour:', error);
      toast.error('❌ Erreur lors de la mise à jour');
    } finally {
      setLoadingStates(prev => ({ ...prev, updating: null }));
    }
  }, [selectedProspect, manageForm, loadData]);

  // Gestionnaires pour les filtres gabonais
  const handleFiltreGabonChange = useCallback((key: keyof FiltresGabon, value: any) => {
    setFiltresGabon(prev => ({ ...prev, [key]: value }));
  }, []);

  // Gestionnaires de pagination
  const handlePageChange = useCallback((newPage: number) => {
    setPagination(prev => ({ ...prev, page: newPage }));
  }, []);

  const handleItemsPerPageChange = useCallback((newItemsPerPage: number) => {
    setPagination(prev => ({
      ...prev,
      page: 1,
      itemsPerPage: newItemsPerPage,
      totalPages: Math.ceil(prev.totalItems / newItemsPerPage)
    }));
  }, []);

  // Reset des filtres gabonais
  const handleResetFiltresGabon = useCallback(() => {
    setFiltresGabon({
      classification: 'all',
      groupe: 'all',
      province: 'all',
      niveauHierarchique: 'all',
      estPrincipal: null
    });
    setSearchTerm('');
  }, []);

  // Fonctions utilitaires
  const formatPrix = (prix: number) => {
    return new Intl.NumberFormat('fr-FR', {
      style: 'currency',
      currency: 'XAF',
      minimumFractionDigits: 0
    }).format(prix);
  };

  const getPrioriteColor = (priorite?: string) => {
    switch (priorite) {
      case 'HAUTE': return 'bg-red-100 text-red-800 border-red-300';
      case 'MOYENNE': return 'bg-yellow-100 text-yellow-800 border-yellow-300';
      case 'BASSE': return 'bg-green-100 text-green-800 border-green-300';
      default: return 'bg-gray-100 text-gray-800 border-gray-300';
    }
  };

  const getSourceColor = (source?: string) => {
    switch (source) {
      case 'REFERENCEMENT': return 'bg-blue-100 text-blue-800';
      case 'DEMANDE_DIRECTE': return 'bg-green-100 text-green-800';
      case 'RECOMMANDATION': return 'bg-purple-100 text-purple-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'MINISTERE': return Building2;
      case 'MAIRIE': return MapPin;
      case 'DIRECTION_GENERALE': return Briefcase;
      case 'PREFECTURE': return MapPin;
      case 'PROVINCE': return Crown;
      default: return Building2;
    }
  };

  if (loadingStates.loading) {
    return (
      <AuthenticatedLayout>
        <div className="container mx-auto px-4 py-8">
          <div className="flex items-center justify-center min-h-[400px]">
            <div className="text-center">
              <Loader2 className="h-12 w-12 animate-spin text-blue-600 mx-auto mb-4" />
              <h3 className="text-lg font-semibold mb-2">Chargement des prospects...</h3>
              <p className="text-muted-foreground">Analyse du pipeline commercial en cours</p>
            </div>
          </div>
        </div>
      </AuthenticatedLayout>
    );
  }

  return (
    <AuthenticatedLayout>
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-gray-900 mb-2 flex items-center gap-2">
                <Building2 className="h-8 w-8 text-blue-600" />
                Administration des Organismes
              </h1>
              <p className="text-gray-600">
                Pipeline commercial, organismes officiels du Gabon et tableau de bord global
              </p>
            </div>
            <div className="flex gap-2">
              <Button
                variant="outline"
                onClick={handleRefreshData}
                disabled={loadingStates.refreshing}
              >
                {loadingStates.refreshing ? (
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                ) : (
                  <RefreshCw className="mr-2 h-4 w-4" />
                )}
                Actualiser
              </Button>
            </div>
          </div>
          </div>
        </div>

        {/* Tabs Navigation */}
        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
          <TabsList className="grid w-full grid-cols-4 mb-8">
            <TabsTrigger value="pipeline-commercial" className="flex items-center gap-2">
              <Target className="h-4 w-4" />
              Pipeline Commercial
            </TabsTrigger>
            <TabsTrigger value="organismes-officiels-gabon" className="flex items-center gap-2">
              <Crown className="h-4 w-4" />
              Organismes Officiels Gabon
            </TabsTrigger>
            <TabsTrigger value="tableau-bord-global" className="flex items-center gap-2">
              <BarChart2 className="h-4 w-4" />
              Tableau de Bord Global
            </TabsTrigger>
            <TabsTrigger value="dgbfip" className="flex items-center gap-2">
              <Database className="h-4 w-4" />
              DGBFIP
            </TabsTrigger>
          </TabsList>

          {/* Pipeline Commercial Tab */}
          <TabsContent value="pipeline-commercial" className="space-y-8">
            {/* Header du pipeline commercial */}
            <div className="bg-gradient-to-r from-orange-600 to-red-600 text-white rounded-lg p-6 mb-8">
              <div className="flex items-center justify-between">
                <div>
                  <h2 className="text-2xl font-bold mb-2 flex items-center gap-2">
                    <Target className="h-6 w-6" />
                    Pipeline Commercial
                  </h2>
                  <p className="text-orange-100">
                    Pipeline commercial - {stats?.totalProspects || 141} organismes gabonais intégrés comme prospects par défaut
                  </p>
                </div>
                <div className="text-right">
                  <div className="text-3xl font-bold">{stats?.totalProspects || 0}</div>
                  <div className="text-orange-100 text-sm">Prospects Actifs</div>
                </div>
              </div>
            </div>

        {/* Métriques prospects */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <Card className="bg-gradient-to-r from-blue-500 to-blue-600 text-white">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-blue-100 text-sm">Total Prospects</p>
                  <p className="text-2xl font-bold">{stats?.totalProspects || 0}</p>
                  <p className="text-blue-100 text-xs">En prospection</p>
                </div>
                <Target className="h-8 w-8 text-blue-200" />
              </div>
            </CardContent>
          </Card>

          <Card className="bg-gradient-to-r from-red-500 to-red-600 text-white">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-red-100 text-sm">Priorité Haute</p>
                  <p className="text-2xl font-bold">{stats?.prioriteHaute || 0}</p>
                  <p className="text-red-100 text-xs">Action immédiate</p>
                </div>
                <AlertCircle className="h-8 w-8 text-red-200" />
              </div>
            </CardContent>
          </Card>

          <Card className="bg-gradient-to-r from-green-500 to-green-600 text-white">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-green-100 text-sm">Valeur Pipeline</p>
                  <p className="text-2xl font-bold">{stats ? Math.floor(stats.valeurPipeline / 1000000000) : 0}Md</p>
                  <p className="text-green-100 text-xs">FCFA estimés</p>
                </div>
                <TrendingUp className="h-8 w-8 text-green-200" />
              </div>
            </CardContent>
          </Card>

          <Card className="bg-gradient-to-r from-purple-500 to-purple-600 text-white">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-purple-100 text-sm">Objectif Mois</p>
                  <p className="text-2xl font-bold">{stats?.conversionsObjectif || 0}</p>
                  <p className="text-purple-100 text-xs">Conversions</p>
                </div>
                <UserCheck className="h-8 w-8 text-purple-200" />
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Statistiques détaillées */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <BarChart3 className="h-5 w-5 text-blue-600" />
                Répartition par Priorité
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <div className="w-3 h-3 bg-red-500 rounded-full"></div>
                    <span className="text-sm">Haute</span>
                  </div>
                  <Badge className="bg-red-100 text-red-800">{stats?.prioriteHaute || 0}</Badge>
                </div>
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <div className="w-3 h-3 bg-yellow-500 rounded-full"></div>
                    <span className="text-sm">Moyenne</span>
                  </div>
                  <Badge className="bg-yellow-100 text-yellow-800">{stats?.prioriteMoyenne || 0}</Badge>
                </div>
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                    <span className="text-sm">Basse</span>
                  </div>
                  <Badge className="bg-green-100 text-green-800">{stats?.prioriteBasse || 0}</Badge>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Activity className="h-5 w-5 text-green-600" />
                Sources d'Acquisition
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {Object.entries(stats?.repartitionSources || {}).map(([source, count]) => (
                  <div key={source} className="flex items-center justify-between">
                    <span className="text-sm">{source.replace('_', ' ')}</span>
                    <Badge variant="outline">{count}</Badge>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Calendar className="h-5 w-5 text-purple-600" />
                Activité Récente
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <span className="text-sm">Contacts cette semaine</span>
                  <Badge className="bg-blue-100 text-blue-800">{stats?.contactsRecents || 0}</Badge>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm">Conversions en cours</span>
                  <Badge className="bg-green-100 text-green-800">3</Badge>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm">Propositions envoyées</span>
                  <Badge className="bg-yellow-100 text-yellow-800">8</Badge>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Filtres */}
        <Card className="mb-8">
          <CardContent className="p-6">
            <div className="flex flex-wrap gap-4 items-center">
              <div className="flex-1 min-w-64">
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                  <Input
                    placeholder="Rechercher un prospect..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="pl-10"
                  />
                </div>
              </div>

              <Select value={selectedPriorite} onValueChange={setSelectedPriorite}>
                <SelectTrigger className="w-40">
                  <SelectValue placeholder="Priorité" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">Toutes priorités</SelectItem>
                  <SelectItem value="HAUTE">Haute</SelectItem>
                  <SelectItem value="MOYENNE">Moyenne</SelectItem>
                  <SelectItem value="BASSE">Basse</SelectItem>
                </SelectContent>
              </Select>

              <Select value={selectedSource} onValueChange={setSelectedSource}>
                <SelectTrigger className="w-40">
                  <SelectValue placeholder="Source" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">Toutes sources</SelectItem>
                  <SelectItem value="REFERENCEMENT">Référencement</SelectItem>
                  <SelectItem value="DEMANDE_DIRECTE">Demande directe</SelectItem>
                  <SelectItem value="RECOMMANDATION">Recommandation</SelectItem>
                </SelectContent>
              </Select>

              <Select value={selectedLocalisation} onValueChange={setSelectedLocalisation}>
                <SelectTrigger className="w-40">
                  <SelectValue placeholder="Localisation" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">Toutes villes</SelectItem>
                  {localisationsUniques.map(ville => (
                    <SelectItem key={ville} value={ville}>{ville}</SelectItem>
                  ))}
                </SelectContent>
              </Select>

              <Button
                variant="outline"
                onClick={() => {
                  setSearchTerm('');
                  setSelectedPriorite('all');
                  setSelectedSource('all');
                  setSelectedLocalisation('all');
                  setSelectedType('all');
                }}
              >
                <Filter className="mr-2 h-4 w-4" />
                Réinitialiser
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* Informations de pagination */}
        <Card className="mb-6">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-4">
                <span className="text-sm text-gray-600">
                  Affichage de {((prospectsPagination.page - 1) * prospectsPagination.itemsPerPage) + 1} à {Math.min(prospectsPagination.page * prospectsPagination.itemsPerPage, filteredProspects.length)} sur {filteredProspects.length} prospect(s)
                </span>
                <div className="flex items-center gap-2">
                  <span className="text-sm text-gray-600">Par page:</span>
                  <Select
                    value={prospectsPagination.itemsPerPage.toString()}
                    onValueChange={(value) => handleProspectsItemsPerPageChange(parseInt(value))}
                  >
                    <SelectTrigger className="w-20">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="6">6</SelectItem>
                      <SelectItem value="12">12</SelectItem>
                      <SelectItem value="24">24</SelectItem>
                      <SelectItem value="48">48</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div className="text-sm text-gray-500">
                Page {prospectsPagination.page} sur {prospectsPagination.totalPages}
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Liste des prospects paginés */}
        <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
          {prospectsPagines.map((prospect) => {
            const TypeIcon = getTypeIcon(prospect.type);

            return (
              <Card
                key={prospect.code}
                className="border-l-4 border-l-blue-500 hover:shadow-lg transition-all duration-300"
              >
                <CardContent className="p-6">
                  <div className="flex items-start gap-4 mb-4">
                    <div className="w-12 h-12 rounded-lg bg-blue-600 flex items-center justify-center text-white flex-shrink-0">
                      <TypeIcon className="h-6 w-6" />
                    </div>
                    <div className="flex-1 min-w-0">
                      <h3 className="font-bold text-lg leading-tight truncate" title={prospect.nom}>
                        {prospect.nom}
                      </h3>
                      <p className="text-gray-600 text-sm truncate">{prospect.type}</p>
                      <p className="text-xs text-gray-500 mt-1">
                        Code: <span className="font-mono">{prospect.code}</span>
                      </p>
                    </div>
                  </div>

                  {/* Badges de statut */}
                  <div className="flex flex-wrap gap-2 mb-4">
                    <Badge className={getPrioriteColor(prospect.prospectInfo?.priorite)}>
                      {prospect.prospectInfo?.priorite || 'NON_DEFINIE'}
                    </Badge>

                    <Badge className={getSourceColor(prospect.prospectInfo?.source)}>
                      {prospect.prospectInfo?.source?.replace('_', ' ') || 'AUTRE'}
                    </Badge>
                  </div>

                  {/* Informations clés */}
                  <div className="space-y-2 mb-4">
                    <div className="flex items-center text-sm text-gray-600">
                      <MapPin className="h-4 w-4 mr-2 flex-shrink-0" />
                      <span className="truncate">{prospect.localisation}</span>
                    </div>
                    <div className="flex items-center text-sm text-gray-600">
                      <Users className="h-4 w-4 mr-2 flex-shrink-0" />
                      <span>{prospect.stats.totalUsers} utilisateurs</span>
                    </div>
                    <div className="flex items-center text-sm text-blue-600">
                      <Euro className="h-4 w-4 mr-2 flex-shrink-0" />
                      <span>Valeur estimée: {formatPrix(15000000)}</span>
                    </div>
                    {prospect.prospectInfo?.dernierContact && (
                      <div className="flex items-center text-sm text-gray-500">
                        <Calendar className="h-4 w-4 mr-2 flex-shrink-0" />
                        <span>
                          Dernier contact: {new Date(prospect.prospectInfo.dernierContact).toLocaleDateString()}
                        </span>
                      </div>
                    )}
                  </div>

                  {/* Notes */}
                  {prospect.prospectInfo?.notes && (
                    <div className="mb-4 p-3 bg-gray-50 rounded-lg">
                      <p className="text-sm text-gray-700 line-clamp-2">
                        {prospect.prospectInfo.notes}
                      </p>
                    </div>
                  )}

                  {/* Actions */}
                  <div className="space-y-2 pt-4 border-t">
                    <Button
                      variant="default"
                      size="sm"
                      className="w-full"
                      onClick={() => {
                        setSelectedProspect(prospect);
                        setConversionForm(prev => ({ ...prev, organismeId: prospect.id }));
                        setIsConvertModalOpen(true);
                      }}
                      disabled={loadingStates.converting === prospect.id}
                    >
                      {loadingStates.converting === prospect.id ? (
                        <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                      ) : (
                        <UserCheck className="h-4 w-4 mr-2" />
                      )}
                      Convertir en Client
                    </Button>

                    <div className="grid grid-cols-2 gap-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleContactProspect(prospect)}
                        disabled={loadingStates.contactant === prospect.id}
                      >
                        {loadingStates.contactant === prospect.id ? (
                          <Loader2 className="h-4 w-4 animate-spin" />
                        ) : (
                          <Phone className="h-4 w-4" />
                        )}
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleOpenManageModal(prospect)}
                      >
                        <Edit className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            );
          })}

          {filteredProspects.length === 0 && (
            <div className="col-span-full text-center py-12">
              <Target className="h-12 w-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">Aucun prospect trouvé</h3>
              <p className="text-gray-600 mb-4">
                Aucun prospect ne correspond aux critères de recherche actuels.
              </p>
              <Button
                variant="outline"
                onClick={() => {
                  setSearchTerm('');
                  setSelectedPriorite('all');
                  setSelectedSource('all');
                  setSelectedLocalisation('all');
                  setSelectedType('all');
                }}
              >
                Réinitialiser les filtres
              </Button>
            </div>
          )}
        </div>

        {/* Contrôles de pagination */}
        {prospectsPagination.totalPages > 1 && (
          <Card className="mt-6">
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div className="text-sm text-gray-600">
                  Page {prospectsPagination.page} sur {prospectsPagination.totalPages}
                  ({filteredProspects.length} prospects au total)
                </div>

                <div className="flex items-center space-x-2">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handleProspectsPageChange(1)}
                    disabled={prospectsPagination.page === 1}
                  >
                    <ChevronsLeft className="h-4 w-4" />
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handleProspectsPageChange(prospectsPagination.page - 1)}
                    disabled={prospectsPagination.page === 1}
                  >
                    <ChevronLeft className="h-4 w-4" />
                  </Button>

                  {/* Pages visibles */}
                  {Array.from({ length: Math.min(5, prospectsPagination.totalPages) }, (_, i) => {
                    const startPage = Math.max(1, prospectsPagination.page - 2);
                    const pageNumber = startPage + i;

                    if (pageNumber > prospectsPagination.totalPages) return null;

                    return (
                      <Button
                        key={pageNumber}
                        variant={prospectsPagination.page === pageNumber ? "default" : "outline"}
                        size="sm"
                        onClick={() => handleProspectsPageChange(pageNumber)}
                      >
                        {pageNumber}
                      </Button>
                    );
                  })}

                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handleProspectsPageChange(prospectsPagination.page + 1)}
                    disabled={prospectsPagination.page === prospectsPagination.totalPages}
                  >
                    <ChevronRight className="h-4 w-4" />
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handleProspectsPageChange(prospectsPagination.totalPages)}
                    disabled={prospectsPagination.page === prospectsPagination.totalPages}
                  >
                    <ChevronsRight className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Footer avec résumé */}
        {filteredProspects.length > 0 && (
          <Card className="mt-8">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div className="text-sm text-gray-600">
                  Affichage de {filteredProspects.length} prospect(s) sur {prospects.length} total
                </div>
                <div className="flex gap-4 text-sm">
                  <span className="text-red-600">
                    {filteredProspects.filter(p => p.prospectInfo?.priorite === 'HAUTE').length} Haute priorité
                  </span>
                  <span className="text-blue-600">
                    Valeur: {formatPrix(filteredProspects.length * 15000000)}
                  </span>
                </div>
              </div>
            </CardContent>
          </Card>
        )}

          </TabsContent>

          {/* Organismes Officiels Gabon Tab */}
          <TabsContent value="organismes-officiels-gabon" className="space-y-8">

            {/* Header avec statistiques officielles */}
            <div className="bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg p-6 mb-8">
              <div className="flex items-center justify-between">
                <div>
                  <h2 className="text-2xl font-bold mb-2 flex items-center gap-2">
                    <Crown className="h-6 w-6" />
                    Structure Administrative - 5e République du Gabon
                  </h2>
                  <p className="text-blue-100">
                    {organismesGabon.length} organismes autonomes gabonais • Base de données complète • Interface unifiée
                  </p>
                </div>
                <div className="text-right">
                  <div className="text-3xl font-bold">{organismesGabon.length}</div>
                  <div className="text-blue-100 text-sm">Organismes Chargés</div>
                </div>
              </div>
            </div>

            {/* Classification officielle par catégories */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Layers className="h-5 w-5 text-blue-600" />
                  Classification Officielle de la République
                </CardTitle>
                <CardDescription>
                  Structure hiérarchique selon la nomenclature constitutionnelle gabonaise
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {classificationsOfficielles.map((classification) => {
                    const IconComponent = classification.icon;
                    const organismesDeLaCategorie = organismesGabon.filter(org =>
                      classification.groupes.includes(org.groupe)
                    );

                    return (
                      <Card
                        key={classification.id}
                        className={`cursor-pointer transition-all duration-200 hover:shadow-lg border-l-4 ${
                          filtresGabon.classification === classification.id
                            ? `border-${classification.color}-500 bg-${classification.color}-50`
                            : 'border-gray-200 hover:border-gray-300'
                        }`}
                        onClick={() => handleFiltreGabonChange('classification',
                          filtresGabon.classification === classification.id ? 'all' : classification.id
                        )}
                      >
                        <CardContent className="p-4">
                          <div className="flex items-center justify-between mb-3">
                            <IconComponent className={`h-8 w-8 text-${classification.color}-600`} />
                            <div className="text-right">
                              <div className="text-2xl font-bold text-gray-900">
                                {organismesDeLaCategorie.length}
                              </div>
                              <div className="text-xs text-gray-500">organismes</div>
                            </div>
                          </div>
                          <h3 className="font-semibold text-gray-900 mb-1">{classification.nom}</h3>
                          <p className="text-sm text-gray-600 leading-tight">{classification.description}</p>
                          {filtresGabon.classification === classification.id && (
                            <div className="mt-3">
                              <Badge className={`bg-${classification.color}-500 text-white`}>
                                Filtré
                              </Badge>
                            </div>
                          )}
                        </CardContent>
                      </Card>
                    );
                  })}
                </div>
              </CardContent>
            </Card>

            {/* Filtres avancés */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Filter className="h-5 w-5 text-green-600" />
                  Filtres Avancés
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4">
                  {/* Recherche */}
                  <div>
                    <Label>Recherche</Label>
                    <div className="relative">
                      <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                      <Input
                        placeholder="Nom ou code organisme..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className="pl-10"
                      />
                    </div>
                  </div>

                  {/* Groupe constitutionnel */}
                  <div>
                    <Label>Groupe Constitutionnel</Label>
                    <Select
                      value={filtresGabon.groupe}
                      onValueChange={(value) => handleFiltreGabonChange('groupe', value)}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Sélectionner un groupe" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">Tous les groupes</SelectItem>
                        <SelectItem value="A">Groupe A - Institutions Suprêmes</SelectItem>
                        <SelectItem value="B">Groupe B - Ministères</SelectItem>
                        <SelectItem value="C">Groupe C - Directions Générales</SelectItem>
                        <SelectItem value="D">Groupe D - Institutions Judiciaires</SelectItem>
                        <SelectItem value="E">Groupe E - Agences Spécialisées</SelectItem>
                        <SelectItem value="F">Groupe F - Administrations Territoriales</SelectItem>
                        <SelectItem value="L">Groupe L - Pouvoir Législatif</SelectItem>
                        <SelectItem value="I">Groupe I - Institutions Indépendantes</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  {/* Province */}
                  <div>
                    <Label>Province</Label>
                    <Select
                      value={filtresGabon.province}
                      onValueChange={(value) => handleFiltreGabonChange('province', value)}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Sélectionner une province" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">Toutes les provinces</SelectItem>
                        {provincesUniques.map(province => (
                          <SelectItem key={province} value={province}>
                            {province}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  {/* Niveau hiérarchique */}
                  <div>
                    <Label>Niveau Hiérarchique</Label>
                    <Select
                      value={filtresGabon.niveauHierarchique}
                      onValueChange={(value) => handleFiltreGabonChange('niveauHierarchique', value)}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Sélectionner un niveau" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">Tous les niveaux</SelectItem>
                        {niveauxUniques.map(niveau => (
                          <SelectItem key={niveau} value={niveau.toString()}>
                            Niveau {niveau}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                {/* Options supplémentaires */}
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-6">
                    <div className="flex items-center space-x-2">
                      <Checkbox
                        id="principaux-seulement"
                        checked={filtresGabon.estPrincipal === true}
                        onCheckedChange={(checked) =>
                          handleFiltreGabonChange('estPrincipal', checked ? true : null)
                        }
                      />
                      <Label htmlFor="principaux-seulement" className="text-sm">
                        Organismes principaux uniquement
                      </Label>
                    </div>
                  </div>

                  <Button variant="outline" onClick={handleResetFiltresGabon}>
                    <X className="h-4 w-4 mr-2" />
                    Reset Filtres
                  </Button>
                </div>

                {/* Indicateurs de filtrage */}
                <div className="mt-4 flex flex-wrap gap-2">
                  {filtresGabon.classification !== 'all' && (
                    <Badge variant="secondary">
                      Classification: {classificationsOfficielles.find(c => c.id === filtresGabon.classification)?.nom}
                    </Badge>
                  )}
                  {filtresGabon.groupe !== 'all' && (
                    <Badge variant="secondary">Groupe: {filtresGabon.groupe}</Badge>
                  )}
                  {filtresGabon.province !== 'all' && (
                    <Badge variant="secondary">Province: {filtresGabon.province}</Badge>
                  )}
                  {filtresGabon.niveauHierarchique !== 'all' && (
                    <Badge variant="secondary">Niveau: {filtresGabon.niveauHierarchique}</Badge>
                  )}
                  {filtresGabon.estPrincipal === true && (
                    <Badge variant="secondary">Organismes principaux</Badge>
                  )}
                </div>
              </CardContent>
            </Card>

            {/* Résultats avec pagination */}
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div>
                    <CardTitle className="flex items-center gap-2">
                      <Building2 className="h-5 w-5 text-purple-600" />
                      Organismes Publics Gabonais
                    </CardTitle>
                    <CardDescription>
                      {organismesGabonFiltres.length} organisme(s) trouvé(s) sur {organismesGabon.length} total
                    </CardDescription>
                  </div>

                  {/* Controls de pagination */}
                  <div className="flex items-center space-x-2">
                    <Label className="text-sm">Éléments par page:</Label>
                    <Select
                      value={pagination.itemsPerPage.toString()}
                      onValueChange={(value) => handleItemsPerPageChange(parseInt(value))}
                    >
                      <SelectTrigger className="w-20">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="10">10</SelectItem>
                        <SelectItem value="20">20</SelectItem>
                        <SelectItem value="50">50</SelectItem>
                        <SelectItem value="100">100</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                {/* Liste des organismes */}
                <div className="space-y-4 mb-6">
                  {organismesGabonPagines.map((organisme) => {
                    const classification = classificationsOfficielles.find(c =>
                      c.groupes.includes(organisme.groupe)
                    );

                    return (
                      <Card key={organisme.id} className="hover:shadow-md transition-shadow">
                        <CardContent className="p-4">
                          <div className="flex items-center justify-between">
                            <div className="flex-1">
                              <div className="flex items-center space-x-3 mb-2">
                                {classification && (
                                  <classification.icon className={`h-5 w-5 text-${classification.color}-600`} />
                                )}
                                <h3 className="font-semibold text-lg text-gray-900">{organisme.name}</h3>
                                <Badge className={`bg-${classification?.color || 'gray'}-100 text-${classification?.color || 'gray'}-800`}>
                                  {organisme.code}
                                </Badge>
                                {organisme.est_organisme_principal && (
                                  <Badge className="bg-yellow-100 text-yellow-800">
                                    <Crown className="h-3 w-3 mr-1" />
                                    Principal
                                  </Badge>
                                )}
                              </div>

                              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-gray-600">
                                <div className="flex items-center gap-1">
                                  <MapPin className="h-4 w-4" />
                                  {organisme.city}
                                  {organisme.province && ` (${organisme.province})`}
                                </div>
                                <div className="flex items-center gap-1">
                                  <Layers className="h-4 w-4" />
                                  Niveau {organisme.niveau_hierarchique}
                                </div>
                                <div className="flex items-center gap-1">
                                  <Tag className="h-4 w-4" />
                                  {classification?.nom || 'Non classifié'}
                                </div>
                              </div>

                              {organisme.description && (
                                <p className="text-sm text-gray-500 mt-2">{organisme.description}</p>
                              )}

                              {/* Informations de contact */}
                              <div className="flex items-center space-x-4 mt-3">
                                {organisme.phone && (
                                  <a href={`tel:${organisme.phone}`} className="flex items-center gap-1 text-blue-600 hover:text-blue-800">
                                    <Phone className="h-4 w-4" />
                                    {organisme.phone}
                                  </a>
                                )}
                                {organisme.email && (
                                  <a href={`mailto:${organisme.email}`} className="flex items-center gap-1 text-blue-600 hover:text-blue-800">
                                    <Mail className="h-4 w-4" />
                                    {organisme.email}
                                  </a>
                                )}
                                {organisme.website && (
                                  <a href={organisme.website} target="_blank" rel="noopener noreferrer" className="flex items-center gap-1 text-blue-600 hover:text-blue-800">
                                    <Globe className="h-4 w-4" />
                                    Site Web
                                  </a>
                                )}
                              </div>
                            </div>

                            <div className="flex items-center space-x-2">
                              <Button variant="outline" size="sm">
                                <Eye className="h-4 w-4 mr-1" />
                                Détails
                              </Button>
                              <Button variant="outline" size="sm">
                                <Edit className="h-4 w-4 mr-1" />
                                Éditer
                              </Button>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    );
                  })}
                </div>

                {/* Pagination */}
                {pagination.totalPages > 1 && (
                  <div className="flex items-center justify-between">
                    <div className="text-sm text-gray-600">
                      Page {pagination.page} sur {pagination.totalPages}
                      ({organismesGabonFiltres.length} organismes au total)
                    </div>

                    <div className="flex items-center space-x-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handlePageChange(1)}
                        disabled={pagination.page === 1}
                      >
                        <ChevronsLeft className="h-4 w-4" />
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handlePageChange(pagination.page - 1)}
                        disabled={pagination.page === 1}
                      >
                        <ChevronLeft className="h-4 w-4" />
                      </Button>

                      {/* Pages visibles */}
                      {Array.from({ length: Math.min(5, pagination.totalPages) }, (_, i) => {
                        const startPage = Math.max(1, pagination.page - 2);
                        const pageNumber = startPage + i;

                        if (pageNumber > pagination.totalPages) return null;

                        return (
                          <Button
                            key={pageNumber}
                            variant={pagination.page === pageNumber ? "default" : "outline"}
                            size="sm"
                            onClick={() => handlePageChange(pageNumber)}
                          >
                            {pageNumber}
                          </Button>
                        );
                      })}

                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handlePageChange(pagination.page + 1)}
                        disabled={pagination.page === pagination.totalPages}
                      >
                        <ChevronRight className="h-4 w-4" />
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handlePageChange(pagination.totalPages)}
                        disabled={pagination.page === pagination.totalPages}
                      >
                        <ChevronsRight className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                )}

                {/* Message si aucun résultat */}
                {organismesGabonFiltres.length === 0 && (
                  <div className="text-center py-12">
                    <HelpCircle className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                    <h3 className="text-lg font-medium text-gray-900 mb-2">Aucun organisme trouvé</h3>
                    <p className="text-gray-600 mb-4">
                      Aucun organisme ne correspond aux critères de filtrage sélectionnés.
                    </p>
                    <Button variant="outline" onClick={handleResetFiltresGabon}>
                      <X className="h-4 w-4 mr-2" />
                      Réinitialiser les filtres
                    </Button>
                  </div>
                )}
              </CardContent>
            </Card>

          </TabsContent>

          {/* Tableau de Bord Global Tab */}
          <TabsContent value="tableau-bord-global" className="space-y-8">
            {/* Header du tableau de bord */}
            <div className="bg-gradient-to-r from-slate-600 to-slate-700 text-white rounded-lg p-6 mb-8">
              <div className="flex items-center justify-between">
                <div>
                  <h2 className="text-2xl font-bold mb-2 flex items-center gap-2">
                    <BarChart2 className="h-6 w-6" />
                    Tableau de Bord Global
                  </h2>
                  <p className="text-slate-100">
                    Vue d'ensemble et métriques générales de tous les organismes
                  </p>
                </div>
                <div className="text-right">
                  <div className="text-3xl font-bold">{allOrganismes.length}</div>
                  <div className="text-slate-100 text-sm">Organismes Total</div>
                </div>
              </div>
            </div>

            {/* Métriques générales */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <Card className="bg-gradient-to-r from-emerald-500 to-emerald-600 text-white">
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-emerald-100 text-sm">Total Organismes</p>
                      <p className="text-2xl font-bold">{allOrganismes.length}</p>
                      <p className="text-emerald-100 text-xs">Tous statuts</p>
                    </div>
                    <Database className="h-8 w-8 text-emerald-200" />
                  </div>
                </CardContent>
              </Card>

              <Card className="bg-gradient-to-r from-blue-500 to-blue-600 text-white">
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-blue-100 text-sm">Clients Actifs</p>
                      <p className="text-2xl font-bold">
                        {allOrganismes.filter(org => org.status === 'CLIENT').length}
                      </p>
                      <p className="text-blue-100 text-xs">En service</p>
                    </div>
                    <CheckCircle className="h-8 w-8 text-blue-200" />
                  </div>
                </CardContent>
              </Card>

              <Card className="bg-gradient-to-r from-orange-500 to-orange-600 text-white">
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-orange-100 text-sm">Prospects</p>
                      <p className="text-2xl font-bold">
                        {allOrganismes.filter(org => org.status === 'PROSPECT').length}
                      </p>
                      <p className="text-orange-100 text-xs">En prospection</p>
                    </div>
                    <Target className="h-8 w-8 text-orange-200" />
                  </div>
                </CardContent>
              </Card>

              <Card className="bg-gradient-to-r from-purple-500 to-purple-600 text-white">
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-purple-100 text-sm">Sélectionnés</p>
                      <p className="text-2xl font-bold">{selectedOrganismes.length}</p>
                      <p className="text-purple-100 text-xs">Pour action</p>
                    </div>
                    <Shield className="h-8 w-8 text-purple-200" />
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Actions de gestion en masse */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Settings2 className="h-5 w-5 text-blue-600" />
                Actions de Gestion en Masse (Prospects)
                </CardTitle>
                <CardDescription>
                Sélectionnez des organismes prospects et appliquez des actions en masse
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {/* Barre d'actions */}
                  <div className="flex flex-wrap gap-4 items-center">
                    <div className="flex gap-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={handleSelectAllOrganismes}
                      >
                        Tout sélectionner
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={handleDeselectAllOrganismes}
                      >
                        Tout désélectionner
                      </Button>
                    </div>

                    <div className="flex gap-2 items-center">
                      <Select value={gestionAction} onValueChange={setGestionAction}>
                        <SelectTrigger className="w-48">
                          <SelectValue placeholder="Choisir une action" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="activate">
                            <div className="flex items-center gap-2">
                              <CheckCircle className="h-4 w-4 text-green-600" />
                              Activer
                            </div>
                          </SelectItem>
                          <SelectItem value="archive">
                            <div className="flex items-center gap-2">
                              <Archive className="h-4 w-4 text-orange-600" />
                              Archiver
                            </div>
                          </SelectItem>
                          <SelectItem value="export">
                            <div className="flex items-center gap-2">
                              <FileText className="h-4 w-4 text-blue-600" />
                              Exporter
                            </div>
                          </SelectItem>
                          <SelectItem value="delete">
                            <div className="flex items-center gap-2">
                              <Trash2 className="h-4 w-4 text-red-600" />
                              Supprimer
                            </div>
                          </SelectItem>
                        </SelectContent>
                      </Select>

                      <Button
                        onClick={() => handleExecuteGestionAction(gestionAction)}
                        disabled={!gestionAction || selectedOrganismes.length === 0 || loadingStates.updating === 'bulk'}
                        variant={gestionAction === 'delete' ? 'destructive' : 'default'}
                      >
                        {loadingStates.updating === 'bulk' ? (
                          <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                        ) : gestionAction === 'delete' ? (
                          <AlertTriangle className="h-4 w-4 mr-2" />
                        ) : (
                          <Settings2 className="h-4 w-4 mr-2" />
                        )}
                        Exécuter ({selectedOrganismes.length})
                      </Button>
                    </div>
                  </div>

                  {/* Messages informatifs */}
                  {selectedOrganismes.length > 0 && (
                    <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                      <div className="flex items-center gap-2 text-blue-800">
                        <Shield className="h-4 w-4" />
                        <span className="font-medium">
                          {selectedOrganismes.length} organisme(s) sélectionné(s)
                        </span>
                      </div>
                      <p className="text-sm text-blue-600 mt-1">
                        Choisissez une action à appliquer aux organismes sélectionnés
                      </p>
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>

            {/* Liste de tous les organismes avec sélection */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Database className="h-5 w-5 text-purple-600" />
                  Tous les Organismes
                </CardTitle>
                <CardDescription>
                  Vue d'ensemble de tous les organismes avec possibilité de sélection multiple
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {/* Filtres pour gestion générale */}
                  <div className="flex flex-wrap gap-4">
                    <div className="flex-1 min-w-64">
                      <div className="relative">
                        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                        <Input
                          placeholder="Rechercher un organisme..."
                          value={searchTerm}
                          onChange={(e) => setSearchTerm(e.target.value)}
                          className="pl-10"
                        />
                      </div>
                    </div>

                    <Select value={selectedType} onValueChange={setSelectedType}>
                      <SelectTrigger className="w-48">
                        <SelectValue placeholder="Type d'organisme" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">Tous les types</SelectItem>
                        <SelectItem value="MINISTERE">Ministère</SelectItem>
                        <SelectItem value="DIRECTION_GENERALE">Direction Générale</SelectItem>
                        <SelectItem value="MAIRIE">Mairie</SelectItem>
                        <SelectItem value="PREFECTURE">Préfecture</SelectItem>
                        <SelectItem value="PROVINCE">Province</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  {/* Liste des organismes */}
                  <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4">
                    {allOrganismes
                      .filter(org => {
                        const matchSearch = org.nom.toLowerCase().includes(searchTerm.toLowerCase()) ||
                                          org.code.toLowerCase().includes(searchTerm.toLowerCase());
                        const matchType = selectedType === 'all' || org.type === selectedType;
                        return matchSearch && matchType;
                      })
                      .map((organisme) => {
                        const isSelected = selectedOrganismes.includes(organisme.id);
                        const TypeIcon = getTypeIcon(organisme.type);

                        return (
                          <Card
                            key={organisme.id}
                            className={`cursor-pointer transition-all duration-200 ${
                              isSelected
                                ? 'border-blue-500 bg-blue-50 shadow-md'
                                : 'hover:shadow-md border-gray-200'
                            }`}
                            onClick={() => handleToggleSelectOrganisme(organisme.id)}
                          >
                            <CardContent className="p-4">
                              <div className="flex items-start gap-3">
                                <div className="flex-shrink-0">
                                  <input
                                    type="checkbox"
                                    checked={isSelected}
                                    onChange={() => handleToggleSelectOrganisme(organisme.id)}
                                    className="mt-1 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                                    onClick={(e) => e.stopPropagation()}
                                  />
                                </div>
                                <div className="w-10 h-10 rounded-lg bg-blue-600 flex items-center justify-center text-white flex-shrink-0">
                                  <TypeIcon className="h-5 w-5" />
                                </div>
                                <div className="flex-1 min-w-0">
                                  <h4 className="font-semibold text-sm leading-tight truncate">
                                    {organisme.nom}
                                  </h4>
                                  <p className="text-xs text-gray-600 truncate">{organisme.type}</p>
                                  <div className="flex items-center gap-2 mt-2">
                                    <Badge
                                      variant={organisme.status === 'CLIENT' ? 'default' : 'secondary'}
                                      className="text-xs"
                                    >
                                      {organisme.status}
                                    </Badge>
                                    <div className="flex items-center text-xs text-gray-500">
                                      <MapPin className="h-3 w-3 mr-1" />
                                      {organisme.localisation}
                                    </div>
                                  </div>
                                </div>
                                <div className="flex-shrink-0">
                                  <Button
                                    variant="ghost"
                                    size="sm"
                                    onClick={(e) => {
                                      e.stopPropagation();
                                      handleOpenManageModal(organisme);
                                    }}
                                    className="h-8 w-8 p-0"
                                  >
                                    <Settings className="h-4 w-4" />
                                  </Button>
                                </div>
                              </div>
                            </CardContent>
                          </Card>
                        );
                      })}
                  </div>

                  {/* Message si aucun organisme */}
                  {allOrganismes.filter(org => {
                    const matchSearch = org.nom.toLowerCase().includes(searchTerm.toLowerCase()) ||
                                      org.code.toLowerCase().includes(searchTerm.toLowerCase());
                    const matchType = selectedType === 'all' || org.type === selectedType;
                    return matchSearch && matchType;
                  }).length === 0 && (
                    <div className="text-center py-12">
                      <Database className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                      <h3 className="text-lg font-medium text-gray-900 mb-2">Aucun organisme trouvé</h3>
                      <p className="text-gray-600">
                        Aucun organisme ne correspond aux critères de recherche.
                      </p>
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* DGBFIP Tab */}
          <TabsContent value="dgbfip" className="space-y-8">
            <DGBFIPUsersManagement
              onCreateUser={() => toast.info('Fonctionnalité de création en développement')}
              onImportUsers={() => toast.info('Fonctionnalité d\'import en développement')}
            />
          </TabsContent>

        </Tabs>

        {/* Modal de gestion complète - Nouveau Modal Enrichi */}
        <OrganismeModalComplete
          isOpen={isManageModalOpen}
          onClose={() => setIsManageModalOpen(false)}
          organisme={selectedProspect ? {
            id: selectedProspect.id,
            nom: selectedProspect.nom,
            code: selectedProspect.code,
            type: 'DIRECTION_GENERALE' as any,
            groupe: selectedProspect.groupe as any,
            contact: selectedProspect.contact,
            prospectInfo: selectedProspect.prospectInfo,
            services: selectedProspect.services,
            stats: selectedProspect.stats
          } : null}
          mode="edit"
          onSave={async (organisme) => {
            // Logique de sauvegarde existante
            await handleSaveManageForm();
          }}
          onConvert={(organisme) => {
            setIsManageModalOpen(false);
            setIsConvertModalOpen(true);
          }}
        />



        {/* Modal de conversion */}
        <Dialog open={isConvertModalOpen} onOpenChange={setIsConvertModalOpen}>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="nom">Nom de l'Organisme *</Label>
                        <Input
                          id="nom"
                          value={manageForm.nom}
                          onChange={(e) => setManageForm(prev => ({ ...prev, nom: e.target.value }))}
                          placeholder="Nom officiel de l'organisme"
                        />
                      </div>
                      <div>
                        <Label htmlFor="code">Code Organisme *</Label>
                        <Input
                          id="code"
                          value={manageForm.code}
                          onChange={(e) => setManageForm(prev => ({ ...prev, code: e.target.value }))}
                          placeholder="CODE_ORG"
                        />
                      </div>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="type">Type d'Organisme</Label>
                        <Select value={manageForm.type} onValueChange={(value) => setManageForm(prev => ({ ...prev, type: value }))}>
                          <SelectTrigger>
                            <SelectValue placeholder="Sélectionner le type" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="MINISTERE">Ministère</SelectItem>
                            <SelectItem value="DIRECTION_GENERALE">Direction Générale</SelectItem>
                            <SelectItem value="MAIRIE">Mairie</SelectItem>
                            <SelectItem value="PREFECTURE">Préfecture</SelectItem>
                            <SelectItem value="PROVINCE">Province</SelectItem>
                            <SelectItem value="AUTRE">Autre</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div>
                        <Label htmlFor="localisation">Localisation</Label>
                        <Input
                          id="localisation"
                          value={manageForm.localisation}
                          onChange={(e) => setManageForm(prev => ({ ...prev, localisation: e.target.value }))}
                          placeholder="Ville, Région"
                        />
                      </div>
                    </div>

                    <div>
                      <Label htmlFor="description">Description</Label>
                      <Textarea
                        id="description"
                        value={manageForm.description}
                        onChange={(e) => setManageForm(prev => ({ ...prev, description: e.target.value }))}
                        placeholder="Description des missions et activités de l'organisme"
                        rows={3}
                      />
                    </div>

                    <div className="flex items-center space-x-2">
                      <Switch
                        id="isActive"
                        checked={manageForm.isActive}
                        onCheckedChange={(checked) => setManageForm(prev => ({ ...prev, isActive: checked }))}
                      />
                      <Label htmlFor="isActive" className="flex items-center gap-2">
                        <Shield className="h-4 w-4" />
                        Organisme actif
                      </Label>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              {/* Onglet Contact */}
              <TabsContent value="contact" className="space-y-6 mt-6">
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Phone className="h-5 w-5 text-green-600" />
                      Informations de Contact
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="telephone" className="flex items-center gap-2">
                          <Phone className="h-4 w-4" />
                          Téléphone
                        </Label>
                        <Input
                          id="telephone"
                          value={manageForm.telephone}
                          onChange={(e) => setManageForm(prev => ({ ...prev, telephone: e.target.value }))}
                          placeholder="+241 XX XX XX XX"
                        />
                      </div>
                      <div>
                        <Label htmlFor="email" className="flex items-center gap-2">
                          <Mail className="h-4 w-4" />
                          Email
                        </Label>
                        <Input
                          id="email"
                          type="email"
                          value={manageForm.email}
                          onChange={(e) => setManageForm(prev => ({ ...prev, email: e.target.value }))}
                          placeholder="contact@organisme.ga"
                        />
                      </div>
                    </div>

                    <div>
                      <Label htmlFor="adresse" className="flex items-center gap-2">
                        <MapPin className="h-4 w-4" />
                        Adresse Complète
                      </Label>
                      <Textarea
                        id="adresse"
                        value={manageForm.adresse}
                        onChange={(e) => setManageForm(prev => ({ ...prev, adresse: e.target.value }))}
                        placeholder="Adresse physique de l'organisme"
                        rows={2}
                      />
                    </div>

                    <div>
                      <Label htmlFor="responsableContact" className="flex items-center gap-2">
                        <Users className="h-4 w-4" />
                        Responsable Contact
                      </Label>
                      <Input
                        id="responsableContact"
                        value={manageForm.responsableContact}
                        onChange={(e) => setManageForm(prev => ({ ...prev, responsableContact: e.target.value }))}
                        placeholder="Nom du responsable principal"
                      />
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              {/* Onglet Prospect */}
              <TabsContent value="prospect" className="space-y-6 mt-6">
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Target className="h-5 w-5 text-orange-600" />
                      Gestion Prospect
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="source">Source d'Acquisition</Label>
                        <Select value={manageForm.source} onValueChange={(value) => setManageForm(prev => ({ ...prev, source: value }))}>
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="REFERENCEMENT">Référencement Web</SelectItem>
                            <SelectItem value="DEMANDE_DIRECTE">Demande Directe</SelectItem>
                            <SelectItem value="RECOMMANDATION">Recommandation</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div>
                        <Label htmlFor="priorite">Priorité</Label>
                        <Select value={manageForm.priorite} onValueChange={(value) => setManageForm(prev => ({ ...prev, priorite: value }))}>
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="HAUTE">
                              <div className="flex items-center gap-2">
                                <div className="w-3 h-3 bg-red-500 rounded-full"></div>
                                Haute Priorité
                              </div>
                            </SelectItem>
                            <SelectItem value="MOYENNE">
                              <div className="flex items-center gap-2">
                                <div className="w-3 h-3 bg-yellow-500 rounded-full"></div>
                                Moyenne Priorité
                              </div>
                            </SelectItem>
                            <SelectItem value="BASSE">
                              <div className="flex items-center gap-2">
                                <div className="w-3 h-3 bg-green-500 rounded-full"></div>
                                Basse Priorité
                              </div>
                            </SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </div>

                    <div>
                      <Label htmlFor="responsableProspection" className="flex items-center gap-2">
                        <UserCheck className="h-4 w-4" />
                        Responsable Prospection
                      </Label>
                      <Input
                        id="responsableProspection"
                        value={manageForm.responsableProspection}
                        onChange={(e) => setManageForm(prev => ({ ...prev, responsableProspection: e.target.value }))}
                        placeholder="Nom du commercial assigné"
                      />
                    </div>

                    <div>
                      <Label htmlFor="notes" className="flex items-center gap-2">
                        <MessageSquare className="h-4 w-4" />
                        Notes & Observations
                      </Label>
                      <Textarea
                        id="notes"
                        value={manageForm.notes}
                        onChange={(e) => setManageForm(prev => ({ ...prev, notes: e.target.value }))}
                        placeholder="Notes sur les échanges, besoins identifiés, objections..."
                        rows={4}
                      />
                    </div>

                    <Card className="bg-blue-50 border-blue-200">
                      <CardContent className="p-4">
                        <h4 className="font-medium text-blue-900 mb-2 flex items-center gap-2">
                          <History className="h-4 w-4" />
                          Historique des Contacts
                        </h4>
                        <div className="space-y-2 text-sm text-blue-800">
                          <div className="flex justify-between">
                            <span>Dernier contact:</span>
                            <span>{selectedProspect?.prospectInfo?.dernierContact ? new Date(selectedProspect.prospectInfo.dernierContact).toLocaleDateString() : 'Aucun'}</span>
                          </div>
                          <div className="flex justify-between">
                            <span>Statut actuel:</span>
                            <Badge className="bg-orange-100 text-orange-800">Prospect Actif</Badge>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </CardContent>
                </Card>
              </TabsContent>

              {/* Onglet Services */}
              <TabsContent value="services" className="space-y-6 mt-6">
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <FileText className="h-5 w-5 text-purple-600" />
                      Services & Besoins
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div>
                      <Label className="text-base font-medium mb-3 block">Services d'Intérêt</Label>
                      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                        {[
                          'Gestion des Utilisateurs',
                          'Documents Administratifs',
                          'Processus Dématérialisés',
                          'Signatures Électroniques',
                          'Archivage Numérique',
                          'Reporting & Analytics',
                          'Support Technique',
                          'Formation Personnel',
                          'Maintenance Système',
                          'Sécurité Avancée'
                        ].map((service) => (
                          <div key={service} className="flex items-center space-x-2">
                            <Checkbox
                              id={service}
                              checked={manageForm.servicesSelectionnes.includes(service)}
                              onCheckedChange={(checked) => {
                                if (checked) {
                                  setManageForm(prev => ({
                                    ...prev,
                                    servicesSelectionnes: [...prev.servicesSelectionnes, service]
                                  }));
                                } else {
                                  setManageForm(prev => ({
                                    ...prev,
                                    servicesSelectionnes: prev.servicesSelectionnes.filter(s => s !== service)
                                  }));
                                }
                              }}
                            />
                            <Label htmlFor={service} className="text-sm">
                              {service}
                            </Label>
                          </div>
                        ))}
                      </div>
                    </div>

                    <Card className="bg-purple-50 border-purple-200">
                      <CardContent className="p-4">
                        <h4 className="font-medium text-purple-900 mb-2">Estimation Budgétaire</h4>
                        <div className="text-sm text-purple-800">
                          <p>Basé sur {manageForm.servicesSelectionnes.length} service(s) sélectionné(s)</p>
                          <p className="font-medium mt-1">
                            Estimation: {(manageForm.servicesSelectionnes.length * 2500000).toLocaleString()} FCFA/an
                          </p>
                        </div>
                      </CardContent>
                    </Card>
                  </CardContent>
                </Card>
              </TabsContent>

              {/* Onglet Branding & Personnalisation */}
              <TabsContent value="branding" className="space-y-6 mt-6">
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  {/* Identité visuelle */}
                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <Palette className="h-5 w-5 text-pink-600" />
                        Identité Visuelle
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div>
                        <Label htmlFor="logoUrl" className="flex items-center gap-2">
                          <Image className="h-4 w-4" />
                          Logo de l'Organisme
                        </Label>
                        <div className="flex gap-2">
                          <Input
                            id="logoUrl"
                            value={manageForm.logoUrl}
                            onChange={(e) => setManageForm(prev => ({ ...prev, logoUrl: e.target.value }))}
                            placeholder="https://exemple.com/logo.png"
                          />
                          <Button variant="outline" size="sm">
                            <Upload className="h-4 w-4" />
                          </Button>
                        </div>
                        {manageForm.logoUrl && (
                          <div className="mt-2 p-2 border rounded-lg bg-gray-50">
                            <img src={manageForm.logoUrl} alt="Aperçu logo" className="h-12 object-contain" />
                          </div>
                        )}
                      </div>

                      <div>
                        <Label htmlFor="faviconUrl" className="flex items-center gap-2">
                          <Globe className="h-4 w-4" />
                          Favicon
                        </Label>
                        <div className="flex gap-2">
                          <Input
                            id="faviconUrl"
                            value={manageForm.faviconUrl}
                            onChange={(e) => setManageForm(prev => ({ ...prev, faviconUrl: e.target.value }))}
                            placeholder="https://exemple.com/favicon.ico"
                          />
                          <Button variant="outline" size="sm">
                            <Upload className="h-4 w-4" />
                          </Button>
                        </div>
                      </div>

                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <Label htmlFor="couleurPrimaire">Couleur Primaire</Label>
                          <div className="flex gap-2">
                            <Input
                              id="couleurPrimaire"
                              type="color"
                              value={manageForm.couleurPrimaire}
                              onChange={(e) => setManageForm(prev => ({ ...prev, couleurPrimaire: e.target.value }))}
                              className="w-16 h-10 p-1"
                            />
                            <Input
                              value={manageForm.couleurPrimaire}
                              onChange={(e) => setManageForm(prev => ({ ...prev, couleurPrimaire: e.target.value }))}
                              placeholder="#1976d2"
                            />
                          </div>
                        </div>
                        <div>
                          <Label htmlFor="couleurSecondaire">Couleur Secondaire</Label>
                          <div className="flex gap-2">
                            <Input
                              id="couleurSecondaire"
                              type="color"
                              value={manageForm.couleurSecondaire}
                              onChange={(e) => setManageForm(prev => ({ ...prev, couleurSecondaire: e.target.value }))}
                              className="w-16 h-10 p-1"
                            />
                            <Input
                              value={manageForm.couleurSecondaire}
                              onChange={(e) => setManageForm(prev => ({ ...prev, couleurSecondaire: e.target.value }))}
                              placeholder="#42a5f5"
                            />
                          </div>
                        </div>
                      </div>

                      <div>
                        <Label htmlFor="cssPersonnalise" className="flex items-center gap-2">
                          <Code className="h-4 w-4" />
                          CSS Personnalisé (Avancé)
                        </Label>
                        <Textarea
                          id="cssPersonnalise"
                          value={manageForm.cssPersonnalise}
                          onChange={(e) => setManageForm(prev => ({ ...prev, cssPersonnalise: e.target.value }))}
                          placeholder=".custom-header { background: linear-gradient(...); }"
                          rows={3}
                          className="font-mono text-sm"
                        />
                      </div>
                    </CardContent>
                  </Card>

                  {/* Configuration Multi-tenant */}
                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <Globe className="h-5 w-5 text-blue-600" />
                        Configuration Multi-Tenant
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div>
                        <Label htmlFor="slug" className="flex items-center gap-2">
                          <Link className="h-4 w-4" />
                          Slug URL (Unique)
                        </Label>
                        <Input
                          id="slug"
                          value={manageForm.slug}
                          onChange={(e) => setManageForm(prev => ({ ...prev, slug: e.target.value.toLowerCase().replace(/[^a-z0-9-]/g, '-') }))}
                          placeholder="mon-organisme"
                        />
                        <p className="text-xs text-gray-500 mt-1">
                          URL: admin.ga/org/{manageForm.slug || 'slug'}
                        </p>
                      </div>

                      <div>
                        <Label htmlFor="domainePersonnalise" className="flex items-center gap-2">
                          <Globe className="h-4 w-4" />
                          Domaine Personnalisé (Optionnel)
                        </Label>
                        <Input
                          id="domainePersonnalise"
                          value={manageForm.domainePersonnalise}
                          onChange={(e) => setManageForm(prev => ({ ...prev, domainePersonnalise: e.target.value }))}
                          placeholder="monorganisme.com"
                        />
                        <p className="text-xs text-gray-500 mt-1">
                          Nécessite configuration DNS
                        </p>
                      </div>

                      <div>
                        <Label htmlFor="langueDefaut">Langue par Défaut</Label>
                        <Select value={manageForm.langueDefaut} onValueChange={(value) => setManageForm(prev => ({ ...prev, langueDefaut: value }))}>
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="fr">Français</SelectItem>
                            <SelectItem value="en">English</SelectItem>
                            <SelectItem value="es">Español</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>

                      <Card className="bg-blue-50 border-blue-200">
                        <CardContent className="p-4">
                          <h4 className="font-medium text-blue-900 mb-2 flex items-center gap-2">
                            <Monitor className="h-4 w-4" />
                            Aperçu Multi-Device
                          </h4>
                          <div className="flex gap-2">
                            <Button variant="outline" size="sm" className="text-xs">
                              <Monitor className="h-3 w-3 mr-1" />
                              Desktop
                            </Button>
                            <Button variant="outline" size="sm" className="text-xs">
                              <Tablet className="h-3 w-3 mr-1" />
                              Tablet
                            </Button>
                            <Button variant="outline" size="sm" className="text-xs">
                              <Smartphone className="h-3 w-3 mr-1" />
                              Mobile
                            </Button>
                          </div>
                        </CardContent>
                      </Card>
                    </CardContent>
                  </Card>
                </div>

                {/* Pages personnalisées */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <FileText className="h-5 w-5 text-purple-600" />
                      Pages Personnalisées
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div>
                      <Label htmlFor="messageBienvenue">Message de Bienvenue</Label>
                      <Textarea
                        id="messageBienvenue"
                        value={manageForm.messageBienvenue}
                        onChange={(e) => setManageForm(prev => ({ ...prev, messageBienvenue: e.target.value }))}
                        placeholder="Bienvenue sur la plateforme de [Nom Organisme]..."
                        rows={2}
                      />
                    </div>

                    <div>
                      <Label htmlFor="pageAccueilContenu">Contenu Page d'Accueil</Label>
                      <Textarea
                        id="pageAccueilContenu"
                        value={manageForm.pageAccueilContenu}
                        onChange={(e) => setManageForm(prev => ({ ...prev, pageAccueilContenu: e.target.value }))}
                        placeholder="Contenu HTML/Markdown pour la page d'accueil publique..."
                        rows={4}
                      />
                    </div>

                    <div>
                      <Label htmlFor="piedPagePersonnalise">Pied de Page</Label>
                      <Textarea
                        id="piedPagePersonnalise"
                        value={manageForm.piedPagePersonnalise}
                        onChange={(e) => setManageForm(prev => ({ ...prev, piedPagePersonnalise: e.target.value }))}
                        placeholder="Copyright, liens utiles..."
                        rows={2}
                      />
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              {/* Onglet Configuration Avancée */}
              <TabsContent value="config" className="space-y-6 mt-6">
                {/* Section Notifications & Alertes */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Bell className="h-5 w-5 text-orange-600" />
                      Notifications & Alertes
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="space-y-3">
                        <h4 className="font-medium">Canaux de Notification</h4>
                        {[
                          { id: 'email', label: 'Email', icon: 'Mail' },
                          { id: 'sms', label: 'SMS', icon: 'MessageSquare' },
                          { id: 'push', label: 'Push Web', icon: 'Bell' },
                          { id: 'webhook', label: 'Webhook', icon: 'Zap' }
                        ].map((canal) => (
                          <div key={canal.id} className="flex items-center space-x-2">
                            <Checkbox
                              id={canal.id}
                              checked={manageForm.canauxNotification?.includes(canal.id) || false}
                              onCheckedChange={(checked) => {
                                const current = manageForm.canauxNotification || [];
                                const updated = checked
                                  ? [...current, canal.id]
                                  : current.filter(c => c !== canal.id);
                                setManageForm(prev => ({ ...prev, canauxNotification: updated }));
                              }}
                            />
                            <Label htmlFor={canal.id} className="text-sm flex items-center gap-2">
                              {canal.label}
                            </Label>
                          </div>
                        ))}
                      </div>

                      <div className="space-y-3">
                        <h4 className="font-medium">Types d'Alertes</h4>
                        {[
                          'Nouvelles Demandes',
                          'Documents Expirés',
                          'Maintenances Système',
                          'Violations Sécurité',
                          'Rapports Quotidiens'
                        ].map((type) => (
                          <div key={type} className="flex items-center space-x-2">
                            <Checkbox
                              id={type}
                              checked={manageForm.typesAlertes?.includes(type) || false}
                              onCheckedChange={(checked) => {
                                const current = manageForm.typesAlertes || [];
                                const updated = checked
                                  ? [...current, type]
                                  : current.filter(t => t !== type);
                                setManageForm(prev => ({ ...prev, typesAlertes: updated }));
                              }}
                            />
                            <Label htmlFor={type} className="text-sm">{type}</Label>
                          </div>
                        ))}
                      </div>
                    </div>
                  </CardContent>
                </Card>

                {/* Section Gestion Utilisateurs Avancée */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Users2 className="h-5 w-5 text-blue-600" />
                      Gestion Utilisateurs Avancée
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="space-y-3">
                        <h4 className="font-medium">Rôles Personnalisés</h4>
                        {[
                          'Gestionnaire de Documents',
                          'Validateur Principal',
                          'Superviseur Régional',
                          'Auditeur Interne',
                          'Support Technique'
                        ].map((role) => (
                          <div key={role} className="flex items-center space-x-2">
                            <Checkbox
                              id={role}
                              checked={manageForm.rolesPersonnalises?.includes(role) || false}
                              onCheckedChange={(checked) => {
                                const current = manageForm.rolesPersonnalises || [];
                                const updated = checked
                                  ? [...current, role]
                                  : current.filter(r => r !== role);
                                setManageForm(prev => ({ ...prev, rolesPersonnalises: updated }));
                              }}
                            />
                            <Label htmlFor={role} className="text-sm">{role}</Label>
                          </div>
                        ))}
                      </div>

                      <div className="space-y-4">
                        <div className="flex items-center justify-between">
                          <div>
                            <Label className="font-medium">Approbation Manuelle</Label>
                            <p className="text-sm text-gray-600">Valider chaque nouveau compte</p>
                          </div>
                          <Switch
                            checked={manageForm.approbationManuelle}
                            onCheckedChange={(checked) => setManageForm(prev => ({ ...prev, approbationManuelle: checked }))}
                          />
                        </div>

                        <div>
                          <Label htmlFor="sessionTimeout">Timeout Session (minutes)</Label>
                          <Input
                            id="sessionTimeout"
                            type="number"
                            value={manageForm.sessionTimeout}
                            onChange={(e) => setManageForm(prev => ({ ...prev, sessionTimeout: parseInt(e.target.value) }))}
                            min="5"
                            max="480"
                          />
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                {/* Section Templates & Documents */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <FileCheck className="h-5 w-5 text-purple-600" />
                      Templates & Gestion Documentaire
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="space-y-3">
                        <h4 className="font-medium">Templates Disponibles</h4>
                        {[
                          'Demande de Congé',
                          'Rapport Mensuel',
                          'Demande Budget',
                          'Autorisation Sortie',
                          'Attestation de Service',
                          'Bon de Commande'
                        ].map((template) => (
                          <div key={template} className="flex items-center space-x-2">
                            <Checkbox
                              id={template}
                              checked={manageForm.templatesActifs?.includes(template) || false}
                              onCheckedChange={(checked) => {
                                const current = manageForm.templatesActifs || [];
                                const updated = checked
                                  ? [...current, template]
                                  : current.filter(t => t !== template);
                                setManageForm(prev => ({ ...prev, templatesActifs: updated }));
                              }}
                            />
                            <Label htmlFor={template} className="text-sm">{template}</Label>
                          </div>
                        ))}
                      </div>

                      <div className="space-y-4">
                        <div className="flex items-center justify-between">
                          <div>
                            <Label className="font-medium">Signature Numérique</Label>
                            <p className="text-sm text-gray-600">Certificats électroniques</p>
                          </div>
                          <Switch
                            checked={manageForm.signatureNumerique}
                            onCheckedChange={(checked) => setManageForm(prev => ({ ...prev, signatureNumerique: checked }))}
                          />
                        </div>

                        <Card className="bg-purple-50 border-purple-200">
                          <CardContent className="p-4">
                            <h4 className="font-medium text-purple-900 mb-2">Templates Personnalisés</h4>
                            <Button variant="outline" size="sm" className="w-full">
                              <Upload className="h-4 w-4 mr-2" />
                              Importer Template
                            </Button>
                          </CardContent>
                        </Card>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                {/* Section Sauvegardes & Sécurité */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Lock className="h-5 w-5 text-red-600" />
                      Sauvegardes & Sécurité Avancée
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="space-y-4">
                        <div className="flex items-center justify-between">
                          <div>
                            <Label className="font-medium">Sauvegarde Automatique</Label>
                            <p className="text-sm text-gray-600">Backup quotidien des données</p>
                          </div>
                          <Switch
                            checked={manageForm.sauvegardeAuto}
                            onCheckedChange={(checked) => setManageForm(prev => ({ ...prev, sauvegardeAuto: checked }))}
                          />
                        </div>

                        <div className="flex items-center justify-between">
                          <div>
                            <Label className="font-medium">Chiffrement Avancé</Label>
                            <p className="text-sm text-gray-600">AES-256 + clés rotatives</p>
                          </div>
                          <Switch
                            checked={manageForm.chiffrementAvance}
                            onCheckedChange={(checked) => setManageForm(prev => ({ ...prev, chiffrementAvance: checked }))}
                          />
                        </div>
                      </div>

                      <div className="space-y-4">
                        <div>
                          <Label htmlFor="retentionDonnees">Rétention Données (jours)</Label>
                          <Input
                            id="retentionDonnees"
                            type="number"
                            value={manageForm.retentionDonnees}
                            onChange={(e) => setManageForm(prev => ({ ...prev, retentionDonnees: parseInt(e.target.value) }))}
                            min="30"
                            max="3650"
                          />
                          <p className="text-xs text-gray-500 mt-1">
                            Conformité RGPD & lois locales
                          </p>
                        </div>

                        <Card className="bg-red-50 border-red-200">
                          <CardContent className="p-4">
                            <h4 className="font-medium text-red-900 mb-2">Actions Critiques</h4>
                            <div className="space-y-2">
                              <Button variant="outline" size="sm" className="w-full text-red-700">
                                <Download className="h-4 w-4 mr-2" />
                                Export Complet
                              </Button>
                              <Button variant="outline" size="sm" className="w-full text-red-700">
                                <Trash2 className="h-4 w-4 mr-2" />
                                Purge Données Anciennes
                              </Button>
                            </div>
                          </CardContent>
                        </Card>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  {/* Limites & Quotas */}
                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <Shield className="h-5 w-5 text-green-600" />
                        Limites & Quotas
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div>
                        <Label htmlFor="maxUtilisateurs">Nombre Max d'Utilisateurs</Label>
                        <Input
                          id="maxUtilisateurs"
                          type="number"
                          value={manageForm.maxUtilisateurs}
                          onChange={(e) => setManageForm(prev => ({ ...prev, maxUtilisateurs: parseInt(e.target.value) }))}
                          min="1"
                          max="10000"
                        />
                      </div>

                      <div>
                        <Label className="text-base font-medium mb-3 block">Fonctionnalités Activées</Label>
                        <div className="grid grid-cols-1 gap-3">
                          {[
                            'Dashboard Avancé',
                            'Rapports Analytiques',
                            'Export de Données',
                            'API Publique',
                            'Webhooks',
                            'Intégrations Tiers',
                            'Support Prioritaire',
                            'Sauvegarde Automatique'
                          ].map((feature) => (
                            <div key={feature} className="flex items-center space-x-2">
                              <Checkbox
                                id={feature}
                                checked={manageForm.fonctionnalitesActives.includes(feature)}
                                onCheckedChange={(checked) => {
                                  if (checked) {
                                    setManageForm(prev => ({
                                      ...prev,
                                      fonctionnalitesActives: [...prev.fonctionnalitesActives, feature]
                                    }));
                                  } else {
                                    setManageForm(prev => ({
                                      ...prev,
                                      fonctionnalitesActives: prev.fonctionnalitesActives.filter(f => f !== feature)
                                    }));
                                  }
                                }}
                              />
                              <Label htmlFor={feature} className="text-sm">
                                {feature}
                              </Label>
                            </div>
                          ))}
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  {/* Intégrations */}
                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <Zap className="h-5 w-5 text-yellow-600" />
                        Intégrations & API
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="flex items-center justify-between">
                        <div>
                          <Label className="font-medium">SSO / Single Sign-On</Label>
                          <p className="text-sm text-gray-600">Connexion unique SAML/OAuth</p>
                        </div>
                        <Switch
                          checked={manageForm.ssoActif}
                          onCheckedChange={(checked) => setManageForm(prev => ({ ...prev, ssoActif: checked }))}
                        />
                      </div>

                      <div className="flex items-center justify-between">
                        <div>
                          <Label className="font-medium">API Publique</Label>
                          <p className="text-sm text-gray-600">Accès API REST pour intégrations</p>
                        </div>
                        <Switch
                          checked={manageForm.apiPubliqueActivee}
                          onCheckedChange={(checked) => setManageForm(prev => ({ ...prev, apiPubliqueActivee: checked }))}
                        />
                      </div>

                      <div className="flex items-center justify-between">
                        <div>
                          <Label className="font-medium">Webhooks</Label>
                          <p className="text-sm text-gray-600">Notifications temps réel</p>
                        </div>
                        <Switch
                          checked={manageForm.webhooksActifs}
                          onCheckedChange={(checked) => setManageForm(prev => ({ ...prev, webhooksActifs: checked }))}
                        />
                      </div>

                      {manageForm.apiPubliqueActivee && (
                        <Card className="bg-green-50 border-green-200">
                          <CardContent className="p-4">
                            <h4 className="font-medium text-green-900 mb-2">Clés API</h4>
                            <div className="space-y-2">
                              <div className="flex items-center gap-2">
                                <Input
                                  value="pk_live_**********************"
                                  readOnly
                                  className="font-mono text-xs"
                                />
                                <Button variant="outline" size="sm">
                                  <Copy className="h-4 w-4" />
                                </Button>
                              </div>
                              <Button variant="outline" size="sm" className="w-full">
                                Régénérer les Clés
                              </Button>
                            </div>
                          </CardContent>
                        </Card>
                      )}
                    </CardContent>
                  </Card>
                </div>

                {/* Sécurité & Domaines */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Shield className="h-5 w-5 text-red-600" />
                      Sécurité & Gestion des Domaines
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <Label>Domaines Autorisés</Label>
                        <div className="space-y-2 mt-2">
                          <div className="flex items-center gap-2 p-2 bg-green-50 border border-green-200 rounded">
                            <Check className="h-4 w-4 text-green-600" />
                            <span className="text-sm">admin.ga/org/{manageForm.slug || 'slug'}</span>
                            <Badge className="bg-green-100 text-green-800 text-xs">Actif</Badge>
                          </div>
                          {manageForm.domainePersonnalise && (
                            <div className="flex items-center gap-2 p-2 bg-yellow-50 border border-yellow-200 rounded">
                              <Info className="h-4 w-4 text-yellow-600" />
                              <span className="text-sm">{manageForm.domainePersonnalise}</span>
                              <Badge className="bg-yellow-100 text-yellow-800 text-xs">En attente</Badge>
                            </div>
                          )}
                        </div>
                      </div>

                      <div>
                        <Label>Actions de Sécurité</Label>
                        <div className="space-y-2 mt-2">
                          <Button variant="outline" size="sm" className="w-full justify-start">
                            <Shield className="h-4 w-4 mr-2" />
                            Activer 2FA Obligatoire
                          </Button>
                          <Button variant="outline" size="sm" className="w-full justify-start">
                            <AlertTriangle className="h-4 w-4 mr-2" />
                            Audit des Accès
                          </Button>
                          <Button variant="outline" size="sm" className="w-full justify-start">
                            <Download className="h-4 w-4 mr-2" />
                            Export Données (RGPD)
                          </Button>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              {/* Onglet Statistiques */}
              <TabsContent value="stats" className="space-y-6 mt-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <BarChart2 className="h-5 w-5 text-blue-600" />
                        Métriques Actuelles
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-3">
                      <div className="flex justify-between">
                        <span className="text-sm text-gray-600">Utilisateurs:</span>
                        <span className="font-medium">{selectedProspect?.stats.totalUsers || 0}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-sm text-gray-600">Services:</span>
                        <span className="font-medium">{selectedProspect?.stats.totalServices || 0}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-sm text-gray-600">Postes:</span>
                        <span className="font-medium">{selectedProspect?.stats.totalPostes || 0}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-sm text-gray-600">Date d'ajout:</span>
                        <span className="font-medium">
                          {selectedProspect ? new Date(selectedProspect.dateAjout).toLocaleDateString() : '-'}
                        </span>
                      </div>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <TrendingUp className="h-5 w-5 text-green-600" />
                        Potentiel Commercial
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-3">
                      <div className="flex justify-between">
                        <span className="text-sm text-gray-600">Valeur estimée:</span>
                        <span className="font-medium text-green-600">15,000,000 FCFA</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-sm text-gray-600">Probabilité:</span>
                        <span className="font-medium">
                          {manageForm.priorite === 'HAUTE' ? '85%' :
                           manageForm.priorite === 'MOYENNE' ? '60%' : '35%'}
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-sm text-gray-600">Score prospect:</span>
                        <div className="flex items-center gap-2">
                          {[1,2,3,4,5].map((star) => (
                            <Star
                              key={star}
                              className={`h-4 w-4 ${star <= 3 ? 'text-yellow-400 fill-current' : 'text-gray-300'}`}
                            />
                          ))}
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </div>

                <Card>
                  <CardHeader>
                    <CardTitle>Actions Rapides</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                      <Button variant="outline" size="sm" className="w-full">
                        <Phone className="h-4 w-4 mr-2" />
                        Appeler
                      </Button>
                      <Button variant="outline" size="sm" className="w-full">
                        <Mail className="h-4 w-4 mr-2" />
                        Email
                      </Button>
                      <Button variant="outline" size="sm" className="w-full">
                        <Calendar className="h-4 w-4 mr-2" />
                        RDV
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        className="w-full"
                        onClick={() => {
                          setIsManageModalOpen(false);
                          setConversionForm(prev => ({ ...prev, organismeId: selectedProspect?.id || '' }));
                          setIsConvertModalOpen(true);
                        }}
                      >
                        <UserCheck className="h-4 w-4 mr-2" />
                        Convertir
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>
            </Tabs>

            {/* Actions du modal */}
            <div className="flex justify-between items-center pt-6 border-t">
              <div className="flex items-center gap-2 text-sm text-gray-500">
                <Clock className="h-4 w-4" />
                Dernière modification: {new Date().toLocaleDateString()}
              </div>

              <div className="flex gap-2">
                <Button variant="outline" onClick={() => setIsManageModalOpen(false)}>
                  <X className="h-4 w-4 mr-2" />
                  Annuler
                </Button>
                <Button
                  onClick={handleSaveOrganisme}
                  disabled={loadingStates.updating === selectedProspect?.id}
                >
                  {loadingStates.updating === selectedProspect?.id ? (
                    <>
                      <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                      Sauvegarde...
                    </>
                  ) : (
                    <>
                      <Save className="h-4 w-4 mr-2" />
                      Sauvegarder
                    </>
                  )}
                </Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>

        {/* Modal de conversion */}
        <Dialog open={isConvertModalOpen} onOpenChange={setIsConvertModalOpen}>
          <DialogContent className="max-w-2xl">
            <DialogHeader>
              <DialogTitle>Convertir en Client</DialogTitle>
              <DialogDescription>
                Conversion du prospect "{selectedProspect?.nom}" en client actif
              </DialogDescription>
            </DialogHeader>

            <div className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="typeContrat">Type de Contrat</Label>
                  <Select
                    value={conversionForm.typeContrat}
                    onValueChange={(value: TypeContrat) =>
                      setConversionForm(prev => ({ ...prev, typeContrat: value }))
                    }
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="STANDARD">Standard (2.5M FCFA/an)</SelectItem>
                      <SelectItem value="PREMIUM">Premium (8.5M FCFA/an)</SelectItem>
                      <SelectItem value="ENTERPRISE">Enterprise (25M FCFA/an)</SelectItem>
                      <SelectItem value="GOUVERNEMENTAL">Gouvernemental (50M FCFA/an)</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <Label htmlFor="montantAnnuel">Montant Annuel (FCFA)</Label>
                  <Input
                    type="number"
                    value={conversionForm.montantAnnuel}
                    onChange={(e) => setConversionForm(prev => ({
                      ...prev,
                      montantAnnuel: parseInt(e.target.value)
                    }))}
                  />
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="dureeContrat">Durée (mois)</Label>
                  <Input
                    type="number"
                    value={conversionForm.dureeContrat}
                    onChange={(e) => setConversionForm(prev => ({
                      ...prev,
                      dureeContrat: parseInt(e.target.value)
                    }))}
                  />
                </div>

                <div>
                  <Label htmlFor="dateSignature">Date de Signature</Label>
                  <Input
                    type="date"
                    value={conversionForm.dateSignature}
                    onChange={(e) => setConversionForm(prev => ({
                      ...prev,
                      dateSignature: e.target.value
                    }))}
                  />
                </div>
              </div>

              <div>
                <Label htmlFor="responsableCommercial">Responsable Commercial</Label>
                <Input
                  value={conversionForm.responsableCommercial}
                  onChange={(e) => setConversionForm(prev => ({
                    ...prev,
                    responsableCommercial: e.target.value
                  }))}
                />
              </div>

              <div>
                <Label htmlFor="conditions">Conditions Particulières</Label>
                <Textarea
                  value={conversionForm.conditions}
                  onChange={(e) => setConversionForm(prev => ({
                    ...prev,
                    conditions: e.target.value
                  }))}
                  rows={3}
                />
              </div>

              <div className="flex justify-end gap-2 pt-4">
                <Button variant="outline" onClick={() => setIsConvertModalOpen(false)}>
                  Annuler
                </Button>
                <Button
                  onClick={() => selectedProspect && handleConvertToClient(selectedProspect)}
                  disabled={!selectedProspect || loadingStates.converting === selectedProspect?.id}
                >
                  {loadingStates.converting === selectedProspect?.id ? (
                    <>
                      <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                      Conversion...
                    </>
                  ) : (
                    <>
                      <CheckCircle className="h-4 w-4 mr-2" />
                      Confirmer la Conversion
                    </>
                  )}
                </Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>
      </div>
    </AuthenticatedLayout>
  );
}
