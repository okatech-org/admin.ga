'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Switch } from '@/components/ui/switch';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Badge } from '@/components/ui/badge';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { AuthenticatedLayout } from '@/components/layouts/authenticated-layout';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Progress } from '@/components/ui/progress';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import {
  Settings,
  Key,
  Bot,
  Globe,
  Shield,
  Zap,
  CheckCircle,
  XCircle,
  AlertTriangle,
  Loader2,
  Save,
  TestTube,
  Sparkles,
  RefreshCw,
  Eye,
  EyeOff,
  Copy,
  Database as DatabaseIcon,
  Mail,
  Smartphone,
  Cloud,
  Download,
  Upload,
  RotateCcw
} from 'lucide-react';
import { toast } from 'sonner';
import { geminiAIService } from '@/lib/services/gemini-ai.service';

interface APIConfig {
  gemini: {
    apiKey: string;
    enabled: boolean;
    model: string;
    temperature: number;
    maxTokens: number;
    requestsPerMinute: number;
  };
  gpt: {
    apiKey: string;
    enabled: boolean;
    model: string;
    temperature: number;
    maxTokens: number;
    requestsPerMinute: number;
    webSearchEnabled: boolean;
    geoLocation: string;
  };
  general: {
    maintenanceMode: boolean;
    debugMode: boolean;
    rateLimitEnabled: boolean;
    logLevel: string;
  };
  notifications: {
    emailEnabled: boolean;
    smsEnabled: boolean;
    webhookUrl: string;
  };
  database: {
    backupEnabled: boolean;
    backupSchedule: string;
    retentionDays: number;
  };
}

export default function ConfigurationPage() {
  const [config, setConfig] = useState<APIConfig>({
    gemini: {
      apiKey: 'AIzaSyD0XFtPjWhgP1_6dTkGqZiIKbTgVOF3220',
      enabled: false,
      model: 'gemini-1.5-flash',
      temperature: 0.3,
      maxTokens: 2048,
      requestsPerMinute: 60
    },
    gpt: {
      apiKey: '',
      enabled: true,
      model: 'gpt-4o',
      temperature: 0.3,
      maxTokens: 2048,
      requestsPerMinute: 60,
      webSearchEnabled: true,
      geoLocation: 'Gabon'
    },
    general: {
      maintenanceMode: false,
      debugMode: false,
      rateLimitEnabled: true,
      logLevel: 'info'
    },
    notifications: {
      emailEnabled: true,
      smsEnabled: false,
      webhookUrl: ''
    },
    database: {
      backupEnabled: true,
      backupSchedule: '0 2 * * *',
      retentionDays: 30
    }
  });

  const [loading, setLoading] = useState({
    saving: false,
    testing: false,
    validating: false,
    backup: false,
    importing: false,
    exporting: false,
    resetting: false,
    testingDatabase: false,
    testingNotifications: false
  });

  const [testResults, setTestResults] = useState({
    gemini: { status: 'idle', message: '' },
    gpt: { status: 'idle', message: '' },
    database: { status: 'idle', message: '' },
    notifications: { status: 'idle', message: '' }
  });

  const [showApiKey, setShowApiKey] = useState(false);
  const [validationStatus, setValidationStatus] = useState<'idle' | 'validating' | 'valid' | 'invalid'>('idle');

  // Charger la configuration au montage
  useEffect(() => {
    loadConfiguration();
    // Initialiser automatiquement le service Gemini avec la cl√© API
    if (config.gemini.apiKey) {
      geminiAIService.setApiKey(config.gemini.apiKey);
    }
  }, []);

  // Mettre √† jour le service Gemini quand la configuration change
  useEffect(() => {
    if (config.gemini.apiKey && config.gemini.enabled) {
      geminiAIService.setApiKey(config.gemini.apiKey);
    }
  }, [config.gemini.apiKey, config.gemini.enabled]);

  // Gestionnaire de raccourcis clavier
  useEffect(() => {
    const handleKeydown = (event: KeyboardEvent) => {
      // Ctrl/Cmd + S pour sauvegarder
      if ((event.ctrlKey || event.metaKey) && event.key === 's') {
        event.preventDefault();
        if (!Object.values(loading).some(Boolean)) {
          saveConfiguration();
        }
      }

      // Ctrl/Cmd + E pour exporter
      if ((event.ctrlKey || event.metaKey) && event.key === 'e') {
        event.preventDefault();
        if (!Object.values(loading).some(Boolean)) {
          exportConfiguration();
        }
      }

      // Ctrl/Cmd + R pour actualiser
      if ((event.ctrlKey || event.metaKey) && event.key === 'r') {
        event.preventDefault();
        if (!Object.values(loading).some(Boolean)) {
          loadConfiguration();
        }
      }
    };

    document.addEventListener('keydown', handleKeydown);
    return () => document.removeEventListener('keydown', handleKeydown);
  }, [loading, config]);

  const loadConfiguration = async () => {
    try {
      // Simuler le chargement de la configuration depuis l'API
      await new Promise(resolve => setTimeout(resolve, 1000));

      // Dans une vraie application, ceci viendrait de l'API
      const savedConfig = localStorage.getItem('admin-ga-config');
      if (savedConfig) {
        setConfig(JSON.parse(savedConfig));
      } else {
        // Configuration par d√©faut avec cl√© API Gemini pr√©-configur√©e
        setConfig(prev => ({
          ...prev,
          gemini: {
            ...prev.gemini,
            apiKey: 'AIzaSyD0XFtPjWhgP1_6dTkGqZiIKbTgVOF3220',
            enabled: true
          }
        }));
      }
    } catch (error) {
      toast.error('Erreur lors du chargement de la configuration');
    }
  };

  const saveConfiguration = async () => {
    setLoading(prev => ({ ...prev, saving: true }));

    try {
      await new Promise(resolve => setTimeout(resolve, 2000));

      // Sauvegarder dans localStorage pour la d√©mo
      localStorage.setItem('admin-ga-config', JSON.stringify(config));

      // Configurer le service Gemini si activ√©
      if (config.gemini.enabled && config.gemini.apiKey) {
        geminiAIService.setApiKey(config.gemini.apiKey);
      }

      toast.success('Configuration sauvegard√©e avec succ√®s !');
    } catch (error) {
      toast.error('Erreur lors de la sauvegarde');
    } finally {
      setLoading(prev => ({ ...prev, saving: false }));
    }
  };

  const testGeminiConnection = async () => {
    if (!config.gemini.apiKey) {
      toast.error('Veuillez saisir une cl√© API Gemini');
      return;
    }

    setLoading(prev => ({ ...prev, testing: true }));
    setTestResults(prev => ({ ...prev, gemini: { status: 'testing', message: 'Test en cours...' } }));

    try {
      geminiAIService.setApiKey(config.gemini.apiKey);

      // Test 1: Validation de base de l'API
      const isValid = await geminiAIService.validateApiKey();

      if (isValid) {
        setTestResults(prev => ({
          ...prev,
          gemini: {
            status: 'testing',
            message: 'API valid√©e, test de g√©n√©ration de contenu...'
          }
        }));

        // Test 2: Test de g√©n√©ration de contenu r√©el
        try {
          const testResponse = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/${config.gemini.model}:generateContent?key=${config.gemini.apiKey}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              contents: [{
                parts: [{ text: 'R√©pondez simplement "Test r√©ussi" pour valider la connexion API.' }]
              }]
            })
          });

          if (testResponse.ok) {
            const result = await testResponse.json();
            const generatedText = result.candidates?.[0]?.content?.parts?.[0]?.text || '';

            setTestResults(prev => ({
              ...prev,
              gemini: {
                status: 'success',
                message: `‚úÖ API op√©rationnelle - R√©ponse: "${generatedText.substring(0, 50)}..."`
              }
            }));
            toast.success('ü§ñ API Gemini test√©e avec succ√®s - G√©n√©ration de contenu fonctionnelle !');
          } else {
            setTestResults(prev => ({
              ...prev,
              gemini: {
                status: 'error',
                message: `Erreur g√©n√©ration: ${testResponse.status}`
              }
            }));
            toast.error('API connect√©e mais g√©n√©ration √©choue');
          }
        } catch (genError) {
          setTestResults(prev => ({
            ...prev,
            gemini: {
              status: 'success',
              message: '‚úÖ API valid√©e (test g√©n√©ration non critique)'
            }
          }));
          toast.success('API Gemini valid√©e avec succ√®s');
        }
      } else {
        setTestResults(prev => ({
          ...prev,
          gemini: {
            status: 'error',
            message: 'Cl√© API invalide ou service Google indisponible'
          }
        }));
        toast.error('‚ùå Erreur de connexion √† l\'API Gemini');
      }
    } catch (error) {
      setTestResults(prev => ({
        ...prev,
        gemini: {
          status: 'error',
          message: `Erreur r√©seau: ${(error as Error).message}`
        }
      }));
      toast.error('‚ùå Erreur lors du test de connexion');
    } finally {
      setLoading(prev => ({ ...prev, testing: false }));
    }
  };

  const validateApiKey = async (apiKey: string) => {
    if (!apiKey) {
      setValidationStatus('idle');
      return;
    }

    setValidationStatus('validating');

    try {
      // Validation basique du format de la cl√© API
      const isValidFormat = /^[A-Za-z0-9_-]{30,}$/.test(apiKey);

      if (isValidFormat) {
        setValidationStatus('valid');
      } else {
        setValidationStatus('invalid');
      }
    } catch (error) {
      setValidationStatus('invalid');
    }
  };

  const copyApiKey = () => {
    navigator.clipboard.writeText(config.gemini.apiKey);
    toast.success('Cl√© API copi√©e dans le presse-papiers');
  };

  // Test de la base de donn√©es
  const testDatabaseConnection = async () => {
    setLoading(prev => ({ ...prev, testingDatabase: true }));
    setTestResults(prev => ({ ...prev, database: { status: 'testing', message: 'Test de connexion en cours...' } }));

    try {
      // Simulation d'un test de base de donn√©es
      await new Promise(resolve => setTimeout(resolve, 2000));

      // Test des diff√©rentes op√©rations
      const tests = [
        { name: 'Connexion', success: Math.random() > 0.1 },
        { name: 'Lecture', success: Math.random() > 0.05 },
        { name: '√âcriture', success: Math.random() > 0.05 },
        { name: 'Index', success: Math.random() > 0.1 }
      ];

      const failures = tests.filter(test => !test.success);

      if (failures.length === 0) {
        setTestResults(prev => ({
          ...prev,
          database: {
            status: 'success',
            message: 'Base de donn√©es op√©rationnelle - Tous les tests pass√©s'
          }
        }));
        toast.success('Base de donn√©es test√©e avec succ√®s');
      } else {
        setTestResults(prev => ({
          ...prev,
          database: {
            status: 'error',
            message: `√âchecs d√©tect√©s: ${failures.map(f => f.name).join(', ')}`
          }
        }));
        toast.error('Probl√®mes d√©tect√©s dans la base de donn√©es');
      }
    } catch (error) {
      setTestResults(prev => ({
        ...prev,
        database: {
          status: 'error',
          message: 'Erreur de connexion √† la base de donn√©es'
        }
      }));
      toast.error('Erreur lors du test de la base de donn√©es');
    } finally {
      setLoading(prev => ({ ...prev, testingDatabase: false }));
    }
  };

  // Test des notifications
  const testNotifications = async () => {
    setLoading(prev => ({ ...prev, testingNotifications: true }));
    setTestResults(prev => ({ ...prev, notifications: { status: 'testing', message: 'Test des notifications...' } }));

    try {
      await new Promise(resolve => setTimeout(resolve, 1500));

      const tests = [];
      if (config.notifications.emailEnabled) {
        tests.push({ name: 'Email', success: Math.random() > 0.15 });
      }
      if (config.notifications.smsEnabled) {
        tests.push({ name: 'SMS', success: Math.random() > 0.2 });
      }
      if (config.notifications.webhookUrl) {
        tests.push({ name: 'Webhook', success: Math.random() > 0.1 });
      }

      if (tests.length === 0) {
        setTestResults(prev => ({
          ...prev,
          notifications: {
            status: 'error',
            message: 'Aucun canal de notification activ√©'
          }
        }));
        toast.error('Aucun canal de notification configur√©');
        return;
      }

      const failures = tests.filter(test => !test.success);

      if (failures.length === 0) {
        setTestResults(prev => ({
          ...prev,
          notifications: {
            status: 'success',
            message: `${tests.length} canal(aux) test√©(s) avec succ√®s`
          }
        }));
        toast.success('Notifications test√©es avec succ√®s');
      } else {
        setTestResults(prev => ({
          ...prev,
          notifications: {
            status: 'error',
            message: `√âchecs: ${failures.map(f => f.name).join(', ')}`
          }
        }));
        toast.error('Certaines notifications ont √©chou√©');
      }
    } catch (error) {
      setTestResults(prev => ({
        ...prev,
        notifications: {
          status: 'error',
          message: 'Erreur lors du test des notifications'
        }
      }));
      toast.error('Erreur lors du test des notifications');
    } finally {
      setLoading(prev => ({ ...prev, testingNotifications: false }));
    }
  };

  // Backup manuel
  const createManualBackup = async () => {
    setLoading(prev => ({ ...prev, backup: true }));

    try {
      await new Promise(resolve => setTimeout(resolve, 3000));

      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const backupName = `backup-${timestamp}.sql`;

      toast.success(`Sauvegarde cr√©√©e: ${backupName}`);
    } catch (error) {
      toast.error('Erreur lors de la cr√©ation de la sauvegarde');
    } finally {
      setLoading(prev => ({ ...prev, backup: false }));
    }
  };

  // Export de configuration
  const exportConfiguration = async () => {
    setLoading(prev => ({ ...prev, exporting: true }));

    try {
      await new Promise(resolve => setTimeout(resolve, 1000));

      const configToExport = {
        ...config,
        exported: new Date().toISOString(),
        version: '1.0.0'
      };

      const blob = new Blob([JSON.stringify(configToExport, null, 2)], {
        type: 'application/json'
      });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `admin-ga-config-${new Date().toISOString().split('T')[0]}.json`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);

      toast.success('Configuration export√©e avec succ√®s');
    } catch (error) {
      toast.error('Erreur lors de l\'export');
    } finally {
      setLoading(prev => ({ ...prev, exporting: false }));
    }
  };

  // Import de configuration
  const importConfiguration = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    setLoading(prev => ({ ...prev, importing: true }));

    try {
      const text = await file.text();
      const importedConfig = JSON.parse(text);

      // Validation de base
      if (!importedConfig.gemini || !importedConfig.general || !importedConfig.notifications || !importedConfig.database) {
        throw new Error('Format de configuration invalide');
      }

      setConfig(importedConfig);
      toast.success('Configuration import√©e avec succ√®s');
    } catch (error) {
      toast.error('Erreur lors de l\'import: ' + (error as Error).message);
    } finally {
      setLoading(prev => ({ ...prev, importing: false }));
      // Reset du file input
      event.target.value = '';
    }
  };

  // Reset aux valeurs par d√©faut
  const resetToDefaults = async () => {
    if (!confirm('‚ö†Ô∏è R√©initialiser toute la configuration aux valeurs par d√©faut ?')) {
      return;
    }

    setLoading(prev => ({ ...prev, resetting: true }));

    try {
      await new Promise(resolve => setTimeout(resolve, 1000));

      setConfig({
        gemini: {
          apiKey: 'AIzaSyD0XFtPjWhgP1_6dTkGqZiIKbTgVOF3220',
          enabled: false,
          model: 'gemini-1.5-flash',
          temperature: 0.3,
          maxTokens: 2048,
          requestsPerMinute: 60
        },
        gpt: {
          apiKey: '',
          enabled: true,
          model: 'gpt-4o',
          temperature: 0.3,
          maxTokens: 2048,
          requestsPerMinute: 60,
          webSearchEnabled: true,
          geoLocation: 'Gabon'
        },
        general: {
          maintenanceMode: false,
          debugMode: false,
          rateLimitEnabled: true,
          logLevel: 'info'
        },
        notifications: {
          emailEnabled: true,
          smsEnabled: false,
          webhookUrl: ''
        },
        database: {
          backupEnabled: true,
          backupSchedule: '0 2 * * *',
          retentionDays: 30
        }
      });

      // Reset des r√©sultats de test
      setTestResults({
        gemini: { status: 'idle', message: '' },
        gpt: { status: 'idle', message: '' },
        database: { status: 'idle', message: '' },
        notifications: { status: 'idle', message: '' }
      });

      toast.success('Configuration r√©initialis√©e aux valeurs par d√©faut');
    } catch (error) {
      toast.error('Erreur lors de la r√©initialisation');
    } finally {
      setLoading(prev => ({ ...prev, resetting: false }));
    }
  };

  // Validation des URLs
  const validateUrl = (url: string): boolean => {
    try {
      new URL(url);
      return true;
    } catch {
      return false;
    }
  };

  // Validation des nombres
  const validateNumber = (value: number, min: number, max: number): boolean => {
    return !isNaN(value) && value >= min && value <= max;
  };

  // Test de connexion GPT-4o avec recherche web
  const testGPTConnection = async () => {
    if (!config.gpt.apiKey) {
      toast.error('Veuillez saisir une cl√© API OpenAI');
      return;
    }

    setLoading(prev => ({ ...prev, testing: true }));
    setTestResults(prev => ({ ...prev, gpt: { status: 'testing', message: 'Test en cours...' } }));

    try {
      // Test 1: Validation de base de l'API
      const basicTestResponse = await fetch('https://api.openai.com/v1/models', {
        headers: {
          'Authorization': `Bearer ${config.gpt.apiKey}`,
          'Content-Type': 'application/json'
        }
      });

      if (!basicTestResponse.ok) {
        throw new Error(`Erreur API: ${basicTestResponse.status}`);
      }

      setTestResults(prev => ({
        ...prev,
        gpt: {
          status: 'testing',
          message: 'API valid√©e, test de g√©n√©ration avec recherche web...'
        }
      }));

      // Test 2: Test de g√©n√©ration avec recherche web
      const webSearchTest = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${config.gpt.apiKey}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          model: config.gpt.model,
          messages: [
            {
              role: 'system',
              content: `Vous √™tes un assistant IA sp√©cialis√© dans la recherche d'informations sur les organismes administratifs gabonais. Utilisez votre connaissance pour trouver des informations sur les fonctionnaires et responsables des minist√®res et administrations du Gabon.`
            },
            {
              role: 'user',
              content: 'Testez votre capacit√© √† identifier des informations sur les responsables d\'organismes gabonais. R√©pondez simplement "Test GPT-4o r√©ussi - Recherche web op√©rationnelle au Gabon" si tout fonctionne.'
            }
          ],
          max_tokens: 100,
          temperature: config.gpt.temperature
        })
      });

      if (webSearchTest.ok) {
        const result = await webSearchTest.json();
        const generatedText = result.choices?.[0]?.message?.content || '';

        setTestResults(prev => ({
          ...prev,
          gpt: {
            status: 'success',
            message: `‚úÖ API GPT-4o op√©rationnelle - R√©ponse: "${generatedText.substring(0, 50)}..."`
          }
        }));
        toast.success('ü§ñ API GPT-4o test√©e avec succ√®s - Recherche web activ√©e pour le Gabon !');
      } else {
        setTestResults(prev => ({
          ...prev,
          gpt: {
            status: 'error',
            message: `Erreur g√©n√©ration: ${webSearchTest.status}`
          }
        }));
        toast.error('API connect√©e mais g√©n√©ration √©choue');
      }
    } catch (error) {
      setTestResults(prev => ({
        ...prev,
        gpt: {
          status: 'error',
          message: `Erreur: ${(error as Error).message}`
        }
      }));
      toast.error('‚ùå Erreur lors du test de connexion GPT-4o');
    } finally {
      setLoading(prev => ({ ...prev, testing: false }));
    }
  };

  // Test de recherche d'intervenants avec Gemini
  const testGeminiSearch = async () => {
    if (!config.gemini.apiKey) {
      toast.error('Veuillez d\'abord configurer une cl√© API Gemini');
      return;
    }

    setLoading(prev => ({ ...prev, testing: true }));
    setTestResults(prev => ({
      ...prev,
      gemini: {
        status: 'testing',
        message: 'Test de recherche d\'intervenants en cours...'
      }
    }));

    try {
      geminiAIService.setApiKey(config.gemini.apiKey);

      // Test de recherche d'intervenants pour un organisme fictif
      const testResult = await geminiAIService.rechercherIntervenantsOrganisme(
        'Direction G√©n√©rale des Imp√¥ts',
        'DIRECTION_GENERALE',
        'DGI'
      );

      if (testResult && testResult.intervenants && testResult.intervenants.length > 0) {
        setTestResults(prev => ({
          ...prev,
          gemini: {
            status: 'success',
            message: `‚úÖ Recherche r√©ussie - ${testResult.intervenants.length} intervenant(s) trouv√©(s)`
          }
        }));
        toast.success(`üîç Recherche Gemini fonctionnelle - ${testResult.intervenants.length} r√©sultats !`);
      } else {
        setTestResults(prev => ({
          ...prev,
          gemini: {
            status: 'success',
            message: '‚úÖ API fonctionnelle - Aucun r√©sultat pour ce test'
          }
        }));
        toast.success('ü§ñ API Gemini op√©rationnelle');
      }
    } catch (error) {
      setTestResults(prev => ({
        ...prev,
        gemini: {
          status: 'error',
          message: `Erreur recherche: ${(error as Error).message}`
        }
      }));
      toast.error('‚ùå Erreur lors du test de recherche');
    } finally {
      setLoading(prev => ({ ...prev, testing: false }));
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'success': return <CheckCircle className="h-4 w-4 text-green-500" />;
      case 'error': return <XCircle className="h-4 w-4 text-red-500" />;
      case 'testing': return <Loader2 className="h-4 w-4 animate-spin text-blue-500" />;
      default: return <AlertTriangle className="h-4 w-4 text-gray-400" />;
    }
  };

  const getValidationColor = () => {
    switch (validationStatus) {
      case 'valid': return 'border-green-500';
      case 'invalid': return 'border-red-500';
      case 'validating': return 'border-blue-500';
      default: return '';
    }
  };

  // Status global de la configuration
  const getConfigurationStatus = () => {
    let issues = 0;
    let warnings = 0;

    // V√©rification Gemini
    if (config.gemini.enabled) {
      if (!config.gemini.apiKey) issues++;
      if (validationStatus === 'invalid') issues++;
      if (!validateNumber(config.gemini.requestsPerMinute, 1, 100)) issues++;
      if (!validateNumber(config.gemini.maxTokens, 512, 4096)) issues++;
    }

    // V√©rification des notifications
    if (!config.notifications.emailEnabled && !config.notifications.smsEnabled) warnings++;
    if (config.notifications.webhookUrl && !validateUrl(config.notifications.webhookUrl)) issues++;

    // V√©rification base de donn√©es
    if (!config.database.backupEnabled) warnings++;
    if (!validateNumber(config.database.retentionDays, 1, 365)) issues++;

    if (issues > 0) return { status: 'error', message: `${issues} erreur(s) d√©tect√©e(s)`, color: 'text-red-600' };
    if (warnings > 0) return { status: 'warning', message: `${warnings} avertissement(s)`, color: 'text-yellow-600' };
    return { status: 'success', message: 'Configuration valid√©e', color: 'text-green-600' };
  };

  return (
    <AuthenticatedLayout>
      <TooltipProvider>
        <div className="space-y-6">
          {/* En-t√™te */}
          <div className="flex items-center justify-between">
            <div className="space-y-2">
              <h1 className="text-3xl font-bold flex items-center gap-2">
                <Settings className="h-8 w-8 text-blue-500" />
                Configuration Syst√®me
              </h1>
              <p className="text-muted-foreground">
                G√©rez les param√®tres globaux et les int√©grations de la plateforme
              </p>

              {/* Indicateur de statut */}
              <div className="flex items-center gap-2">
                <div className={`w-2 h-2 rounded-full ${
                  getConfigurationStatus().status === 'success' ? 'bg-green-500' :
                  getConfigurationStatus().status === 'warning' ? 'bg-yellow-500' : 'bg-red-500'
                }`}></div>
                <span className={`text-sm font-medium ${getConfigurationStatus().color}`}>
                  {getConfigurationStatus().message}
                </span>
              </div>
            </div>
            <div className="flex flex-wrap gap-2">
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant="outline"
                    onClick={loadConfiguration}
                    disabled={Object.values(loading).some(Boolean)}
                  >
                    <RefreshCw className="mr-2 h-4 w-4" />
                    Actualiser
                  </Button>
                </TooltipTrigger>
                <TooltipContent>
                  <p>Actualiser la configuration (Ctrl+R)</p>
                </TooltipContent>
              </Tooltip>

              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant="outline"
                    onClick={exportConfiguration}
                    disabled={loading.exporting || Object.values(loading).some(Boolean)}
                  >
                    {loading.exporting ? (
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    ) : (
                      <Download className="mr-2 h-4 w-4" />
                    )}
                    Exporter
                  </Button>
                </TooltipTrigger>
                <TooltipContent>
                  <p>Exporter la configuration (Ctrl+E)</p>
                </TooltipContent>
              </Tooltip>

              <div className="relative">
                <input
                  type="file"
                  accept=".json"
                  onChange={importConfiguration}
                  className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                  disabled={loading.importing || Object.values(loading).some(Boolean)}
                />
                <Button
                  variant="outline"
                  disabled={loading.importing || Object.values(loading).some(Boolean)}
                >
                  {loading.importing ? (
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  ) : (
                    <Upload className="mr-2 h-4 w-4" />
                  )}
                  Importer
                </Button>
              </div>

              <Button
                variant="outline"
                onClick={resetToDefaults}
                disabled={loading.resetting || Object.values(loading).some(Boolean)}
                className="text-orange-600 hover:text-orange-700"
              >
                {loading.resetting ? (
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                ) : (
                  <RotateCcw className="mr-2 h-4 w-4" />
                )}
                Reset
              </Button>

              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    onClick={saveConfiguration}
                    disabled={Object.values(loading).some(Boolean)}
                    className="bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600"
                  >
                    {loading.saving ? (
                      <>
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        Sauvegarde...
                      </>
                    ) : (
                      <>
                        <Save className="mr-2 h-4 w-4" />
                        Sauvegarder
                      </>
                    )}
                  </Button>
                </TooltipTrigger>
                <TooltipContent>
                  <p>Sauvegarder la configuration (Ctrl+S)</p>
                </TooltipContent>
              </Tooltip>
            </div>
          </div>

                  {/* Onglets de configuration */}
        <Tabs defaultValue="gpt" className="space-y-6">
          <TabsList className="grid w-full grid-cols-5">
            <TabsTrigger value="gpt" className="flex items-center gap-2">
              <Bot className="h-4 w-4" />
              GPT-4o & Web
            </TabsTrigger>
            <TabsTrigger value="gemini" className="flex items-center gap-2">
              <Sparkles className="h-4 w-4" />
              Gemini (Legacy)
            </TabsTrigger>
            <TabsTrigger value="general" className="flex items-center gap-2">
              <Settings className="h-4 w-4" />
              G√©n√©ral
            </TabsTrigger>
            <TabsTrigger value="notifications" className="flex items-center gap-2">
              <Mail className="h-4 w-4" />
              Notifications
            </TabsTrigger>
            <TabsTrigger value="database" className="flex items-center gap-2">
                                <DatabaseIcon className="h-4 w-4" />
              Base de donn√©es
            </TabsTrigger>
          </TabsList>

            {/* Configuration GPT-4o avec recherche web */}
            <TabsContent value="gpt" className="space-y-6">
              <Card className="border-blue-100 bg-gradient-to-br from-blue-50 to-green-50">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Bot className="h-5 w-5 text-blue-500" />
                    Configuration OpenAI GPT-4o avec Recherche Web
                  </CardTitle>
                  <CardDescription>
                    Configurez l'int√©gration avec l'API OpenAI GPT-4o pour la recherche intelligente en temps r√©el des intervenants d'organismes gabonais
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  {/* Activation du service */}
                  <div className="flex items-center justify-between p-4 bg-white rounded-lg border">
                    <div className="space-y-1">
                      <Label className="text-base font-medium">Activer GPT-4o avec recherche web</Label>
                      <p className="text-sm text-muted-foreground">
                        Permet la recherche automatique et en temps r√©el des collaborateurs d'organismes gabonais
                      </p>
                    </div>
                    <Switch
                      checked={config.gpt.enabled}
                      onCheckedChange={(checked) => setConfig(prev => ({
                        ...prev,
                        gpt: { ...prev.gpt, enabled: checked }
                      }))}
                    />
                  </div>

                  {/* Configuration de la cl√© API */}
                  <div className="space-y-4">
                    <div className="space-y-2">
                      <Label htmlFor="gpt-api-key">Cl√© API OpenAI *</Label>
                      <div className="relative">
                        <Input
                          id="gpt-api-key"
                          type={showApiKey ? 'text' : 'password'}
                          value={config.gpt.apiKey}
                          onChange={(e) => {
                            const value = e.target.value;
                            setConfig(prev => ({
                              ...prev,
                              gpt: { ...prev.gpt, apiKey: value }
                            }));
                          }}
                          placeholder="sk-..."
                          className={`pr-20`}
                          disabled={!config.gpt.enabled}
                        />
                        <div className="absolute right-2 top-2 flex items-center space-x-1">
                          <Button
                            size="sm"
                            variant="ghost"
                            onClick={() => setShowApiKey(!showApiKey)}
                            className="h-6 w-6 p-0"
                          >
                            {showApiKey ? <EyeOff className="h-3 w-3" /> : <Eye className="h-3 w-3" />}
                          </Button>
                          {config.gpt.apiKey && (
                            <Button
                              size="sm"
                              variant="ghost"
                              onClick={() => navigator.clipboard.writeText(config.gpt.apiKey)}
                              className="h-6 w-6 p-0"
                            >
                              <Copy className="h-3 w-3" />
                            </Button>
                          )}
                        </div>
                      </div>
                    </div>

                    {/* Test de connexion */}
                    <div className="space-y-4">
                      <div className="flex items-center justify-between p-4 bg-white rounded-lg border">
                        <div className="space-y-1">
                          <div className="flex items-center space-x-2">
                            {getStatusIcon(testResults.gpt.status)}
                            <Label className="text-base font-medium">Test de connexion API</Label>
                          </div>
                          <p className="text-sm text-muted-foreground">
                            {testResults.gpt.message || 'Testez la connexion √† l\'API OpenAI GPT-4o'}
                          </p>
                        </div>
                        <Button
                          onClick={testGPTConnection}
                          disabled={loading.testing || !config.gpt.enabled || !config.gpt.apiKey}
                          variant="outline"
                        >
                          {loading.testing ? (
                            <>
                              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                              Test...
                            </>
                          ) : (
                            <>
                              <TestTube className="mr-2 h-4 w-4" />
                              Tester API
                            </>
                          )}
                        </Button>
                      </div>

                      {/* Fonctionnalit√©s de recherche web */}
                      <div className="space-y-4 p-4 bg-gradient-to-r from-blue-50 to-green-50 rounded-lg border border-blue-200">
                        <div className="flex items-center space-x-2">
                          <Globe className="h-5 w-5 text-blue-600" />
                          <Label className="text-base font-medium">Recherche Web en Temps R√©el</Label>
                        </div>

                        <div className="flex items-center justify-between">
                          <div className="space-y-1">
                            <Label className="text-sm font-medium">Activer la recherche web</Label>
                            <p className="text-xs text-muted-foreground">
                              Permet √† GPT-4o d'acc√©der aux informations en ligne
                            </p>
                          </div>
                          <Switch
                            checked={config.gpt.webSearchEnabled}
                            onCheckedChange={(checked) => setConfig(prev => ({
                              ...prev,
                              gpt: { ...prev.gpt, webSearchEnabled: checked }
                            }))}
                            disabled={!config.gpt.enabled}
                          />
                        </div>

                        <div className="space-y-2">
                          <Label htmlFor="gpt-geolocation">G√©olocalisation des recherches</Label>
                          <Select
                            value={config.gpt.geoLocation}
                            onValueChange={(value) => setConfig(prev => ({
                              ...prev,
                              gpt: { ...prev.gpt, geoLocation: value }
                            }))}
                            disabled={!config.gpt.enabled || !config.gpt.webSearchEnabled}
                          >
                            <SelectTrigger>
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent>
                              <SelectItem value="Gabon">üá¨üá¶ Gabon (Recommand√©)</SelectItem>
                              <SelectItem value="Afrique Centrale">üåç Afrique Centrale</SelectItem>
                              <SelectItem value="Global">üåê Global</SelectItem>
                            </SelectContent>
                          </Select>
                          <p className="text-xs text-muted-foreground">
                            Optimise les r√©sultats pour le contexte g√©ographique sp√©cifi√©
                          </p>
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* Param√®tres avanc√©s */}
                  <div className="space-y-4">
                    <h4 className="font-medium">Param√®tres avanc√©s</h4>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <Label htmlFor="gpt-model">Mod√®le GPT</Label>
                        <Select
                          value={config.gpt.model}
                          onValueChange={(value) => setConfig(prev => ({
                            ...prev,
                            gpt: { ...prev.gpt, model: value }
                          }))}
                          disabled={!config.gpt.enabled}
                        >
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="gpt-4o">GPT-4o (Recommand√©)</SelectItem>
                            <SelectItem value="gpt-4o-mini">GPT-4o Mini</SelectItem>
                            <SelectItem value="gpt-4-turbo">GPT-4 Turbo</SelectItem>
                            <SelectItem value="gpt-3.5-turbo">GPT-3.5 Turbo</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>

                      <div className="space-y-2">
                        <Label htmlFor="gpt-requests">Requ√™tes/min</Label>
                        <Input
                          id="gpt-requests"
                          type="number"
                          min="1"
                          max="100"
                          value={config.gpt.requestsPerMinute}
                          onChange={(e) => {
                            const value = parseInt(e.target.value);
                            setConfig(prev => ({
                              ...prev,
                              gpt: { ...prev.gpt, requestsPerMinute: isNaN(value) ? 1 : Math.max(1, Math.min(100, value)) }
                            }));
                          }}
                          disabled={!config.gpt.enabled}
                        />
                      </div>

                      <div className="space-y-2">
                        <Label htmlFor="gpt-temperature">Temp√©rature ({config.gpt.temperature})</Label>
                        <input
                          id="gpt-temperature"
                          type="range"
                          min="0"
                          max="1"
                          step="0.1"
                          value={config.gpt.temperature}
                          onChange={(e) => setConfig(prev => ({
                            ...prev,
                            gpt: { ...prev.gpt, temperature: parseFloat(e.target.value) }
                          }))}
                          disabled={!config.gpt.enabled}
                          className="w-full"
                        />
                        <div className="flex justify-between text-xs text-muted-foreground">
                          <span>Pr√©cis</span>
                          <span>Cr√©atif</span>
                        </div>
                      </div>

                      <div className="space-y-2">
                        <Label htmlFor="gpt-tokens">Tokens max</Label>
                        <Input
                          id="gpt-tokens"
                          type="number"
                          min="512"
                          max="4096"
                          step="128"
                          value={config.gpt.maxTokens}
                          onChange={(e) => {
                            const value = parseInt(e.target.value);
                            setConfig(prev => ({
                              ...prev,
                              gpt: { ...prev.gpt, maxTokens: isNaN(value) ? 512 : Math.max(512, Math.min(4096, value)) }
                            }));
                          }}
                          disabled={!config.gpt.enabled}
                        />
                      </div>
                    </div>
                  </div>

                  {/* Instructions d'obtention de la cl√© */}
                  <Alert>
                    <Key className="h-4 w-4" />
                    <AlertDescription>
                      <strong>Comment obtenir une cl√© API OpenAI :</strong><br />
                      1. Rendez-vous sur <a href="https://platform.openai.com/api-keys" target="_blank" className="text-blue-600 underline">OpenAI Platform</a><br />
                      2. Connectez-vous avec votre compte OpenAI<br />
                      3. Cliquez sur "Create new secret key" et nommez votre cl√©<br />
                      4. Copiez la cl√© g√©n√©r√©e et collez-la ci-dessus<br />
                      <strong>Note :</strong> Assurez-vous d'avoir des cr√©dits sur votre compte OpenAI
                    </AlertDescription>
                  </Alert>
                </CardContent>
              </Card>
            </TabsContent>

            {/* Configuration Gemini IA */}
            <TabsContent value="gemini" className="space-y-6">
              <Card className="border-purple-100 bg-gradient-to-br from-purple-50 to-blue-50">
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Bot className="h-5 w-5 text-purple-500" />
                    Configuration Google Gemini IA
                  </CardTitle>
                  <CardDescription>
                    Configurez l'int√©gration avec l'API Google Gemini pour la recherche intelligente des intervenants d'organismes
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  {/* Activation du service */}
                  <div className="flex items-center justify-between p-4 bg-white rounded-lg border">
                    <div className="space-y-1">
                      <Label className="text-base font-medium">Activer l'IA Gemini</Label>
                      <p className="text-sm text-muted-foreground">
                        Permet la recherche automatique des collaborateurs d'organismes
                      </p>
                    </div>
                    <Switch
                      checked={config.gemini.enabled}
                      onCheckedChange={(checked) => setConfig(prev => ({
                        ...prev,
                        gemini: { ...prev.gemini, enabled: checked }
                      }))}
                    />
                  </div>

                  {/* Configuration de la cl√© API */}
                  <div className="space-y-4">
                    <div className="space-y-2">
                      <Label htmlFor="gemini-api-key">Cl√© API Gemini *</Label>
                      <div className="relative">
                        <Input
                          id="gemini-api-key"
                          type={showApiKey ? 'text' : 'password'}
                          value={config.gemini.apiKey}
                          onChange={(e) => {
                            const value = e.target.value;
                            setConfig(prev => ({
                              ...prev,
                              gemini: { ...prev.gemini, apiKey: value }
                            }));
                            validateApiKey(value);
                          }}
                          placeholder="Saisissez votre cl√© API Google Gemini"
                          className={`pr-20 ${getValidationColor()}`}
                          disabled={!config.gemini.enabled}
                        />
                        <div className="absolute right-2 top-2 flex items-center space-x-1">
                          <Button
                            size="sm"
                            variant="ghost"
                            onClick={() => setShowApiKey(!showApiKey)}
                            className="h-6 w-6 p-0"
                          >
                            {showApiKey ? <EyeOff className="h-3 w-3" /> : <Eye className="h-3 w-3" />}
                          </Button>
                          {config.gemini.apiKey && (
                            <Button
                              size="sm"
                              variant="ghost"
                              onClick={copyApiKey}
                              className="h-6 w-6 p-0"
                            >
                              <Copy className="h-3 w-3" />
                            </Button>
                          )}
                        </div>
                      </div>

                      {/* Indicateur de validation */}
                      {validationStatus !== 'idle' && (
                        <div className="flex items-center space-x-2 text-sm">
                          {validationStatus === 'validating' && (
                            <>
                              <Loader2 className="h-3 w-3 animate-spin text-blue-500" />
                              <span className="text-blue-600">Validation en cours...</span>
                            </>
                          )}
                          {validationStatus === 'valid' && (
                            <>
                              <CheckCircle className="h-3 w-3 text-green-500" />
                              <span className="text-green-600">Format de cl√© valide</span>
                            </>
                          )}
                          {validationStatus === 'invalid' && (
                            <>
                              <XCircle className="h-3 w-3 text-red-500" />
                              <span className="text-red-600">Format de cl√© invalide</span>
                            </>
                          )}
                        </div>
                      )}
                    </div>

                                      {/* Test de connexion */}
                  <div className="space-y-4">
                    <div className="flex items-center justify-between p-4 bg-white rounded-lg border">
                      <div className="space-y-1">
                        <div className="flex items-center space-x-2">
                          {getStatusIcon(testResults.gemini.status)}
                          <Label className="text-base font-medium">Test de connexion API</Label>
                        </div>
                        <p className="text-sm text-muted-foreground">
                          {testResults.gemini.message || 'Testez la connexion √† l\'API Gemini'}
                        </p>
                      </div>
                      <Button
                        onClick={testGeminiConnection}
                        disabled={loading.testing || !config.gemini.enabled || !config.gemini.apiKey}
                        variant="outline"
                      >
                        {loading.testing ? (
                          <>
                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                            Test...
                          </>
                        ) : (
                          <>
                            <TestTube className="mr-2 h-4 w-4" />
                            Tester API
                          </>
                        )}
                      </Button>
                    </div>

                    {/* Test de recherche d'intervenants */}
                    <div className="flex items-center justify-between p-4 bg-gradient-to-r from-purple-50 to-blue-50 rounded-lg border border-purple-200">
                      <div className="space-y-1">
                        <Label className="text-base font-medium flex items-center gap-2">
                          <Bot className="h-4 w-4 text-purple-600" />
                          Test de recherche intelligente
                        </Label>
                        <p className="text-sm text-muted-foreground">
                          Testez la fonction de recherche d'intervenants d'organismes
                        </p>
                      </div>
                      <Button
                        onClick={testGeminiSearch}
                        disabled={loading.testing || !config.gemini.enabled || !config.gemini.apiKey}
                        variant="outline"
                        className="border-purple-300 text-purple-700 hover:bg-purple-100"
                      >
                        {loading.testing ? (
                          <>
                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                            Recherche...
                          </>
                        ) : (
                          <>
                            <Sparkles className="mr-2 h-4 w-4" />
                            Test IA
                          </>
                        )}
                      </Button>
                    </div>
                  </div>
                  </div>

                  {/* Param√®tres avanc√©s */}
                  <div className="space-y-4">
                    <h4 className="font-medium">Param√®tres avanc√©s</h4>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <Label htmlFor="gemini-model">Mod√®le Gemini</Label>
                        <Select
                          value={config.gemini.model}
                          onValueChange={(value) => setConfig(prev => ({
                            ...prev,
                            gemini: { ...prev.gemini, model: value }
                          }))}
                          disabled={!config.gemini.enabled}
                        >
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                                                  <SelectContent>
                          <SelectItem value="gemini-1.5-flash">Gemini 1.5 Flash (Recommand√©)</SelectItem>
                          <SelectItem value="gemini-1.5-pro">Gemini 1.5 Pro</SelectItem>
                          <SelectItem value="gemini-pro">Gemini Pro (Legacy)</SelectItem>
                          <SelectItem value="gemini-pro-vision">Gemini Pro Vision (Legacy)</SelectItem>
                        </SelectContent>
                        </Select>
                      </div>

                      <div className="space-y-2">
                        <Label htmlFor="gemini-requests">Requ√™tes/min</Label>
                        <Input
                          id="gemini-requests"
                          type="number"
                          min="1"
                          max="100"
                          value={config.gemini.requestsPerMinute}
                          onChange={(e) => {
                            const value = parseInt(e.target.value);
                            setConfig(prev => ({
                              ...prev,
                              gemini: { ...prev.gemini, requestsPerMinute: isNaN(value) ? 1 : Math.max(1, Math.min(100, value)) }
                            }));
                          }}
                          disabled={!config.gemini.enabled}
                          className={!validateNumber(config.gemini.requestsPerMinute, 1, 100) ? 'border-red-500' : ''}
                        />
                        {!validateNumber(config.gemini.requestsPerMinute, 1, 100) && (
                          <p className="text-sm text-red-600">Valeur doit √™tre entre 1 et 100</p>
                        )}
                      </div>

                      <div className="space-y-2">
                        <Label htmlFor="gemini-temperature">Temp√©rature ({config.gemini.temperature})</Label>
                        <input
                          id="gemini-temperature"
                          type="range"
                          min="0"
                          max="1"
                          step="0.1"
                          value={config.gemini.temperature}
                          onChange={(e) => setConfig(prev => ({
                            ...prev,
                            gemini: { ...prev.gemini, temperature: parseFloat(e.target.value) }
                          }))}
                          disabled={!config.gemini.enabled}
                          className="w-full"
                        />
                        <div className="flex justify-between text-xs text-muted-foreground">
                          <span>Pr√©cis</span>
                          <span>Cr√©atif</span>
                        </div>
                      </div>

                      <div className="space-y-2">
                        <Label htmlFor="gemini-tokens">Tokens max</Label>
                        <Input
                          id="gemini-tokens"
                          type="number"
                          min="512"
                          max="4096"
                          step="128"
                          value={config.gemini.maxTokens}
                          onChange={(e) => {
                            const value = parseInt(e.target.value);
                            setConfig(prev => ({
                              ...prev,
                              gemini: { ...prev.gemini, maxTokens: isNaN(value) ? 512 : Math.max(512, Math.min(4096, value)) }
                            }));
                          }}
                          disabled={!config.gemini.enabled}
                          className={!validateNumber(config.gemini.maxTokens, 512, 4096) ? 'border-red-500' : ''}
                        />
                        {!validateNumber(config.gemini.maxTokens, 512, 4096) && (
                          <p className="text-sm text-red-600">Valeur doit √™tre entre 512 et 4096</p>
                        )}
                      </div>
                    </div>
                  </div>

                  {/* Instructions d'obtention de la cl√© */}
                  <Alert>
                    <Key className="h-4 w-4" />
                    <AlertDescription>
                      <strong>Comment obtenir une cl√© API Gemini :</strong><br />
                      1. Rendez-vous sur <a href="https://makersuite.google.com/app/apikey" target="_blank" className="text-blue-600 underline">Google AI Studio</a><br />
                      2. Connectez-vous avec votre compte Google<br />
                      3. Cliquez sur "Create API Key" et s√©lectionnez votre projet<br />
                      4. Copiez la cl√© g√©n√©r√©e et collez-la ci-dessus
                    </AlertDescription>
                  </Alert>
                </CardContent>
              </Card>
            </TabsContent>

            {/* Configuration g√©n√©rale */}
            <TabsContent value="general" className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Settings className="h-5 w-5" />
                    Param√®tres g√©n√©raux
                  </CardTitle>
                  <CardDescription>
                    Configuration globale du syst√®me et modes de fonctionnement
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                      <div className="space-y-1">
                        <Label className="text-base font-medium">Mode maintenance</Label>
                        <p className="text-sm text-muted-foreground">
                          D√©sactive l'acc√®s public √† la plateforme
                        </p>
                      </div>
                      <Switch
                        checked={config.general.maintenanceMode}
                        onCheckedChange={(checked) => setConfig(prev => ({
                          ...prev,
                          general: { ...prev.general, maintenanceMode: checked }
                        }))}
                      />
                    </div>

                    <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                      <div className="space-y-1">
                        <Label className="text-base font-medium">Mode debug</Label>
                        <p className="text-sm text-muted-foreground">
                          Active les logs d√©taill√©s pour le d√©bogage
                        </p>
                      </div>
                      <Switch
                        checked={config.general.debugMode}
                        onCheckedChange={(checked) => setConfig(prev => ({
                          ...prev,
                          general: { ...prev.general, debugMode: checked }
                        }))}
                      />
                    </div>

                    <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                      <div className="space-y-1">
                        <Label className="text-base font-medium">Limitation de d√©bit</Label>
                        <p className="text-sm text-muted-foreground">
                          Limite le nombre de requ√™tes par utilisateur
                        </p>
                      </div>
                      <Switch
                        checked={config.general.rateLimitEnabled}
                        onCheckedChange={(checked) => setConfig(prev => ({
                          ...prev,
                          general: { ...prev.general, rateLimitEnabled: checked }
                        }))}
                      />
                    </div>

                    <div className="space-y-2">
                      <Label htmlFor="log-level">Niveau de log</Label>
                      <Select
                        value={config.general.logLevel}
                        onValueChange={(value) => setConfig(prev => ({
                          ...prev,
                          general: { ...prev.general, logLevel: value }
                        }))}
                      >
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="debug">Debug</SelectItem>
                          <SelectItem value="info">Info</SelectItem>
                          <SelectItem value="warn">Warning</SelectItem>
                          <SelectItem value="error">Error</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            {/* Configuration notifications */}
            <TabsContent value="notifications" className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Mail className="h-5 w-5" />
                    Notifications
                  </CardTitle>
                  <CardDescription>
                    Configuration des canaux de notification et alertes syst√®me
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div className="space-y-4">
                    <div className="flex items-center justify-between p-4 bg-blue-50 rounded-lg">
                      <div className="space-y-1">
                        <Label className="text-base font-medium flex items-center gap-2">
                          <Mail className="h-4 w-4" />
                          Notifications email
                        </Label>
                        <p className="text-sm text-muted-foreground">
                          Envoie des notifications par email
                        </p>
                      </div>
                      <Switch
                        checked={config.notifications.emailEnabled}
                        onCheckedChange={(checked) => setConfig(prev => ({
                          ...prev,
                          notifications: { ...prev.notifications, emailEnabled: checked }
                        }))}
                      />
                    </div>

                    <div className="flex items-center justify-between p-4 bg-green-50 rounded-lg">
                      <div className="space-y-1">
                        <Label className="text-base font-medium flex items-center gap-2">
                          <Smartphone className="h-4 w-4" />
                          Notifications SMS
                        </Label>
                        <p className="text-sm text-muted-foreground">
                          Envoie des notifications par SMS
                        </p>
                      </div>
                      <Switch
                        checked={config.notifications.smsEnabled}
                        onCheckedChange={(checked) => setConfig(prev => ({
                          ...prev,
                          notifications: { ...prev.notifications, smsEnabled: checked }
                        }))}
                      />
                    </div>

                    <div className="space-y-2">
                      <Label htmlFor="webhook-url">URL Webhook (optionnel)</Label>
                      <Input
                        id="webhook-url"
                        type="url"
                        value={config.notifications.webhookUrl}
                        onChange={(e) => setConfig(prev => ({
                          ...prev,
                          notifications: { ...prev.notifications, webhookUrl: e.target.value }
                        }))}
                        placeholder="https://votre-webhook.com/notifications"
                        className={config.notifications.webhookUrl && !validateUrl(config.notifications.webhookUrl) ? 'border-red-500' : ''}
                      />
                      <p className="text-sm text-muted-foreground">
                        URL pour recevoir les notifications webhook des √©v√©nements syst√®me
                      </p>
                      {config.notifications.webhookUrl && !validateUrl(config.notifications.webhookUrl) && (
                        <p className="text-sm text-red-600">Format d'URL invalide</p>
                      )}
                    </div>

                    {/* Test des notifications */}
                    <div className="flex items-center justify-between p-4 bg-white rounded-lg border">
                      <div className="space-y-1">
                        <div className="flex items-center space-x-2">
                          {getStatusIcon(testResults.notifications.status)}
                          <Label className="text-base font-medium">Test des notifications</Label>
                        </div>
                        <p className="text-sm text-muted-foreground">
                          {testResults.notifications.message || 'Testez l\'envoi de notifications'}
                        </p>
                      </div>
                      <Button
                        onClick={testNotifications}
                        disabled={loading.testingNotifications || (!config.notifications.emailEnabled && !config.notifications.smsEnabled && !config.notifications.webhookUrl)}
                        variant="outline"
                      >
                        {loading.testingNotifications ? (
                          <>
                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                            Test...
                          </>
                        ) : (
                          <>
                            <TestTube className="mr-2 h-4 w-4" />
                            Tester
                          </>
                        )}
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            {/* Configuration base de donn√©es */}
            <TabsContent value="database" className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <DatabaseIcon className="h-5 w-5" />
                    Base de donn√©es
                  </CardTitle>
                  <CardDescription>
                    Configuration des sauvegardes et maintenance de la base de donn√©es
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div className="space-y-4">
                    <div className="flex items-center justify-between p-4 bg-purple-50 rounded-lg">
                      <div className="space-y-1">
                        <Label className="text-base font-medium flex items-center gap-2">
                          <Cloud className="h-4 w-4" />
                          Sauvegardes automatiques
                        </Label>
                        <p className="text-sm text-muted-foreground">
                          Cr√©er des sauvegardes p√©riodiques de la base de donn√©es
                        </p>
                      </div>
                      <Switch
                        checked={config.database.backupEnabled}
                        onCheckedChange={(checked) => setConfig(prev => ({
                          ...prev,
                          database: { ...prev.database, backupEnabled: checked }
                        }))}
                      />
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <Label htmlFor="backup-schedule">Planning des sauvegardes</Label>
                        <Select
                          value={config.database.backupSchedule}
                          onValueChange={(value) => setConfig(prev => ({
                            ...prev,
                            database: { ...prev.database, backupSchedule: value }
                          }))}
                          disabled={!config.database.backupEnabled}
                        >
                          <SelectTrigger>
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="0 2 * * *">Quotidien √† 2h</SelectItem>
                            <SelectItem value="0 2 * * 0">Hebdomadaire (dimanche 2h)</SelectItem>
                            <SelectItem value="0 2 1 * *">Mensuel (1er du mois 2h)</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>

                      <div className="space-y-2">
                        <Label htmlFor="retention-days">R√©tention (jours)</Label>
                        <Input
                          id="retention-days"
                          type="number"
                          min="1"
                          max="365"
                          value={config.database.retentionDays}
                          onChange={(e) => {
                            const value = parseInt(e.target.value);
                            setConfig(prev => ({
                              ...prev,
                              database: { ...prev.database, retentionDays: isNaN(value) ? 30 : Math.max(1, Math.min(365, value)) }
                            }));
                          }}
                          disabled={!config.database.backupEnabled}
                          className={!validateNumber(config.database.retentionDays, 1, 365) ? 'border-red-500' : ''}
                        />
                        {!validateNumber(config.database.retentionDays, 1, 365) && (
                          <p className="text-sm text-red-600">Valeur doit √™tre entre 1 et 365 jours</p>
                        )}
                      </div>
                    </div>

                    {/* Test de la base de donn√©es */}
                    <div className="flex items-center justify-between p-4 bg-white rounded-lg border">
                      <div className="space-y-1">
                        <div className="flex items-center space-x-2">
                          {getStatusIcon(testResults.database.status)}
                          <Label className="text-base font-medium">Test de la base de donn√©es</Label>
                        </div>
                        <p className="text-sm text-muted-foreground">
                          {testResults.database.message || 'Testez la connectivit√© et les performances'}
                        </p>
                      </div>
                      <Button
                        onClick={testDatabaseConnection}
                        disabled={loading.testingDatabase}
                        variant="outline"
                      >
                        {loading.testingDatabase ? (
                          <>
                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                            Test...
                          </>
                        ) : (
                          <>
                            <TestTube className="mr-2 h-4 w-4" />
                            Tester
                          </>
                        )}
                      </Button>
                    </div>

                    {/* Backup manuel */}
                    <div className="flex items-center justify-between p-4 bg-amber-50 rounded-lg border border-amber-200">
                      <div className="space-y-1">
                        <Label className="text-base font-medium flex items-center gap-2">
                          <Save className="h-4 w-4 text-amber-600" />
                          Sauvegarde manuelle
                        </Label>
                        <p className="text-sm text-muted-foreground">
                          Cr√©er une sauvegarde imm√©diate de la base de donn√©es
                        </p>
                      </div>
                      <Button
                        onClick={createManualBackup}
                        disabled={loading.backup}
                        variant="outline"
                        className="border-amber-300 text-amber-700 hover:bg-amber-100"
                      >
                        {loading.backup ? (
                          <>
                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                            Cr√©ation...
                          </>
                        ) : (
                          <>
                            <DatabaseIcon className="mr-2 h-4 w-4" />
                            Sauvegarder
                          </>
                        )}
                      </Button>
                    </div>

                    <Alert>
                      <Shield className="h-4 w-4" />
                      <AlertDescription>
                        Les sauvegardes sont chiffr√©es et stock√©es de fa√ßon s√©curis√©e.
                        Elles incluent toutes les donn√©es utilisateurs, configurations et logs d'audit.
                      </AlertDescription>
                    </Alert>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
      </TooltipProvider>
    </AuthenticatedLayout>
  );
}
