'use client';

import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Switch } from '@/components/ui/switch';
import { LogoPNG } from '@/components/ui/logo-png';
import { LogoAdministrationGA } from '@/components/ui/logo-administration-ga';
import { MenuManager } from '@/components/admin/menu-manager';
import { ContentManager } from '@/components/admin/content-manager';
import {
  Settings, Upload, Eye, Save, RefreshCw, Image, Menu, FileText,
  Globe, Palette, Layout, Info, Bell, Link, Users, Shield, Edit2, Trash2, Plus, Activity, CheckCircle2,
  Briefcase, TrendingUp, MapPin, Clock, DollarSign, Building2, Download
} from 'lucide-react';

/**
 * Interface d'Administration Web
 *
 * Environnement complet pour modifier les applications ADMINISTRATION.GA et DEMARCHE.GA
 * - Gestion des logos et assets visuels
 * - Configuration des menus et navigation
 * - Gestion du contenu et actualités
 * - Paramètres généraux des applications
 */

type ApplicationType = 'administration' | 'demarche' | 'travail';
type ViewMode = 'selector' | 'config';

export default function AdminWebInterface() {
  const [viewMode, setViewMode] = useState<ViewMode>('selector');
  const [selectedApp, setSelectedApp] = useState<ApplicationType | null>(null);
  const [activeTab, setActiveTab] = useState('dashboard');
  const [hasChanges, setHasChanges] = useState(false);
  const [isPreviewMode, setIsPreviewMode] = useState(false);
  const [saveStatus, setSaveStatus] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle');

  // Configuration ADMINISTRATION.GA
  const [administrationConfig, setAdministrationConfig] = useState({
    enabled: true,
    name: 'ADMINISTRATION.GA',
    subtitle: 'République Gabonaise',
    description: 'Plateforme officielle d\'administration gabonaise',
    domain: 'administration.ga',
    logoUrl: '/images/logo-administration-ga.png',
    faviconUrl: '/favicon.ico',
    primaryColor: '#009E49',
    secondaryColor: '#FFD700',
    accentColor: '#3A75C4',
    features: {
      userManagement: true,
      organizationManagement: true,
      analytics: true,
      reporting: true,
      apiAccess: true
    },
    stats: {
      activeUsers: 1247,
      organizations: 160,
      dailyLogins: 312,
      uptime: '99.9%'
    }
  });

  // Configuration DEMARCHE.GA
  const [demarcheConfig, setDemarcheConfig] = useState({
    enabled: true,
    name: 'DEMARCHE.GA',
    subtitle: 'Démarches Simplifiées',
    description: 'Portail des démarches administratives gabonaises',
    domain: 'demarche.ga',
    logoUrl: '/images/logo-demarche-ga.png',
    faviconUrl: '/favicon.ico',
    primaryColor: '#1E40AF',
    secondaryColor: '#10B981',
    accentColor: '#F59E0B',
    features: {
      onlineServices: true,
      documentTracking: true,
      citizenPortal: true,
      mobileApp: true,
      notifications: true
    },
    stats: {
      activeServices: 45,
      monthlyRequests: 2834,
      completedProcedures: 1956,
      uptime: '99.8%'
    }
  });

  // Configuration TRAVAIL.GA
  const [travailConfig, setTravailConfig] = useState({
    enabled: true,
    name: 'TRAVAIL.GA',
    subtitle: 'Emploi Public',
    description: 'Plateforme officielle de l\'emploi public au Gabon',
    domain: 'travail.ga',
    logoUrl: '/images/logo-travail-ga.png',
    faviconUrl: '/favicon.ico',
    primaryColor: '#1E40AF',
    secondaryColor: '#10B981',
    accentColor: '#F59E0B',
    features: {
      candidatureEnLigne: true,
      uploadCV: true,
      notifications: true,
      statistiques: true,
      filtresAvances: true,
      exportOffres: true
    },
    parametres: {
      dureeOffre: 30,
      tailleMaxCV: 5,
      formatsCV: ['PDF', 'DOC', 'DOCX'],
      niveauxEtudes: ['Bac', 'Bac+2', 'Bac+3', 'Bac+5', 'Doctorat'],
      typesContrats: ['CDI', 'CDD', 'Stage', 'Consultance'],
      localisations: ['Libreville', 'Port-Gentil', 'Franceville', 'Oyem', 'Mouila']
    },
    stats: {
      offresActives: 24,
      candidaturesRecues: 342,
      offresExpirées: 8,
      tauxConversion: 12.5,
      organismeRecruteurs: 18,
      candidatsInscrits: 1567,
      uptime: '99.7%'
    }
  });

  const [newsItems, setNewsItems] = useState([
    {
      id: '1',
      title: 'Mise à jour du système ADMINISTRATION.GA',
      content: 'Nouvelle version avec fonctionnalités améliorées...',
      date: '2024-01-15',
      published: true,
      category: 'Système'
    }
  ]);

  // Navigation functions
  const handleSelectApplication = (app: ApplicationType) => {
    setSelectedApp(app);
    setViewMode('config');
    setActiveTab('dashboard');
  };

  const handleBackToSelector = () => {
    setViewMode('selector');
    setSelectedApp(null);
    setHasChanges(false);
  };

  const getCurrentConfig = () => {
    switch (selectedApp) {
      case 'administration':
        return administrationConfig;
      case 'demarche':
        return demarcheConfig;
      case 'travail':
        return travailConfig;
      default:
        return null;
    }
  };

  const updateCurrentConfig = (updates: any) => {
    switch (selectedApp) {
      case 'administration':
        setAdministrationConfig(prev => ({ ...prev, ...updates }));
        break;
      case 'demarche':
        setDemarcheConfig(prev => ({ ...prev, ...updates }));
        break;
      case 'travail':
        setTravailConfig(prev => ({ ...prev, ...updates }));
        break;
    }
    setHasChanges(true);
  };

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>, type: string) => {
    const file = event.target.files?.[0];
    if (file) {
      // Ici on traiterait l'upload du fichier
      const url = URL.createObjectURL(file);
      setLogoSettings(prev => ({ ...prev, [type]: url }));
      setHasChanges(true);
    }
  };

  const handleSave = async () => {
    setSaveStatus('saving');
    try {
      // Simulation d'une sauvegarde - ici on enverrait les données à l'API
      await new Promise(resolve => setTimeout(resolve, 1500));

      // Logs pour le développement
      console.log('Configuration sauvegardée:', {
        administrationConfig,
        demarcheConfig,
        travailConfig,
        newsItems,
        selectedApp,
        timestamp: new Date().toISOString()
      });

      setSaveStatus('saved');
      setHasChanges(false);

      // Reset status après 3 secondes
      setTimeout(() => setSaveStatus('idle'), 3000);
    } catch (error) {
      console.error('Erreur lors de la sauvegarde:', error);
      setSaveStatus('error');
      setTimeout(() => setSaveStatus('idle'), 3000);
    }
  };

  const handleExportConfig = () => {
    const config = {
      administrationConfig,
      demarcheConfig,
      travailConfig,
      newsItems,
      exportDate: new Date().toISOString(),
      version: '2.0.0'
    };

    const blob = new Blob([JSON.stringify(config, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `administration-config-${new Date().toISOString().split('T')[0]}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b shadow-sm">
        <div className="max-w-7xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <LogoAdministrationGA width={32} height={32} />
              <div>
                <h1 className="text-xl font-bold text-gray-900">Interface d'Administration Web</h1>
                <p className="text-sm text-gray-600">Gestion des applications ADMINISTRATION.GA & DEMARCHE.GA</p>
              </div>
            </div>
            <div className="flex items-center space-x-3">
              {hasChanges && (
                <Badge variant="outline" className="text-orange-600 border-orange-300">
                  Modifications non sauvées
                </Badge>
              )}
              <Button
                variant="outline"
                size="sm"
                onClick={() => setIsPreviewMode(!isPreviewMode)}
              >
                <Eye className="w-4 h-4 mr-2" />
                {isPreviewMode ? 'Mode Edition' : 'Aperçu'}
              </Button>
              <Button
                onClick={handleSave}
                disabled={!hasChanges || saveStatus === 'saving'}
                className={saveStatus === 'saved' ? 'bg-green-600 hover:bg-green-700' : ''}
              >
                {saveStatus === 'saving' && <RefreshCw className="w-4 h-4 mr-2 animate-spin" />}
                {saveStatus === 'saved' && <CheckCircle2 className="w-4 h-4 mr-2" />}
                {(saveStatus === 'idle' || saveStatus === 'error') && <Save className="w-4 h-4 mr-2" />}
                {saveStatus === 'saving' ? 'Sauvegarde...' :
                 saveStatus === 'saved' ? 'Sauvegardé !' :
                 saveStatus === 'error' ? 'Erreur' : 'Sauvegarder'}
              </Button>
            </div>
          </div>
        </div>
      </div>

      {/* Contenu principal */}
      <div className="max-w-7xl mx-auto px-6 py-6">
        {/* Breadcrumb Navigation */}
        {viewMode === 'config' && selectedApp && (
          <div className="mb-6">
            <nav className="flex items-center space-x-2 text-sm">
              <button
                onClick={handleBackToSelector}
                className="text-blue-600 hover:text-blue-800 flex items-center space-x-1"
              >
                <span>← Applications</span>
              </button>
              <span className="text-gray-500">/</span>
              <span className="font-medium text-gray-900">
                {getCurrentConfig()?.name}
              </span>
            </nav>
          </div>
        )}

        {viewMode === 'selector' ? (
          // Vue Sélecteur d'Applications
          <div className="space-y-8">
            {/* Header */}
            <div className="text-center">
              <h2 className="text-3xl font-bold text-gray-900 mb-4">
                Administration des Applications Web
              </h2>
              <p className="text-lg text-gray-600 max-w-2xl mx-auto">
                Sélectionnez une application pour configurer ses paramètres, gérer son contenu et personnaliser son apparence.
              </p>
            </div>

            {/* Statistiques globales */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
              {[
                { 
                  title: 'Applications Actives', 
                  value: [administrationConfig, demarcheConfig, travailConfig].filter(app => app.enabled).length,
                  total: 3,
                  icon: Globe, 
                  color: 'bg-blue-500' 
                },
                { 
                  title: 'Utilisateurs Totaux', 
                  value: administrationConfig.stats.activeUsers + demarcheConfig.stats.monthlyRequests + travailConfig.stats.candidatsInscrits, 
                  icon: Users, 
                  color: 'bg-green-500' 
                },
                { 
                  title: 'Uptime Moyen', 
                  value: '99.8%', 
                  icon: Activity, 
                  color: 'bg-purple-500' 
                },
                { 
                  title: 'Dernière MAJ', 
                  value: '2h', 
                  icon: Clock, 
                  color: 'bg-orange-500' 
                }
              ].map((metric) => (
                <Card key={metric.title}>
                  <CardContent className="p-6">
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-sm font-medium text-gray-600">{metric.title}</p>
                        <p className="text-3xl font-bold text-gray-900">
                          {typeof metric.value === 'number' && metric.total ? `${metric.value}/${metric.total}` : metric.value}
                        </p>
                      </div>
                      <div className={`p-3 rounded-full ${metric.color}`}>
                        <metric.icon className="w-6 h-6 text-white" />
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>

            {/* Cartes de sélection d'applications */}
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
              {/* ADMINISTRATION.GA */}
              <Card className="cursor-pointer hover:shadow-lg transition-all duration-200 border-2 hover:border-blue-200">
                <CardContent className="p-0">
                  <div 
                    className="p-6 rounded-t-lg"
                    style={{
                      background: `linear-gradient(135deg, ${administrationConfig.primaryColor}15, ${administrationConfig.secondaryColor}15)`
                    }}
                  >
                    <div className="flex items-center space-x-4 mb-4">
                      <div 
                        className="w-16 h-16 rounded-lg flex items-center justify-center"
                        style={{ backgroundColor: administrationConfig.primaryColor }}
                      >
                        <Shield className="w-8 h-8 text-white" />
                      </div>
                      <div>
                        <h3 className="text-xl font-bold text-gray-900">
                          {administrationConfig.name}
                        </h3>
                        <p className="text-sm text-gray-600">{administrationConfig.subtitle}</p>
                      </div>
                      <Badge className={administrationConfig.enabled ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}>
                        {administrationConfig.enabled ? 'Actif' : 'Inactif'}
                      </Badge>
                    </div>
                    <p className="text-gray-600 mb-4">{administrationConfig.description}</p>
                    
                    <div className="space-y-3">
                      <div className="grid grid-cols-2 gap-4 text-sm">
                        <div className="flex items-center space-x-2">
                          <Users className="w-4 h-4 text-gray-500" />
                          <span>{administrationConfig.stats.activeUsers} utilisateurs</span>
                        </div>
                        <div className="flex items-center space-x-2">
                          <Building2 className="w-4 h-4 text-gray-500" />
                          <span>{administrationConfig.stats.organizations} organismes</span>
                        </div>
                        <div className="flex items-center space-x-2">
                          <Activity className="w-4 h-4 text-gray-500" />
                          <span>Uptime {administrationConfig.stats.uptime}</span>
                        </div>
                        <div className="flex items-center space-x-2">
                          <Clock className="w-4 h-4 text-gray-500" />
                          <span>{administrationConfig.stats.dailyLogins} connexions/j</span>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div className="p-6 border-t">
                    <Button 
                      className="w-full"
                      onClick={() => handleSelectApplication('administration')}
                      style={{ backgroundColor: administrationConfig.primaryColor }}
                    >
                      <Settings className="w-4 h-4 mr-2" />
                      Configurer ADMINISTRATION.GA
                    </Button>
                  </div>
                </CardContent>
              </Card>

              {/* DEMARCHE.GA */}
              <Card className="cursor-pointer hover:shadow-lg transition-all duration-200 border-2 hover:border-blue-200">
                <CardContent className="p-0">
                  <div 
                    className="p-6 rounded-t-lg"
                    style={{
                      background: `linear-gradient(135deg, ${demarcheConfig.primaryColor}15, ${demarcheConfig.secondaryColor}15)`
                    }}
                  >
                    <div className="flex items-center space-x-4 mb-4">
                      <div 
                        className="w-16 h-16 rounded-lg flex items-center justify-center"
                        style={{ backgroundColor: demarcheConfig.primaryColor }}
                      >
                        <FileText className="w-8 h-8 text-white" />
                      </div>
                      <div>
                        <h3 className="text-xl font-bold text-gray-900">
                          {demarcheConfig.name}
                        </h3>
                        <p className="text-sm text-gray-600">{demarcheConfig.subtitle}</p>
                      </div>
                      <Badge className={demarcheConfig.enabled ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}>
                        {demarcheConfig.enabled ? 'Actif' : 'Inactif'}
                      </Badge>
                    </div>
                    <p className="text-gray-600 mb-4">{demarcheConfig.description}</p>
                    
                    <div className="space-y-3">
                      <div className="grid grid-cols-2 gap-4 text-sm">
                        <div className="flex items-center space-x-2">
                          <FileText className="w-4 h-4 text-gray-500" />
                          <span>{demarcheConfig.stats.activeServices} services</span>
                        </div>
                        <div className="flex items-center space-x-2">
                          <TrendingUp className="w-4 h-4 text-gray-500" />
                          <span>{demarcheConfig.stats.monthlyRequests} demandes/mois</span>
                        </div>
                        <div className="flex items-center space-x-2">
                          <Activity className="w-4 h-4 text-gray-500" />
                          <span>Uptime {demarcheConfig.stats.uptime}</span>
                        </div>
                        <div className="flex items-center space-x-2">
                          <CheckCircle2 className="w-4 h-4 text-gray-500" />
                          <span>{demarcheConfig.stats.completedProcedures} complétées</span>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div className="p-6 border-t">
                    <Button 
                      className="w-full"
                      onClick={() => handleSelectApplication('demarche')}
                      style={{ backgroundColor: demarcheConfig.primaryColor }}
                    >
                      <Settings className="w-4 h-4 mr-2" />
                      Configurer DEMARCHE.GA
                    </Button>
                  </div>
                </CardContent>
              </Card>

              {/* TRAVAIL.GA */}
              <Card className="cursor-pointer hover:shadow-lg transition-all duration-200 border-2 hover:border-blue-200">
                <CardContent className="p-0">
                  <div 
                    className="p-6 rounded-t-lg"
                    style={{
                      background: `linear-gradient(135deg, ${travailConfig.primaryColor}15, ${travailConfig.secondaryColor}15)`
                    }}
                  >
                    <div className="flex items-center space-x-4 mb-4">
                      <div 
                        className="w-16 h-16 rounded-lg flex items-center justify-center"
                        style={{ backgroundColor: travailConfig.primaryColor }}
                      >
                        <Briefcase className="w-8 h-8 text-white" />
                      </div>
                      <div>
                        <h3 className="text-xl font-bold text-gray-900">
                          {travailConfig.name}
                        </h3>
                        <p className="text-sm text-gray-600">{travailConfig.subtitle}</p>
                      </div>
                      <Badge className={travailConfig.enabled ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}>
                        {travailConfig.enabled ? 'Actif' : 'Inactif'}
                      </Badge>
                    </div>
                    <p className="text-gray-600 mb-4">{travailConfig.description}</p>
                    
                    <div className="space-y-3">
                      <div className="grid grid-cols-2 gap-4 text-sm">
                        <div className="flex items-center space-x-2">
                          <Briefcase className="w-4 h-4 text-gray-500" />
                          <span>{travailConfig.stats.offresActives} offres actives</span>
                        </div>
                        <div className="flex items-center space-x-2">
                          <Users className="w-4 h-4 text-gray-500" />
                          <span>{travailConfig.stats.candidatsInscrits} candidats</span>
                        </div>
                        <div className="flex items-center space-x-2">
                          <Activity className="w-4 h-4 text-gray-500" />
                          <span>Uptime {travailConfig.stats.uptime}</span>
                        </div>
                        <div className="flex items-center space-x-2">
                          <TrendingUp className="w-4 h-4 text-gray-500" />
                          <span>{travailConfig.stats.tauxConversion}% conversion</span>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div className="p-6 border-t">
                    <Button 
                      className="w-full"
                      onClick={() => handleSelectApplication('travail')}
                      style={{ backgroundColor: travailConfig.primaryColor }}
                    >
                      <Settings className="w-4 h-4 mr-2" />
                      Configurer TRAVAIL.GA
                    </Button>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        ) : (
          // Vue Configuration d'Application
          <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
            {/* Navigation des onglets */}
            <TabsList className="grid w-full grid-cols-6">
              <TabsTrigger value="dashboard" className="flex items-center space-x-2">
                <Layout className="w-4 h-4" />
                <span>Tableau de Bord</span>
              </TabsTrigger>
              <TabsTrigger value="appearance" className="flex items-center space-x-2">
                <Palette className="w-4 h-4" />
                <span>Apparence</span>
              </TabsTrigger>
              <TabsTrigger value="features" className="flex items-center space-x-2">
                <Settings className="w-4 h-4" />
                <span>Fonctionnalités</span>
              </TabsTrigger>
              <TabsTrigger value="content" className="flex items-center space-x-2">
                <FileText className="w-4 h-4" />
                <span>Contenu</span>
              </TabsTrigger>
              <TabsTrigger value="analytics" className="flex items-center space-x-2">
                <TrendingUp className="w-4 h-4" />
                <span>Analytics</span>
              </TabsTrigger>
              <TabsTrigger value="settings" className="flex items-center space-x-2">
                <Shield className="w-4 h-4" />
                <span>Paramètres</span>
              </TabsTrigger>
            </TabsList>

          {/* Tableau de Bord de l'Application */}
          <TabsContent value="dashboard" className="space-y-6">
            {(() => {
              const config = getCurrentConfig();
              if (!config) return null;

              // Métriques spécifiques selon l'application
              let metrics = [];
              if (selectedApp === 'administration') {
                metrics = [
                  { title: 'Utilisateurs Actifs', value: config.stats.activeUsers, icon: Users, color: 'bg-blue-500' },
                  { title: 'Organismes', value: config.stats.organizations, icon: Building2, color: 'bg-green-500' },
                  { title: 'Connexions/Jour', value: config.stats.dailyLogins, icon: Activity, color: 'bg-purple-500' },
                  { title: 'Uptime', value: config.stats.uptime, icon: Shield, color: 'bg-orange-500' }
                ];
              } else if (selectedApp === 'demarche') {
                metrics = [
                  { title: 'Services Actifs', value: config.stats.activeServices, icon: FileText, color: 'bg-blue-500' },
                  { title: 'Demandes/Mois', value: config.stats.monthlyRequests, icon: TrendingUp, color: 'bg-green-500' },
                  { title: 'Procédures Complétées', value: config.stats.completedProcedures, icon: CheckCircle2, color: 'bg-purple-500' },
                  { title: 'Uptime', value: config.stats.uptime, icon: Shield, color: 'bg-orange-500' }
                ];
              } else if (selectedApp === 'travail') {
                metrics = [
                  { title: 'Offres Actives', value: config.stats.offresActives, icon: Briefcase, color: 'bg-blue-500' },
                  { title: 'Candidatures', value: config.stats.candidaturesRecues, icon: Users, color: 'bg-green-500' },
                  { title: 'Candidats Inscrits', value: config.stats.candidatsInscrits, icon: Users, color: 'bg-purple-500' },
                  { title: 'Taux Conversion', value: `${config.stats.tauxConversion}%`, icon: TrendingUp, color: 'bg-orange-500' }
                ];
              }

              return (
                <>
                  {/* En-tête de l'application */}
                  <Card>
                    <CardContent className="p-6">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-4">
                          <div 
                            className="w-16 h-16 rounded-lg flex items-center justify-center"
                            style={{ backgroundColor: config.primaryColor }}
                          >
                            {selectedApp === 'administration' && <Shield className="w-8 h-8 text-white" />}
                            {selectedApp === 'demarche' && <FileText className="w-8 h-8 text-white" />}
                            {selectedApp === 'travail' && <Briefcase className="w-8 h-8 text-white" />}
                          </div>
                          <div>
                            <h2 className="text-2xl font-bold text-gray-900">{config.name}</h2>
                            <p className="text-gray-600">{config.description}</p>
                            <p className="text-sm text-gray-500 mt-1">
                              🌐 {config.domain} • 
                              <Badge className={`ml-2 ${config.enabled ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>
                                {config.enabled ? 'Actif' : 'Inactif'}
                              </Badge>
                            </p>
                          </div>
                        </div>
                        <Switch
                          checked={config.enabled}
                          onCheckedChange={(checked) => updateCurrentConfig({ enabled: checked })}
                        />
                      </div>
                    </CardContent>
                  </Card>

                  {/* Métriques principales */}
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                    {metrics.map((metric) => (
                      <Card key={metric.title}>
                        <CardContent className="p-6">
                          <div className="flex items-center justify-between">
                            <div>
                              <p className="text-sm font-medium text-gray-600">{metric.title}</p>
                              <p className="text-3xl font-bold text-gray-900">{metric.value}</p>
                            </div>
                            <div className={`p-3 rounded-full ${metric.color}`}>
                              <metric.icon className="w-6 h-6 text-white" />
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>

                  {/* Actions rapides */}
                  <Card>
                    <CardHeader>
                      <CardTitle>Actions Rapides</CardTitle>
                      <CardDescription>
                        Accès direct aux fonctionnalités principales de {config.name}
                      </CardDescription>
                    </CardHeader>
                    <CardContent>
                      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                        <Button
                          variant="outline"
                          className="h-20 flex flex-col gap-2 hover:bg-blue-50"
                          onClick={() => setActiveTab('appearance')}
                        >
                          <Palette className="w-5 h-5" />
                          <span className="text-xs">Apparence</span>
                        </Button>
                        <Button
                          variant="outline"
                          className="h-20 flex flex-col gap-2 hover:bg-green-50"
                          onClick={() => setActiveTab('features')}
                        >
                          <Settings className="w-5 h-5" />
                          <span className="text-xs">Fonctionnalités</span>
                        </Button>
                        <Button
                          variant="outline"
                          className="h-20 flex flex-col gap-2 hover:bg-purple-50"
                          onClick={() => setActiveTab('content')}
                        >
                          <FileText className="w-5 h-5" />
                          <span className="text-xs">Contenu</span>
                        </Button>
                        <Button
                          variant="outline"
                          className="h-20 flex flex-col gap-2 hover:bg-orange-50"
                          onClick={() => setActiveTab('analytics')}
                        >
                          <TrendingUp className="w-5 h-5" />
                          <span className="text-xs">Analytics</span>
                        </Button>
                      </div>
                    </CardContent>
                  </Card>
                </>
              );
            })()}
          </TabsContent>

          {/* Onglet Apparence */}
          <TabsContent value="appearance" className="space-y-6">
            {(() => {
              const config = getCurrentConfig();
              if (!config) return null;

              return (
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  {/* Configuration de l'identité */}
                  <Card>
                    <CardHeader>
                      <CardTitle>Identité de l'Application</CardTitle>
                      <CardDescription>
                        Nom, sous-titre et description de {config.name}
                      </CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div>
                        <Label>Nom de l'application</Label>
                        <Input
                          value={config.name}
                          onChange={(e) => updateCurrentConfig({ name: e.target.value })}
                        />
                      </div>
                      <div>
                        <Label>Sous-titre</Label>
                        <Input
                          value={config.subtitle}
                          onChange={(e) => updateCurrentConfig({ subtitle: e.target.value })}
                        />
                      </div>
                      <div>
                        <Label>Description</Label>
                        <Textarea
                          value={config.description}
                          onChange={(e) => updateCurrentConfig({ description: e.target.value })}
                          rows={3}
                        />
                      </div>
                      <div>
                        <Label>Domaine</Label>
                        <Input
                          value={config.domain}
                          onChange={(e) => updateCurrentConfig({ domain: e.target.value })}
                        />
                      </div>
                    </CardContent>
                  </Card>

                  {/* Configuration des couleurs */}
                  <Card>
                    <CardHeader>
                      <CardTitle>Palette de Couleurs</CardTitle>
                      <CardDescription>
                        Personnalisation de l'identité visuelle
                      </CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="grid grid-cols-1 gap-4">
                        <div>
                          <Label>Couleur Primaire</Label>
                          <div className="flex items-center space-x-3 mt-2">
                            <input
                              type="color"
                              value={config.primaryColor}
                              onChange={(e) => updateCurrentConfig({ primaryColor: e.target.value })}
                              className="w-12 h-12 rounded border cursor-pointer"
                            />
                            <div className="flex-1">
                              <Input
                                value={config.primaryColor}
                                onChange={(e) => updateCurrentConfig({ primaryColor: e.target.value })}
                                className="font-mono"
                              />
                            </div>
                          </div>
                        </div>
                        <div>
                          <Label>Couleur Secondaire</Label>
                          <div className="flex items-center space-x-3 mt-2">
                            <input
                              type="color"
                              value={config.secondaryColor}
                              onChange={(e) => updateCurrentConfig({ secondaryColor: e.target.value })}
                              className="w-12 h-12 rounded border cursor-pointer"
                            />
                            <div className="flex-1">
                              <Input
                                value={config.secondaryColor}
                                onChange={(e) => updateCurrentConfig({ secondaryColor: e.target.value })}
                                className="font-mono"
                              />
                            </div>
                          </div>
                        </div>
                        <div>
                          <Label>Couleur d'Accent</Label>
                          <div className="flex items-center space-x-3 mt-2">
                            <input
                              type="color"
                              value={config.accentColor}
                              onChange={(e) => updateCurrentConfig({ accentColor: e.target.value })}
                              className="w-12 h-12 rounded border cursor-pointer"
                            />
                            <div className="flex-1">
                              <Input
                                value={config.accentColor}
                                onChange={(e) => updateCurrentConfig({ accentColor: e.target.value })}
                                className="font-mono"
                              />
                            </div>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  {/* Gestion des logos */}
                  <Card>
                    <CardHeader>
                      <CardTitle>Logos et Assets</CardTitle>
                      <CardDescription>
                        Upload et gestion des éléments visuels
                      </CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div>
                        <Label>Logo Principal</Label>
                        <div className="mt-2 p-4 border-2 border-dashed border-gray-300 rounded-lg">
                          <div className="flex items-center justify-center space-x-4">
                            <div 
                              className="w-16 h-16 rounded-lg flex items-center justify-center"
                              style={{ backgroundColor: config.primaryColor }}
                            >
                              {selectedApp === 'administration' && <Shield className="w-8 h-8 text-white" />}
                              {selectedApp === 'demarche' && <FileText className="w-8 h-8 text-white" />}
                              {selectedApp === 'travail' && <Briefcase className="w-8 h-8 text-white" />}
                            </div>
                            <div className="text-sm text-gray-600">
                              <p>Format: PNG, SVG</p>
                              <p>Taille: 512x512px</p>
                            </div>
                          </div>
                          <div className="mt-3 flex justify-center">
                            <Button variant="outline" size="sm">
                              <Upload className="w-4 h-4 mr-2" />
                              Changer le logo
                            </Button>
                          </div>
                        </div>
                      </div>
                      <div>
                        <Label>Favicon</Label>
                        <div className="mt-2 flex items-center space-x-3">
                          <div className="w-8 h-8 bg-gray-100 rounded flex items-center justify-center">
                            <Image className="w-4 h-4 text-gray-400" />
                          </div>
                          <Button variant="outline" size="sm">
                            Changer favicon
                          </Button>
                        </div>
                      </div>
                    </CardContent>
                  </Card>

                  {/* Aperçu en temps réel */}
                  <Card>
                    <CardHeader>
                      <CardTitle>Aperçu en Temps Réel</CardTitle>
                      <CardDescription>
                        Prévisualisation des modifications
                      </CardDescription>
                    </CardHeader>
                    <CardContent>
                      <div 
                        className="p-6 rounded-lg border"
                        style={{
                          background: `linear-gradient(135deg, ${config.primaryColor}20, ${config.secondaryColor}20)`
                        }}
                      >
                        <div className="flex items-center space-x-4 mb-4">
                          <div 
                            className="w-12 h-12 rounded-lg flex items-center justify-center"
                            style={{ backgroundColor: config.primaryColor }}
                          >
                            {selectedApp === 'administration' && <Shield className="w-6 h-6 text-white" />}
                            {selectedApp === 'demarche' && <FileText className="w-6 h-6 text-white" />}
                            {selectedApp === 'travail' && <Briefcase className="w-6 h-6 text-white" />}
                          </div>
                          <div>
                            <h3 className="text-xl font-bold" style={{ color: config.primaryColor }}>
                              {config.name}
                            </h3>
                            <p className="text-sm" style={{ color: config.accentColor }}>
                              {config.subtitle}
                            </p>
                          </div>
                        </div>
                        <p className="text-gray-600 text-sm">{config.description}</p>
                        <div className="mt-3 flex space-x-2">
                          <div 
                            className="w-4 h-4 rounded-full" 
                            style={{ backgroundColor: config.primaryColor }}
                          ></div>
                          <div 
                            className="w-4 h-4 rounded-full" 
                            style={{ backgroundColor: config.secondaryColor }}
                          ></div>
                          <div 
                            className="w-4 h-4 rounded-full" 
                            style={{ backgroundColor: config.accentColor }}
                          ></div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </div>
              );
            })()}
          </TabsContent>

          {/* Onglet Fonctionnalités */}
          <TabsContent value="features" className="space-y-6">
            {(() => {
              const config = getCurrentConfig();
              if (!config) return null;

              return (
                <Card>
                  <CardHeader>
                    <CardTitle>Gestion des Fonctionnalités</CardTitle>
                    <CardDescription>
                      Activer ou désactiver les modules de {config.name}
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      {Object.entries(config.features).map(([key, enabled]) => {
                        let featureInfo = { name: key, description: 'Fonctionnalité' };
                        
                        // Descriptions spécifiques selon l'application
                        if (selectedApp === 'administration') {
                          const adminFeatures = {
                            userManagement: { name: 'Gestion Utilisateurs', description: 'Création et gestion des comptes utilisateurs' },
                            organizationManagement: { name: 'Gestion Organismes', description: 'Administration des organismes publics' },
                            analytics: { name: 'Analytics', description: 'Tableaux de bord et statistiques' },
                            reporting: { name: 'Rapports', description: 'Génération de rapports détaillés' },
                            apiAccess: { name: 'Accès API', description: 'Interface de programmation pour intégrations' }
                          };
                          featureInfo = adminFeatures[key] || featureInfo;
                        } else if (selectedApp === 'demarche') {
                          const demarcheFeatures = {
                            onlineServices: { name: 'Services en Ligne', description: 'Démarches administratives dématérialisées' },
                            documentTracking: { name: 'Suivi Documents', description: 'Traçabilité des documents administratifs' },
                            citizenPortal: { name: 'Portail Citoyen', description: 'Interface dédiée aux citoyens' },
                            mobileApp: { name: 'Application Mobile', description: 'Version mobile de DEMARCHE.GA' },
                            notifications: { name: 'Notifications', description: 'Alertes et notifications automatiques' }
                          };
                          featureInfo = demarcheFeatures[key] || featureInfo;
                        } else if (selectedApp === 'travail') {
                          const travailFeatures = {
                            candidatureEnLigne: { name: 'Candidatures en Ligne', description: 'Système de candidature dématérialisé' },
                            uploadCV: { name: 'Upload de CV', description: 'Téléchargement de CV au format PDF/DOC' },
                            notifications: { name: 'Notifications', description: 'Alertes email pour candidats et recruteurs' },
                            statistiques: { name: 'Statistiques', description: 'Tableaux de bord analytiques' },
                            filtresAvances: { name: 'Filtres Avancés', description: 'Recherche multicritères avancée' },
                            exportOffres: { name: 'Export Offres', description: 'Export PDF/Excel des offres d\'emploi' }
                          };
                          featureInfo = travailFeatures[key] || featureInfo;
                        }

                        return (
                          <div key={key} className="flex items-center justify-between p-4 rounded-lg bg-gray-50 hover:bg-gray-100 transition-colors">
                            <div className="flex-1">
                              <h4 className="font-medium text-gray-900">{featureInfo.name}</h4>
                              <p className="text-sm text-gray-600">{featureInfo.description}</p>
                            </div>
                            <Switch
                              checked={enabled}
                              onCheckedChange={(checked) => {
                                updateCurrentConfig({
                                  features: { ...config.features, [key]: checked }
                                });
                              }}
                            />
                          </div>
                        );
                      })}
                    </div>

                    {/* Configuration spéciale pour TRAVAIL.GA */}
                    {selectedApp === 'travail' && (
                      <div className="mt-8 pt-6 border-t">
                        <h3 className="text-lg font-semibold mb-4">Paramètres Spécialisés TRAVAIL.GA</h3>
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                          <div>
                            <Label>Durée des offres (jours)</Label>
                            <Input
                              type="number"
                              value={config.parametres?.dureeOffre || 30}
                              onChange={(e) => updateCurrentConfig({
                                parametres: { ...config.parametres, dureeOffre: parseInt(e.target.value) || 30 }
                              })}
                            />
                          </div>
                          <div>
                            <Label>Taille max CV (MB)</Label>
                            <Input
                              type="number"
                              value={config.parametres?.tailleMaxCV || 5}
                              onChange={(e) => updateCurrentConfig({
                                parametres: { ...config.parametres, tailleMaxCV: parseInt(e.target.value) || 5 }
                              })}
                            />
                          </div>
                          <div>
                            <Label>Formats CV acceptés</Label>
                            <div className="flex flex-wrap gap-2 mt-2">
                              {(config.parametres?.formatsCV || []).map((format, index) => (
                                <Badge key={index} variant="outline">{format}</Badge>
                              ))}
                            </div>
                          </div>
                        </div>
                      </div>
                    )}
                  </CardContent>
                </Card>
              );
            })()}
          </TabsContent>

          {/* Onglet Contenu */}
          <TabsContent value="content" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Gestion du Contenu</CardTitle>
                <CardDescription>
                  Pages, articles et contenus de l'application
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="text-center py-12">
                  <FileText className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 mb-2">Gestion de Contenu</h3>
                  <p className="text-gray-600 mb-4">
                    Fonctionnalité en cours de développement
                  </p>
                  <Button variant="outline">
                    <Plus className="w-4 h-4 mr-2" />
                    Ajouter du contenu
                  </Button>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Onglet Analytics */}
          <TabsContent value="analytics" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Analytics et Statistiques</CardTitle>
                <CardDescription>
                  Analyse de performance et métriques détaillées
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="text-center py-12">
                  <TrendingUp className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 mb-2">Analytics Avancées</h3>
                  <p className="text-gray-600 mb-4">
                    Tableaux de bord analytiques en cours de développement
                  </p>
                  <Button variant="outline">
                    <Activity className="w-4 h-4 mr-2" />
                    Voir les métriques
                  </Button>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Onglet Paramètres */}
          <TabsContent value="settings" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>Paramètres Système</CardTitle>
                  <CardDescription>
                    Configuration générale et sécurité
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <Label>Mode Maintenance</Label>
                      <p className="text-sm text-gray-600">Désactiver temporairement l'application</p>
                    </div>
                    <Switch />
                  </div>
                  <div className="flex items-center justify-between">
                    <div>
                      <Label>Logs Détaillés</Label>
                      <p className="text-sm text-gray-600">Enregistrer les événements système</p>
                    </div>
                    <Switch defaultChecked />
                  </div>
                  <div className="flex items-center justify-between">
                    <div>
                      <Label>Cache Activé</Label>
                      <p className="text-sm text-gray-600">Améliorer les performances</p>
                    </div>
                    <Switch defaultChecked />
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Export et Sauvegarde</CardTitle>
                  <CardDescription>
                    Gestion des données de configuration
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <Button 
                    className="w-full" 
                    variant="outline"
                    onClick={handleExportConfig}
                  >
                    <Upload className="w-4 h-4 mr-2" />
                    Exporter la Configuration
                  </Button>
                  <Button className="w-full" variant="outline">
                    <Download className="w-4 h-4 mr-2" />
                    Importer une Configuration
                  </Button>
                  <Button className="w-full" variant="outline">
                    <RefreshCw className="w-4 h-4 mr-2" />
                    Réinitialiser aux Défauts
                  </Button>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>
        )}
      </div>
    </div>
  );
}
                      { title: 'Config TRAVAIL.GA', tab: 'travail', icon: Briefcase, color: 'bg-blue-100 text-blue-700 hover:bg-blue-200' },
                      { title: 'Modifier Menus', tab: 'menus', icon: Menu, color: 'bg-green-100 text-green-700 hover:bg-green-200' },
                      { title: 'Nouvelle Actualité', tab: 'news', icon: Bell, color: 'bg-orange-100 text-orange-700 hover:bg-orange-200' },
                      { title: 'Paramètres', tab: 'settings', icon: Settings, color: 'bg-purple-100 text-purple-700 hover:bg-purple-200' }
                    ].map((action) => (
                      <Button
                        key={action.title}
                        variant="outline"
                        className={`h-20 flex flex-col gap-2 ${action.color} border-0`}
                        onClick={() => setActiveTab(action.tab)}
                      >
                        <action.icon className="w-5 h-5" />
                        <span className="text-xs font-medium">{action.title}</span>
                      </Button>
                    ))}
                  </div>
                </CardContent>
              </Card>

              {/* Statut du Système */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Shield className="w-5 h-5" />
                    Statut du Système
                  </CardTitle>
                  <CardDescription>
                    État de santé des applications
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  {[
                    { app: 'ADMINISTRATION.GA', status: 'En ligne', uptime: '99.9%', color: 'bg-green-100 text-green-800' },
                    { app: 'DEMARCHE.GA', status: 'En ligne', uptime: '99.8%', color: 'bg-green-100 text-green-800' },
                    { app: 'TRAVAIL.GA', status: travailGASettings.enabled ? 'En ligne' : 'Hors ligne', uptime: '99.7%', color: travailGASettings.enabled ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800' }
                  ].map((app) => (
                    <div key={app.app} className="flex items-center justify-between p-3 rounded-lg bg-gray-50">
                      <div>
                        <p className="font-medium text-gray-900">{app.app}</p>
                        <p className="text-sm text-gray-600">Uptime: {app.uptime}</p>
                      </div>
                      <Badge className={app.color}>
                        {app.status}
                      </Badge>
                    </div>
                  ))}
                </CardContent>
              </Card>
            </div>

            {/* Activité Récente */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Activity className="w-5 h-5" />
                  Activité Récente
                </CardTitle>
                <CardDescription>
                  Dernières modifications apportées aux applications
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {[
                    { action: 'Logo ADMINISTRATION.GA mis à jour', user: 'Super Admin', time: 'Il y a 2 heures', type: 'logo' },
                    { action: 'Nouveau menu ajouté à DEMARCHE.GA', user: 'Super Admin', time: 'Il y a 1 jour', type: 'menu' },
                    { action: 'Actualité publiée sur la page d\'accueil', user: 'Super Admin', time: 'Il y a 2 jours', type: 'content' },
                    { action: 'Paramètres de sécurité modifiés', user: 'Super Admin', time: 'Il y a 3 jours', type: 'system' }
                  ].map((activity, index) => (
                    <div key={index} className="flex items-center space-x-4 p-3 rounded-lg hover:bg-gray-50">
                      <div className={`p-2 rounded-full ${
                        activity.type === 'logo' ? 'bg-blue-100' :
                        activity.type === 'menu' ? 'bg-green-100' :
                        activity.type === 'content' ? 'bg-orange-100' : 'bg-purple-100'
                      }`}>
                        {activity.type === 'logo' && <Image className="w-4 h-4 text-blue-600" />}
                        {activity.type === 'menu' && <Menu className="w-4 h-4 text-green-600" />}
                        {activity.type === 'content' && <FileText className="w-4 h-4 text-orange-600" />}
                        {activity.type === 'system' && <Shield className="w-4 h-4 text-purple-600" />}
                      </div>
                      <div className="flex-1">
                        <p className="text-sm font-medium text-gray-900">{activity.action}</p>
                        <p className="text-xs text-gray-500">Par {activity.user} • {activity.time}</p>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Onglet Logos & Assets */}
          <TabsContent value="logos" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* ADMINISTRATION.GA */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <Image className="w-5 h-5" />
                    <span>ADMINISTRATION.GA</span>
                  </CardTitle>
                  <CardDescription>
                    Gestion des logos et assets visuels pour l'application d'administration
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  {/* Logo principal */}
                  <div>
                    <Label>Logo Principal</Label>
                    <div className="mt-2 p-4 border-2 border-dashed border-gray-300 rounded-lg">
                      <div className="flex items-center justify-center space-x-4">
                        <LogoAdministrationGA width={48} height={48} />
                        <div className="text-sm text-gray-600">
                          <p>Format: PNG, SVG</p>
                          <p>Taille recommandée: 512x512px</p>
                        </div>
                      </div>
                      <div className="mt-3 flex justify-center">
                        <Label htmlFor="logo-admin" className="cursor-pointer">
                          <Button variant="outline" size="sm" asChild>
                            <span>
                              <Upload className="w-4 h-4 mr-2" />
                              Changer le logo
                            </span>
                          </Button>
                        </Label>
                        <Input
                          id="logo-admin"
                          type="file"
                          accept="image/*"
                          className="hidden"
                          onChange={(e) => handleFileUpload(e, 'administrationGA')}
                        />
                      </div>
                    </div>
                  </div>

                  {/* Favicon */}
                  <div>
                    <Label>Favicon</Label>
                    <div className="mt-2 flex items-center space-x-3">
                      <div className="w-8 h-8 bg-gray-100 rounded flex items-center justify-center">
                        <Image className="w-4 h-4 text-gray-400" />
                      </div>
                      <div className="flex-1">
                        <Label htmlFor="favicon-admin" className="cursor-pointer">
                          <Button variant="outline" size="sm" asChild>
                            <span>Changer favicon</span>
                          </Button>
                        </Label>
                        <Input
                          id="favicon-admin"
                          type="file"
                          accept=".ico,.png"
                          className="hidden"
                          onChange={(e) => handleFileUpload(e, 'favicon')}
                        />
                      </div>
                    </div>
                  </div>

                  {/* Couleurs du thème */}
                  <div className="space-y-3">
                    <Label>Couleurs du Thème</Label>
                    <div className="grid grid-cols-3 gap-3">
                      <div>
                        <Label className="text-xs">Primaire</Label>
                        <div className="flex items-center space-x-2">
                          <input
                            type="color"
                            value={appSettings.administrationGA.primaryColor}
                            onChange={(e) => {
                              setAppSettings(prev => ({
                                ...prev,
                                administrationGA: {
                                  ...prev.administrationGA,
                                  primaryColor: e.target.value
                                }
                              }));
                              setHasChanges(true);
                            }}
                            className="w-8 h-8 rounded border"
                          />
                          <span className="text-xs font-mono">{appSettings.administrationGA.primaryColor}</span>
                        </div>
                      </div>
                      <div>
                        <Label className="text-xs">Secondaire</Label>
                        <div className="flex items-center space-x-2">
                          <input
                            type="color"
                            value={appSettings.administrationGA.secondaryColor}
                            onChange={(e) => {
                              setAppSettings(prev => ({
                                ...prev,
                                administrationGA: {
                                  ...prev.administrationGA,
                                  secondaryColor: e.target.value
                                }
                              }));
                              setHasChanges(true);
                            }}
                            className="w-8 h-8 rounded border"
                          />
                          <span className="text-xs font-mono">{appSettings.administrationGA.secondaryColor}</span>
                        </div>
                      </div>
                      <div>
                        <Label className="text-xs">Accent</Label>
                        <div className="flex items-center space-x-2">
                          <input
                            type="color"
                            value={appSettings.administrationGA.accentColor}
                            onChange={(e) => {
                              setAppSettings(prev => ({
                                ...prev,
                                administrationGA: {
                                  ...prev.administrationGA,
                                  accentColor: e.target.value
                                }
                              }));
                              setHasChanges(true);
                            }}
                            className="w-8 h-8 rounded border"
                          />
                          <span className="text-xs font-mono">{appSettings.administrationGA.accentColor}</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* DEMARCHE.GA */}
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <Globe className="w-5 h-5" />
                    <span>DEMARCHE.GA</span>
                  </CardTitle>
                  <CardDescription>
                    Gestion des logos et assets visuels pour l'application citoyenne
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  {/* Logo principal DEMARCHE.GA */}
                  <div>
                    <Label>Logo Principal</Label>
                    <div className="mt-2 p-4 border-2 border-dashed border-gray-300 rounded-lg">
                      <div className="flex items-center justify-center space-x-4">
                        <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                          <Globe className="w-6 h-6 text-blue-600" />
                        </div>
                        <div className="text-sm text-gray-600">
                          <p>Format: PNG, SVG</p>
                          <p>Taille recommandée: 512x512px</p>
                        </div>
                      </div>
                      <div className="mt-3 flex justify-center">
                        <Label htmlFor="logo-demarche" className="cursor-pointer">
                          <Button variant="outline" size="sm" asChild>
                            <span>
                              <Upload className="w-4 h-4 mr-2" />
                              Changer le logo
                            </span>
                          </Button>
                        </Label>
                        <Input
                          id="logo-demarche"
                          type="file"
                          accept="image/*"
                          className="hidden"
                          onChange={(e) => handleFileUpload(e, 'demarcheGA')}
                        />
                      </div>
                    </div>
                  </div>

                  {/* Couleurs du thème DEMARCHE.GA */}
                  <div className="space-y-3">
                    <Label>Couleurs du Thème</Label>
                    <div className="grid grid-cols-3 gap-3">
                      <div>
                        <Label className="text-xs">Primaire</Label>
                        <div className="flex items-center space-x-2">
                          <input
                            type="color"
                            value={appSettings.demarcheGA.primaryColor}
                            onChange={(e) => {
                              setAppSettings(prev => ({
                                ...prev,
                                demarcheGA: {
                                  ...prev.demarcheGA,
                                  primaryColor: e.target.value
                                }
                              }));
                              setHasChanges(true);
                            }}
                            className="w-8 h-8 rounded border"
                          />
                          <span className="text-xs font-mono">{appSettings.demarcheGA.primaryColor}</span>
                        </div>
                      </div>
                      <div>
                        <Label className="text-xs">Secondaire</Label>
                        <div className="flex items-center space-x-2">
                          <input
                            type="color"
                            value={appSettings.demarcheGA.secondaryColor}
                            onChange={(e) => {
                              setAppSettings(prev => ({
                                ...prev,
                                demarcheGA: {
                                  ...prev.demarcheGA,
                                  secondaryColor: e.target.value
                                }
                              }));
                              setHasChanges(true);
                            }}
                            className="w-8 h-8 rounded border"
                          />
                          <span className="text-xs font-mono">{appSettings.demarcheGA.secondaryColor}</span>
                        </div>
                      </div>
                      <div>
                        <Label className="text-xs">Accent</Label>
                        <div className="flex items-center space-x-2">
                          <input
                            type="color"
                            value={appSettings.demarcheGA.accentColor}
                            onChange={(e) => {
                              setAppSettings(prev => ({
                                ...prev,
                                demarcheGA: {
                                  ...prev.demarcheGA,
                                  accentColor: e.target.value
                                }
                              }));
                              setHasChanges(true);
                            }}
                            className="w-8 h-8 rounded border"
                          />
                          <span className="text-xs font-mono">{appSettings.demarcheGA.accentColor}</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Aperçu des logos */}
            <Card>
              <CardHeader>
                <CardTitle>Aperçu des Modifications</CardTitle>
                <CardDescription>
                  Visualisation en temps réel des changements apportés
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-3">
                    <h4 className="font-medium">ADMINISTRATION.GA</h4>
                    <div
                      className="p-4 rounded-lg border"
                      style={{
                        background: `linear-gradient(135deg, ${appSettings.administrationGA.primaryColor}, ${appSettings.administrationGA.secondaryColor}, ${appSettings.administrationGA.accentColor})`
                      }}
                    >
                      <div className="flex items-center space-x-3 text-white">
                        <LogoAdministrationGA width={32} height={32} />
                        <div>
                          <div className="font-bold">{appSettings.administrationGA.name}</div>
                          <div className="text-sm opacity-90">{appSettings.administrationGA.subtitle}</div>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div className="space-y-3">
                    <h4 className="font-medium">DEMARCHE.GA</h4>
                    <div
                      className="p-4 rounded-lg border"
                      style={{
                        background: `linear-gradient(135deg, ${appSettings.demarcheGA.primaryColor}, ${appSettings.demarcheGA.secondaryColor}, ${appSettings.demarcheGA.accentColor})`
                      }}
                    >
                      <div className="flex items-center space-x-3 text-white">
                        <div className="w-8 h-8 bg-white/20 rounded-lg flex items-center justify-center">
                          <Globe className="w-4 h-4" />
                        </div>
                        <div>
                          <div className="font-bold">{appSettings.demarcheGA.name}</div>
                          <div className="text-sm opacity-90">{appSettings.demarcheGA.subtitle}</div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Onglet Apparence */}
          <TabsContent value="appearance" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Paramètres d'Apparence</CardTitle>
                <CardDescription>
                  Configuration des thèmes et styles visuels des applications
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                {/* Configuration ADMINISTRATION.GA */}
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold">ADMINISTRATION.GA</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label>Nom de l'application</Label>
                      <Input
                        value={appSettings.administrationGA.name}
                        onChange={(e) => {
                          setAppSettings(prev => ({
                            ...prev,
                            administrationGA: { ...prev.administrationGA, name: e.target.value }
                          }));
                          setHasChanges(true);
                        }}
                      />
                    </div>
                    <div>
                      <Label>Sous-titre</Label>
                      <Input
                        value={appSettings.administrationGA.subtitle}
                        onChange={(e) => {
                          setAppSettings(prev => ({
                            ...prev,
                            administrationGA: { ...prev.administrationGA, subtitle: e.target.value }
                          }));
                          setHasChanges(true);
                        }}
                      />
                    </div>
                    <div className="md:col-span-2">
                      <Label>Description</Label>
                      <Textarea
                        value={appSettings.administrationGA.description}
                        onChange={(e) => {
                          setAppSettings(prev => ({
                            ...prev,
                            administrationGA: { ...prev.administrationGA, description: e.target.value }
                          }));
                          setHasChanges(true);
                        }}
                        rows={3}
                      />
                    </div>
                  </div>
                </div>

                {/* Configuration DEMARCHE.GA */}
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold">DEMARCHE.GA</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label>Nom de l'application</Label>
                      <Input
                        value={appSettings.demarcheGA.name}
                        onChange={(e) => {
                          setAppSettings(prev => ({
                            ...prev,
                            demarcheGA: { ...prev.demarcheGA, name: e.target.value }
                          }));
                          setHasChanges(true);
                        }}
                      />
                    </div>
                    <div>
                      <Label>Sous-titre</Label>
                      <Input
                        value={appSettings.demarcheGA.subtitle}
                        onChange={(e) => {
                          setAppSettings(prev => ({
                            ...prev,
                            demarcheGA: { ...prev.demarcheGA, subtitle: e.target.value }
                          }));
                          setHasChanges(true);
                        }}
                      />
                    </div>
                    <div className="md:col-span-2">
                      <Label>Description</Label>
                      <Textarea
                        value={appSettings.demarcheGA.description}
                        onChange={(e) => {
                          setAppSettings(prev => ({
                            ...prev,
                            demarcheGA: { ...prev.demarcheGA, description: e.target.value }
                          }));
                          setHasChanges(true);
                        }}
                        rows={3}
                      />
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Onglet TRAVAIL.GA */}
          <TabsContent value="travail" className="space-y-6">
            {/* Vue d'ensemble TRAVAIL.GA */}
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              {/* Statistiques en temps réel */}
              <Card className="lg:col-span-2">
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <Briefcase className="w-5 h-5" />
                    <span>Statistiques TRAVAIL.GA</span>
                  </CardTitle>
                  <CardDescription>
                    Métriques en temps réel de la plateforme d'emploi
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                    {[
                      { title: 'Offres Actives', value: travailGAStats.offresActives, icon: Briefcase, color: 'text-blue-600' },
                      { title: 'Candidatures', value: travailGAStats.candidaturesRecues, icon: Users, color: 'text-green-600' },
                      { title: 'Offres Expirées', value: travailGAStats.offresExpirées, icon: Clock, color: 'text-red-600' },
                      { title: 'Organismes', value: travailGAStats.organismeRecruteurs, icon: Building2, color: 'text-purple-600' },
                      { title: 'Candidats', value: travailGAStats.candidatsInscrits, icon: Users, color: 'text-orange-600' },
                      { title: 'Taux Conv.', value: `${travailGAStats.tauxConversion}%`, icon: TrendingUp, color: 'text-indigo-600' }
                    ].map((stat) => (
                      <div key={stat.title} className="p-4 rounded-lg bg-gray-50">
                        <div className="flex items-center space-x-3">
                          <stat.icon className={`w-8 h-8 ${stat.color}`} />
                          <div>
                            <p className="text-2xl font-bold text-gray-900">{stat.value}</p>
                            <p className="text-sm text-gray-600">{stat.title}</p>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              {/* Contrôles rapides */}
              <Card>
                <CardHeader>
                  <CardTitle>Contrôles Rapides</CardTitle>
                  <CardDescription>
                    Actions principales pour TRAVAIL.GA
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <Label>Statut de la plateforme</Label>
                      <p className="text-sm text-gray-600">Activer/désactiver TRAVAIL.GA</p>
                    </div>
                    <Switch
                      checked={travailGASettings.enabled}
                      onCheckedChange={(checked) => {
                        setTravailGASettings(prev => ({ ...prev, enabled: checked }));
                        setHasChanges(true);
                      }}
                    />
                  </div>
                  <Button className="w-full" variant="outline">
                    <Plus className="w-4 h-4 mr-2" />
                    Nouvelle Offre d'Emploi
                  </Button>
                  <Button className="w-full" variant="outline">
                    <TrendingUp className="w-4 h-4 mr-2" />
                    Rapport d'Activité
                  </Button>
                  <Button className="w-full" variant="outline">
                    <Users className="w-4 h-4 mr-2" />
                    Gérer les Candidatures
                  </Button>
                </CardContent>
              </Card>
            </div>

            {/* Configuration détaillée */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Paramètres généraux */}
              <Card>
                <CardHeader>
                  <CardTitle>Configuration Générale</CardTitle>
                  <CardDescription>
                    Paramètres principaux de TRAVAIL.GA
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <Label>Nom de la plateforme</Label>
                    <Input
                      value={travailGASettings.nom}
                      onChange={(e) => {
                        setTravailGASettings(prev => ({ ...prev, nom: e.target.value }));
                        setHasChanges(true);
                      }}
                    />
                  </div>
                  <div>
                    <Label>Description</Label>
                    <Textarea
                      value={travailGASettings.description}
                      onChange={(e) => {
                        setTravailGASettings(prev => ({ ...prev, description: e.target.value }));
                        setHasChanges(true);
                      }}
                      rows={3}
                    />
                  </div>
                  <div>
                    <Label>Sous-domaine</Label>
                    <div className="flex items-center space-x-2">
                      <Input
                        value={travailGASettings.sousdomaine}
                        onChange={(e) => {
                          setTravailGASettings(prev => ({ ...prev, sousdomaine: e.target.value }));
                          setHasChanges(true);
                        }}
                        className="flex-1"
                      />
                      <span className="text-sm text-gray-500">.administration.ga</span>
                    </div>
                  </div>
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <Label>Couleur Primaire</Label>
                      <div className="flex items-center space-x-2">
                        <input
                          type="color"
                          value={travailGASettings.couleurPrimaire}
                          onChange={(e) => {
                            setTravailGASettings(prev => ({ ...prev, couleurPrimaire: e.target.value }));
                            setHasChanges(true);
                          }}
                          className="w-8 h-8 rounded border"
                        />
                        <span className="text-xs font-mono">{travailGASettings.couleurPrimaire}</span>
                      </div>
                    </div>
                    <div>
                      <Label>Couleur Secondaire</Label>
                      <div className="flex items-center space-x-2">
                        <input
                          type="color"
                          value={travailGASettings.couleurSecondaire}
                          onChange={(e) => {
                            setTravailGASettings(prev => ({ ...prev, couleurSecondaire: e.target.value }));
                            setHasChanges(true);
                          }}
                          className="w-8 h-8 rounded border"
                        />
                        <span className="text-xs font-mono">{travailGASettings.couleurSecondaire}</span>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Fonctionnalités */}
              <Card>
                <CardHeader>
                  <CardTitle>Fonctionnalités</CardTitle>
                  <CardDescription>
                    Activer/désactiver les modules de TRAVAIL.GA
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  {[
                    { key: 'candidatureEnLigne', label: 'Candidatures en ligne', description: 'Permettre aux candidats de postuler directement' },
                    { key: 'uploadCV', label: 'Upload de CV', description: 'Téléchargement de CV au format PDF/DOC' },
                    { key: 'notifications', label: 'Notifications', description: 'Notifications email automatiques' },
                    { key: 'statistiques', label: 'Statistiques', description: 'Tableau de bord analytique' },
                    { key: 'filtresAvances', label: 'Filtres avancés', description: 'Recherche multicritères' },
                    { key: 'exportOffres', label: 'Export des offres', description: 'Export PDF/Excel des offres' }
                  ].map((feature) => (
                    <div key={feature.key} className="flex items-center justify-between p-3 rounded-lg bg-gray-50">
                      <div>
                        <p className="font-medium text-gray-900">{feature.label}</p>
                        <p className="text-sm text-gray-600">{feature.description}</p>
                      </div>
                      <Switch
                        checked={travailGASettings.features[feature.key as keyof typeof travailGASettings.features]}
                        onCheckedChange={(checked) => {
                          setTravailGASettings(prev => ({
                            ...prev,
                            features: { ...prev.features, [feature.key]: checked }
                          }));
                          setHasChanges(true);
                        }}
                      />
                    </div>
                  ))}
                </CardContent>
              </Card>
            </div>

            {/* Paramètres techniques */}
            <Card>
              <CardHeader>
                <CardTitle>Paramètres Techniques</CardTitle>
                <CardDescription>
                  Configuration technique et limites de la plateforme
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  <div>
                    <Label>Durée par défaut des offres (jours)</Label>
                    <Input
                      type="number"
                      value={travailGASettings.parametres.dureeOffre}
                      onChange={(e) => {
                        setTravailGASettings(prev => ({
                          ...prev,
                          parametres: { ...prev.parametres, dureeOffre: parseInt(e.target.value) || 30 }
                        }));
                        setHasChanges(true);
                      }}
                    />
                  </div>
                  <div>
                    <Label>Taille max CV (MB)</Label>
                    <Input
                      type="number"
                      value={travailGASettings.parametres.tailleMaxCV}
                      onChange={(e) => {
                        setTravailGASettings(prev => ({
                          ...prev,
                          parametres: { ...prev.parametres, tailleMaxCV: parseInt(e.target.value) || 5 }
                        }));
                        setHasChanges(true);
                      }}
                    />
                  </div>
                  <div>
                    <Label>Formats de CV acceptés</Label>
                    <div className="space-y-2">
                      {travailGASettings.parametres.formatsCV.map((format, index) => (
                        <Badge key={index} variant="outline">{format}</Badge>
                      ))}
                    </div>
                  </div>
                </div>

                <div className="mt-6 grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <Label>Niveaux d'études</Label>
                    <div className="flex flex-wrap gap-2 mt-2">
                      {travailGASettings.parametres.niveauxEtudes.map((niveau, index) => (
                        <Badge key={index} variant="secondary">{niveau}</Badge>
                      ))}
                    </div>
                    <Button variant="outline" size="sm" className="mt-2">
                      <Plus className="w-4 h-4 mr-2" />
                      Ajouter un niveau
                    </Button>
                  </div>
                  <div>
                    <Label>Types de contrats</Label>
                    <div className="flex flex-wrap gap-2 mt-2">
                      {travailGASettings.parametres.typesContrats.map((type, index) => (
                        <Badge key={index} variant="secondary">{type}</Badge>
                      ))}
                    </div>
                    <Button variant="outline" size="sm" className="mt-2">
                      <Plus className="w-4 h-4 mr-2" />
                      Ajouter un type
                    </Button>
                  </div>
                </div>

                <div className="mt-6">
                  <Label>Localisations disponibles</Label>
                  <div className="flex flex-wrap gap-2 mt-2">
                    {travailGASettings.parametres.localisations.map((ville, index) => (
                      <Badge key={index} variant="outline" className="flex items-center gap-1">
                        <MapPin className="w-3 h-3" />
                        {ville}
                      </Badge>
                    ))}
                  </div>
                  <Button variant="outline" size="sm" className="mt-2">
                    <Plus className="w-4 h-4 mr-2" />
                    Ajouter une localisation
                  </Button>
                </div>
              </CardContent>
            </Card>

            {/* Aperçu de la plateforme */}
            <Card>
              <CardHeader>
                <CardTitle>Aperçu de TRAVAIL.GA</CardTitle>
                <CardDescription>
                  Prévisualisation avec les paramètres actuels
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div
                  className="p-6 rounded-lg border-2 border-dashed"
                  style={{
                    background: `linear-gradient(135deg, ${travailGASettings.couleurPrimaire}20, ${travailGASettings.couleurSecondaire}20)`
                  }}
                >
                  <div className="flex items-center space-x-4 mb-4">
                    <div
                      className="w-12 h-12 rounded-lg flex items-center justify-center"
                      style={{ backgroundColor: travailGASettings.couleurPrimaire }}
                    >
                      <Briefcase className="w-6 h-6 text-white" />
                    </div>
                    <div>
                      <h3 className="text-xl font-bold" style={{ color: travailGASettings.couleurPrimaire }}>
                        {travailGASettings.nom}
                      </h3>
                      <p className="text-gray-600">{travailGASettings.description}</p>
                    </div>
                  </div>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div className="p-4 bg-white rounded-lg shadow-sm">
                      <h4 className="font-semibold mb-2">Dernières Offres</h4>
                      <div className="space-y-2">
                        <div className="flex justify-between text-sm">
                          <span>Directeur RH</span>
                          <Badge variant="outline">CDI</Badge>
                        </div>
                        <div className="flex justify-between text-sm">
                          <span>Analyste Programmeur</span>
                          <Badge variant="outline">CDD</Badge>
                        </div>
                      </div>
                    </div>
                    <div className="p-4 bg-white rounded-lg shadow-sm">
                      <h4 className="font-semibold mb-2">Filtres</h4>
                      <div className="space-y-1 text-sm">
                        <p>📍 {travailGASettings.parametres.localisations.length} villes</p>
                        <p>🎓 {travailGASettings.parametres.niveauxEtudes.length} niveaux</p>
                        <p>💼 {travailGASettings.parametres.typesContrats.length} types contrats</p>
                      </div>
                    </div>
                    <div className="p-4 bg-white rounded-lg shadow-sm">
                      <h4 className="font-semibold mb-2">Statistiques</h4>
                      <div className="space-y-1 text-sm">
                        <p>📊 {travailGAStats.offresActives} offres actives</p>
                        <p>👥 {travailGAStats.candidatsInscrits} candidats</p>
                        <p>🏢 {travailGAStats.organismeRecruteurs} organismes</p>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Onglet Menus */}
          <TabsContent value="menus">
            <MenuManager onSave={(menus) => { setHasChanges(true); console.log('Menus saved:', menus); }} />
          </TabsContent>

          {/* Onglet Contenu */}
          <TabsContent value="content">
            <ContentManager onSave={(content) => { setHasChanges(true); console.log('Content saved:', content); }} />
          </TabsContent>

          {/* Onglet Actualités */}
          <TabsContent value="news" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Bell className="w-5 h-5" />
                  <span>Gestion des Actualités</span>
                </CardTitle>
                <CardDescription>
                  Publier et gérer les actualités et annonces pour les applications
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {newsItems.map((item) => (
                    <div key={item.id} className="flex items-center justify-between p-4 border rounded-lg">
                      <div className="flex-1">
                        <h4 className="font-medium">{item.title}</h4>
                        <p className="text-sm text-gray-600 line-clamp-1">{item.content}</p>
                        <div className="flex items-center space-x-2 mt-2">
                          <Badge variant={item.published ? 'default' : 'secondary'}>
                            {item.published ? 'Publié' : 'Brouillon'}
                          </Badge>
                          <Badge variant="outline">{item.category}</Badge>
                          <span className="text-xs text-gray-500">{item.date}</span>
                        </div>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Button variant="ghost" size="sm">
                          <Edit2 className="w-4 h-4" />
                        </Button>
                        <Button variant="ghost" size="sm">
                          <Trash2 className="w-4 h-4 text-red-500" />
                        </Button>
                      </div>
                    </div>
                  ))}
                  <Button className="w-full">
                    <Plus className="w-4 h-4 mr-2" />
                    Ajouter une actualité
                  </Button>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Onglet Paramètres */}
          <TabsContent value="settings" className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>Paramètres Généraux</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <Label>Mode Maintenance</Label>
                    <div className="flex items-center space-x-2 mt-2">
                      <Switch />
                      <span className="text-sm text-gray-600">Activer le mode maintenance</span>
                    </div>
                  </div>
                  <div>
                    <Label>Notifications Email</Label>
                    <div className="flex items-center space-x-2 mt-2">
                      <Switch defaultChecked />
                      <span className="text-sm text-gray-600">Envoyer les notifications par email</span>
                    </div>
                  </div>
                  <div>
                    <Label>Analytics</Label>
                    <div className="flex items-center space-x-2 mt-2">
                      <Switch defaultChecked />
                      <span className="text-sm text-gray-600">Activer le tracking analytics</span>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Sécurité</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <Label>Authentification 2FA</Label>
                    <div className="flex items-center space-x-2 mt-2">
                      <Switch />
                      <span className="text-sm text-gray-600">Exiger la double authentification</span>
                    </div>
                  </div>
                  <div>
                    <Label>Session Timeout</Label>
                    <select className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm">
                      <option value="30">30 minutes</option>
                      <option value="60" defaultChecked>1 heure</option>
                      <option value="120">2 heures</option>
                      <option value="240">4 heures</option>
                    </select>
                  </div>
                  <div>
                    <Label>Logs de Sécurité</Label>
                    <div className="flex items-center space-x-2 mt-2">
                      <Switch defaultChecked />
                      <span className="text-sm text-gray-600">Enregistrer les événements de sécurité</span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}
