generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  type        String
  description String?
  address     String?
  city        String?
  phone       String?
  email       String?
  website     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  postes      postes[]
  users       User[]

  @@map("organizations")
}

model User {
  id                    String         @id @default(cuid())
  email                 String         @unique
  phone                 String?
  firstName             String
  lastName              String
  role                  String         @default("USER")
  isActive              Boolean        @default(true)
  isVerified            Boolean        @default(false)
  jobTitle              String?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  lastLoginAt           DateTime?
  primaryOrganizationId String?
  candidatures          candidatures[]
  primaryOrganization   Organization?  @relation(fields: [primaryOrganizationId], references: [id])

  @@map("users")
}

model candidatures {
  id               String       @id
  statut           String       @default("SOUMISE")
  lettreMotivation String?
  opportuniteId    String
  candidatId       String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime
  users            User         @relation(fields: [candidatId], references: [id])
  opportunites     opportunites @relation(fields: [opportuniteId], references: [id])
}

model opportunites {
  id            String         @id
  titre         String
  description   String
  statut        String         @default("OUVERTE")
  dateOuverture DateTime
  dateFermeture DateTime?
  posteId       String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime
  candidatures  candidatures[]
  postes        postes         @relation(fields: [posteId], references: [id])
}

model postes {
  id             String         @id
  titre          String
  description    String?
  code           String         @unique
  estStrategique Boolean        @default(false)
  organisationId String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime
  opportunites   opportunites[]
  organizations  Organization   @relation(fields: [organisationId], references: [id])
}

// Mod√®les pour la gestion des domaines
model DomainConfig {
  id               String    @id @default(cuid())
  domain           String    @unique
  subdomain        String?
  applicationId    String
  status           String    @default("pending")
  dnsRecords       String    @db.Text
  deploymentConfig String    @db.Text
  sslCertificate   String?   @db.Text
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  verifiedAt       DateTime?

  deploymentLogs   DeploymentLog[]

  @@map("domain_configs")
}

model DeploymentLog {
  id         String    @id @default(cuid())
  domainId   String
  domain     DomainConfig @relation(fields: [domainId], references: [id], onDelete: Cascade)
  action     String
  status     String
  message    String    @db.Text
  executedAt DateTime  @default(now())

  @@map("deployment_logs")
}
