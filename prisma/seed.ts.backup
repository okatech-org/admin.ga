/**
 * Script de seeding pour Administration.GA
 * Initialise la base de donn√©es avec les donn√©es de base et les configurations IA
 */

import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

// ===============================================
// DONN√âES DE BASE
// ===============================================

// Configurations API pour l'IA
const apiConfigurations = [
  {
    name: 'GEMINI',
    provider: 'google',
    isActive: true,
    model: 'gemini-pro',
    temperature: 0.7,
    maxTokens: 2048,
    requestTimeout: 30,
    requestsPerMinute: 60,
    requestsPerDay: 1000,
  },
  {
    name: 'GEMINI_VISION',
    provider: 'google',
    isActive: true,
    model: 'gemini-pro-vision',
    temperature: 0.5,
    maxTokens: 1024,
    requestTimeout: 45,
    requestsPerMinute: 30,
    requestsPerDay: 500,
  },
];

// Postes administratifs de base
const postesAdministratifs = [
  {
    titre: 'Pr√©sident de la R√©publique',
    code: 'PR',
    description: 'Chef de l\'√âtat gabonais',
    level: 'DIRECTION' as const,
    isActive: true,
    isAIDetected: false,
    applicableOrgTypes: ['PRESIDENCE'],
  },
  {
    titre: 'Premier Ministre',
    code: 'PM',
    description: 'Chef du Gouvernement',
    level: 'DIRECTION' as const,
    isActive: true,
    isAIDetected: false,
    applicableOrgTypes: ['PRIMATURE'],
  },
  {
    titre: 'Ministre',
    code: 'MIN',
    description: 'Ministre d\'√âtat',
    level: 'DIRECTION' as const,
    isActive: true,
    isAIDetected: false,
    applicableOrgTypes: ['MINISTERE'],
  },
  {
    titre: 'Directeur G√©n√©ral',
    code: 'DG',
    description: 'Direction g√©n√©rale de l\'organisme',
    level: 'DIRECTION' as const,
    isActive: true,
    isAIDetected: false,
    applicableOrgTypes: ['DIRECTION_GENERALE', 'AGENCE_PUBLIQUE'],
  },
  {
    titre: 'Secr√©taire G√©n√©ral',
    code: 'SG',
    description: 'Secr√©tariat g√©n√©ral',
    level: 'DIRECTION' as const,
    isActive: true,
    isAIDetected: false,
    applicableOrgTypes: ['MINISTERE', 'DIRECTION_GENERALE'],
  },
  {
    titre: 'Directeur',
    code: 'DIR',
    description: 'Directeur de service',
    level: 'DIRECTION' as const,
    isActive: true,
    isAIDetected: false,
    applicableOrgTypes: ['MINISTERE', 'DIRECTION_GENERALE'],
  },
  {
    titre: 'Chef de Service',
    code: 'CS',
    description: 'Responsable d\'un service',
    level: 'CHEF_SERVICE' as const,
    isActive: true,
    isAIDetected: false,
    applicableOrgTypes: ['MINISTERE', 'DIRECTION_GENERALE', 'MAIRIE'],
  },
  {
    titre: 'Chef de Bureau',
    code: 'CB',
    description: 'Responsable d\'un bureau',
    level: 'CHEF_SERVICE' as const,
    isActive: true,
    isAIDetected: false,
    applicableOrgTypes: ['MINISTERE', 'DIRECTION_GENERALE', 'MAIRIE'],
  },
  {
    titre: 'Responsable',
    code: 'RESP',
    description: 'Responsable d\'unit√©',
    level: 'RESPONSABLE' as const,
    isActive: true,
    isAIDetected: false,
    applicableOrgTypes: ['MINISTERE', 'DIRECTION_GENERALE', 'MAIRIE', 'AGENCE_PUBLIQUE'],
  },
  {
    titre: 'Agent Principal',
    code: 'AP',
    description: 'Agent administratif principal',
    level: 'AGENT' as const,
    isActive: true,
    isAIDetected: false,
    applicableOrgTypes: ['MINISTERE', 'DIRECTION_GENERALE', 'MAIRIE', 'AGENCE_PUBLIQUE'],
  },
  {
    titre: 'Agent',
    code: 'AGENT',
    description: 'Agent administratif',
    level: 'AGENT' as const,
    isActive: true,
    isAIDetected: false,
    applicableOrgTypes: ['MINISTERE', 'DIRECTION_GENERALE', 'MAIRIE', 'AGENCE_PUBLIQUE'],
  },
  {
    titre: 'Stagiaire',
    code: 'STAG',
    description: 'Stagiaire ou apprenti',
    level: 'STAGIAIRE' as const,
    isActive: true,
    isAIDetected: false,
    applicableOrgTypes: ['MINISTERE', 'DIRECTION_GENERALE', 'MAIRIE', 'AGENCE_PUBLIQUE'],
  },
];

// Organisations de base
const organizations = [
  {
    name: 'Pr√©sidence de la R√©publique',
    type: 'PRESIDENCE' as const,
    code: 'PRESIDENCE',
    description: 'Institution pr√©sidentielle gabonaise',
    address: 'Boulevard Triomphal, Libreville',
    city: 'Libreville',
    email: 'contact@presidence.ga',
    website: 'https://presidence.ga',
  },
  {
    name: 'Primature',
    type: 'PRIMATURE' as const,
    code: 'PRIMATURE',
    description: 'Services du Premier Ministre',
    address: 'Immeuble du Gouvernement, Libreville',
    city: 'Libreville',
    email: 'contact@primature.ga',
    website: 'https://primature.ga',
  },
  {
    name: 'Minist√®re de l\'√âconomie et des Finances',
    type: 'MINISTERE' as const,
    code: 'MIN_ECO_FIN',
    description: 'Gestion de l\'√©conomie et des finances publiques',
    address: 'Immeuble des Finances, Libreville',
    city: 'Libreville',
    email: 'contact@finances.ga',
    website: 'https://finances.ga',
  },
  {
    name: 'Minist√®re de la Sant√© et des Affaires Sociales',
    type: 'MINISTERE' as const,
    code: 'MIN_SANTE',
    description: 'Politique de sant√© publique et protection sociale',
    address: 'Immeuble de la Sant√©, Libreville',
    city: 'Libreville',
    email: 'contact@sante.ga',
    website: 'https://sante.ga',
  },
  {
    name: 'Minist√®re de l\'√âducation Nationale',
    type: 'MINISTERE' as const,
    code: 'MIN_EDUC_NAT',
    description: 'Syst√®me √©ducatif gabonais',
    address: 'Immeuble de l\'√âducation, Libreville',
    city: 'Libreville',
    email: 'contact@education.ga',
    website: 'https://education.ga',
  },
  {
    name: 'Direction G√©n√©rale de Documentation et d\'Immigration',
    type: 'DIRECTION_GENERALE' as const,
    code: 'DGDI',
    description: 'Gestion des documents d\'identit√© et immigration',
    address: 'Immeuble DGDI, Libreville',
    city: 'Libreville',
    email: 'contact@dgdi.ga',
    website: 'https://dgdi.ga',
  },
  {
    name: 'Mairie de Libreville',
    type: 'MAIRIE' as const,
    code: 'MAIRIE_LBV',
    description: 'Administration municipale de Libreville',
    address: 'H√¥tel de Ville, Libreville',
    city: 'Libreville',
    email: 'contact@libreville.ga',
    website: 'https://libreville.ga',
  },
];

// Utilisateurs de base
const baseUsers = [
  {
    email: 'admin@administration.ga',
    password: 'Admin2024!',
    firstName: 'Administrateur',
    lastName: 'Syst√®me',
    role: 'SUPER_ADMIN' as const,
    isActive: true,
    isVerified: true,
  },
  {
    email: 'demo.citoyen@administration.ga',
    password: 'Demo2024!',
    firstName: 'D√©mo',
    lastName: 'Citoyen',
    role: 'USER' as const,
    isActive: true,
    isVerified: true,
  },
  {
    email: 'demo.agent@administration.ga',
    password: 'Demo2024!',
    firstName: 'D√©mo',
    lastName: 'Agent',
    role: 'AGENT' as const,
    isActive: true,
    isVerified: true,
  },
];

// Configurations syst√®me
const systemConfigs = [
  {
    key: 'AI_FEATURES_ENABLED',
    value: true,
    description: 'Active les fonctionnalit√©s d\'IA',
    category: 'AI',
    isPublic: true,
  },
  {
    key: 'GEMINI_API_ENABLED',
    value: true,
    description: 'Active l\'API Google Gemini',
    category: 'AI',
    isPublic: false,
  },
  {
    key: 'KNOWLEDGE_BASE_ENABLED',
    value: true,
    description: 'Active la base de connaissances intelligente',
    category: 'AI',
    isPublic: true,
  },
  {
    key: 'MAX_AI_REQUESTS_PER_DAY',
    value: 1000,
    description: 'Limite quotidienne de requ√™tes IA par utilisateur',
    category: 'AI',
    isPublic: false,
  },
  {
    key: 'AUTO_KNOWLEDGE_UPDATE',
    value: true,
    description: 'Mise √† jour automatique de la base de connaissances',
    category: 'AI',
    isPublic: false,
  },
];

// ===============================================
// FONCTIONS DE SEEDING
// ===============================================

async function seedAPIConfigurations() {
  console.log('üîß Seeding API configurations...');

  for (const config of apiConfigurations) {
    await prisma.aPIConfiguration.upsert({
      where: { name: config.name },
      update: config,
      create: config,
    });
  }

  console.log(`‚úÖ ${apiConfigurations.length} configurations API cr√©√©es`);
}

async function seedPostesAdministratifs() {
  console.log('üëî Seeding postes administratifs...');

  for (const poste of postesAdministratifs) {
    const { applicableOrgTypes, ...posteData } = poste;
    await prisma.posteAdministratif.upsert({
      where: { code: poste.code },
      update: {
        ...posteData,
        applicableOrgTypes: { set: applicableOrgTypes as any[] }
      },
      create: {
        ...posteData,
        applicableOrgTypes: { set: applicableOrgTypes as any[] }
      },
    });
  }

  console.log(`‚úÖ ${postesAdministratifs.length} postes administratifs cr√©√©s`);
}

async function seedOrganizations() {
  console.log('üè¢ Seeding organizations...');

  const createdOrgs: any[] = [];

  for (const org of organizations) {
    const created = await prisma.organization.upsert({
      where: { code: org.code },
      update: org,
      create: {
        ...org,
        workingHours: {
          monday: { start: '08:00', end: '17:00' },
          tuesday: { start: '08:00', end: '17:00' },
          wednesday: { start: '08:00', end: '17:00' },
          thursday: { start: '08:00', end: '17:00' },
          friday: { start: '08:00', end: '17:00' },
          saturday: { start: '08:00', end: '12:00' },
          sunday: { closed: true },
        },
        settings: {
          allowOnlineAppointments: true,
          requireDocumentValidation: true,
          enableNotifications: true,
          maxRequestsPerDay: 100,
        },
      },
    });

    createdOrgs.push(created);
  }

  console.log(`‚úÖ ${organizations.length} organisations cr√©√©es`);
  return createdOrgs;
}

async function seedUsers(organizations: any[]) {
  console.log('üë§ Seeding users...');

  const createdUsers: any[] = [];

  for (const userData of baseUsers) {
    const hashedPassword = await bcrypt.hash(userData.password, 10);

    const user = await prisma.user.upsert({
      where: { email: userData.email },
      update: {
        firstName: userData.firstName,
        lastName: userData.lastName,
        role: userData.role,
        isActive: userData.isActive,
        isVerified: userData.isVerified,
      },
      create: {
        ...userData,
        password: hashedPassword,
      },
    });

    createdUsers.push(user);

    // Cr√©er le profil pour chaque utilisateur
    if (user.role !== 'SUPER_ADMIN') {
      await prisma.profile.upsert({
        where: { userId: user.id },
        update: {},
        create: {
          userId: user.id,
          nationality: 'Gabonaise',
          country: 'Gabon',
          isComplete: false,
          completionPercentage: 30,
          profileStatus: 'DRAFT',
        },
      });
    }
  }

  // Associer les utilisateurs aux organisations
  if (createdUsers.length > 0 && organizations.length > 0) {
    const adminUser = createdUsers.find(u => u.role === 'SUPER_ADMIN');
    const agentUser = createdUsers.find(u => u.role === 'AGENT');

    if (adminUser) {
      // L'admin a acc√®s √† toutes les organisations
      for (const org of organizations) {
        await prisma.userOrganization.upsert({
          where: {
            userId_organizationId: {
              userId: adminUser.id,
              organizationId: org.id,
            },
          },
          update: {},
          create: {
            userId: adminUser.id,
            organizationId: org.id,
            role: 'SUPER_ADMIN',
            department: 'Administration',
            isActive: true,
          },
        });
      }
    }

    if (agentUser && organizations.length > 0) {
      // L'agent est assign√© √† la DGDI
      const dgdi = organizations.find(o => o.code === 'DGDI');
      if (dgdi) {
        await prisma.userOrganization.upsert({
          where: {
            userId_organizationId: {
              userId: agentUser.id,
              organizationId: dgdi.id,
            },
          },
          update: {},
          create: {
            userId: agentUser.id,
            organizationId: dgdi.id,
            role: 'AGENT',
            department: 'Service des Documents',
            isActive: true,
          },
        });
      }
    }
  }

  console.log(`‚úÖ ${baseUsers.length} utilisateurs cr√©√©s`);
  return createdUsers;
}

async function seedKnowledgeBase(organizations: any[]) {
  console.log('üß† Seeding knowledge base...');

  let knowledgeCount = 0;

  for (const org of organizations) {
    // Cr√©er une base de connaissances pour chaque organisation
    const knowledge = await prisma.organismeKnowledge.upsert({
      where: { organizationId: org.id },
      update: {},
      create: {
        organizationId: org.id,
        category: org.type === 'PRESIDENCE' ? 'STRATEGIQUE' :
                 org.type === 'MINISTERE' ? 'STRATEGIQUE' :
                 org.type === 'DIRECTION_GENERALE' ? 'OPERATIONNEL' : 'SUPPORT',
        importance: org.type === 'PRESIDENCE' ? 'CRITIQUE' :
                   org.type === 'MINISTERE' ? 'CRITIQUE' :
                   org.type === 'DIRECTION_GENERALE' ? 'IMPORTANTE' : 'NORMALE',
        complexity: org.type === 'MINISTERE' ? 'HAUTE' : 'MOYENNE',
        size: org.type === 'MINISTERE' ? 'GRANDE' : 'MOYENNE',
        completude: 25, // Donn√©es de base seulement
        fiabilite: 60,
        sourcesPrincipales: ['Configuration syst√®me', 'Donn√©es officielles'],
        niveauxHierarchiques: ['Direction', 'Service', 'Bureau'],
        departments: ['Administration', 'Ressources Humaines'],
        postesIdentifies: ['Directeur', 'Chef de Service', 'Agent'],
        aiConfidence: 0.3,
        predictiveInsights: ['Organisation mature', 'Potentiel de num√©risation'],
        suggestedImprovements: ['Compl√©ter la cartographie', 'Former les √©quipes'],
        automationOpportunities: ['Gestion documentaire', 'Processus de validation'],
        utilisateursActifs: 0,
        tauxActivation: 0,
        efficaciteProcessus: 50,
        scoreNumerisation: 30,
        lastUpdateSource: 'SEED_DATA',
      },
    });

    // Cr√©er une analyse SWOT de base
    await prisma.knowledgeAnalysis.upsert({
      where: {
        knowledgeId_analysisType: {
          knowledgeId: knowledge.id,
          analysisType: 'SWOT',
        },
      },
      update: {},
      create: {
        knowledgeId: knowledge.id,
        analysisType: 'SWOT',
        strengths: ['Structure organisationnelle d√©finie', 'Mandat officiel'],
        weaknesses: ['Donn√©es incompl√®tes', 'Processus non num√©ris√©s'],
        opportunities: ['Transformation num√©rique', 'Am√©lioration de l\'efficacit√©'],
        threats: ['R√©sistance au changement', 'Contraintes budg√©taires'],
        recommendations: ['Mise en place d\'un syst√®me de gestion', 'Formation du personnel'],
        dataQuality: 60,
        organizationalMaturity: 50,
        digitalReadiness: 30,
        riskScore: 40,
        generatedBy: 'SEED_DATA',
        isReviewed: false,
      },
    });

    knowledgeCount++;
  }

  console.log(`‚úÖ ${knowledgeCount} bases de connaissances cr√©√©es`);
}

async function seedSystemConfigs() {
  console.log('‚öôÔ∏è Seeding system configurations...');

  for (const config of systemConfigs) {
    await prisma.systemConfig.upsert({
      where: { key: config.key },
      update: config,
      create: config,
    });
  }

  console.log(`‚úÖ ${systemConfigs.length} configurations syst√®me cr√©√©es`);
}

async function seedServiceConfigs(organizations: any[]) {
  console.log('üõ†Ô∏è Seeding service configurations...');

  const serviceTypes = [
    'CNI', 'PASSEPORT', 'ACTE_NAISSANCE', 'ACTE_MARIAGE',
    'CASIER_JUDICIAIRE', 'PERMIS_CONSTRUIRE'
  ];

  let configCount = 0;

  for (const org of organizations) {
    if (org.type === 'DIRECTION_GENERALE' || org.type === 'MAIRIE') {
      for (const serviceType of serviceTypes) {
        await prisma.serviceConfig.upsert({
          where: {
            organizationId_serviceType: {
              organizationId: org.id,
              serviceType: serviceType as any,
            },
          },
          update: {},
          create: {
            organizationId: org.id,
            serviceType: serviceType as any,
            isActive: true,
            processingDays: 7,
            requiredDocs: ['PHOTO_IDENTITE', 'JUSTIFICATIF_DOMICILE'],
            description: `Service de d√©livrance de ${serviceType}`,
            instructions: 'Veuillez fournir tous les documents requis',
            cost: serviceType === 'CNI' ? 15000 : 25000,
            slaHours: 72,
            autoAssign: true,
            requiresAppointment: serviceType === 'PASSEPORT',
            maxRequestsPerDay: 50,
          },
        });
        configCount++;
      }
    }
  }

  console.log(`‚úÖ ${configCount} configurations de services cr√©√©es`);
}

// ===============================================
// FONCTION PRINCIPALE
// ===============================================

async function main() {
  console.log('üöÄ D√©marrage du seeding Administration.GA...\n');

  try {
    // Ordre important pour respecter les relations
    await seedAPIConfigurations();
    await seedPostesAdministratifs();

    const organizations = await seedOrganizations();
    const users = await seedUsers(organizations);

    await seedKnowledgeBase(organizations);
    await seedSystemConfigs();
    await seedServiceConfigs(organizations);

    console.log('\nüéâ Seeding termin√© avec succ√®s !');
    console.log('\nüìä R√©sum√©:');
    console.log(`   ‚Ä¢ ${apiConfigurations.length} configurations API`);
    console.log(`   ‚Ä¢ ${postesAdministratifs.length} postes administratifs`);
    console.log(`   ‚Ä¢ ${organizations.length} organisations`);
    console.log(`   ‚Ä¢ ${baseUsers.length} utilisateurs`);
    console.log(`   ‚Ä¢ ${organizations.length} bases de connaissances`);
    console.log(`   ‚Ä¢ ${systemConfigs.length} configurations syst√®me`);

    console.log('\nüîê Comptes de d√©monstration:');
    console.log('   ‚Ä¢ admin@administration.ga / Admin2024!');
    console.log('   ‚Ä¢ demo.citoyen@administration.ga / Demo2024!');
    console.log('   ‚Ä¢ demo.agent@administration.ga / Demo2024!');

  } catch (error) {
    console.error('‚ùå Erreur lors du seeding:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Ex√©cuter le seeding
main()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  });

export default main;
