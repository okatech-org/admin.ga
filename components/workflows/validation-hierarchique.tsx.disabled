'use client';

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Alert, AlertDescription } from '@/components/ui/alert';
import {
  Clock, CheckCircle, XCircle, AlertTriangle, User, FileText,
  ArrowRight, ArrowDown, Send, MessageSquare, Calendar,
  Eye, Edit, Trash2, RotateCcw, Flag, Users
} from 'lucide-react';
import { toast } from 'sonner';

// Types pour le workflow de validation
export interface EtapeValidation {
  id: string;
  ordre: number;
  titre: string;
  description: string;
  validateur_role: string;
  validateur_nom?: string;
  statut: 'EN_ATTENTE' | 'VALIDE' | 'REJETE' | 'IGNORE';
  date_validation?: string;
  commentaire?: string;
  delai_max_jours: number;
  obligatoire: boolean;
}

export interface DocumentWorkflow {
  id: string;
  titre: string;
  type: 'DECISION' | 'RAPPORT' | 'BUDGET' | 'PROJET' | 'CORRESPONDANCE' | 'AUTRE';
  description: string;
  auteur: {
    nom: string;
    role: string;
    organisation: string;
  };
  destinataire?: {
    nom: string;
    role: string;
    organisation: string;
  };
  priorite: 'BASSE' | 'NORMALE' | 'HAUTE' | 'URGENTE';
  date_creation: string;
  date_limite?: string;
  statut_global: 'BROUILLON' | 'EN_VALIDATION' | 'VALIDE' | 'REJETE' | 'ARCHIVE';
  etapes: EtapeValidation[];
  pieces_jointes: Array<{
    nom: string;
    type: string;
    taille: string;
    url: string;
  }>;
  historique: Array<{
    date: string;
    action: string;
    utilisateur: string;
    commentaire?: string;
  }>;
}

interface ValidationHierarchiqueProps {
  organisationId?: string;
  utilisateurRole?: string;
}

export function ValidationHierarchique({ organisationId, utilisateurRole = 'AGENT' }: ValidationHierarchiqueProps) {
  const [documents, setDocuments] = useState<DocumentWorkflow[]>([]);
  const [documentSelectionne, setDocumentSelectionne] = useState<DocumentWorkflow | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [filtreStatut, setFiltreStatut] = useState<string>('TOUS');
  const [filtrePriorite, setFiltrePriorite] = useState<string>('TOUS');
  const [actionEnCours, setActionEnCours] = useState<string | null>(null);
  const [commentaireValidation, setCommentaireValidation] = useState('');
  const [showValidationDialog, setShowValidationDialog] = useState(false);
  const [actionType, setActionType] = useState<'VALIDER' | 'REJETER' | null>(null);

  useEffect(() => {
    chargerDocuments();
  }, [organisationId]);

  const chargerDocuments = async () => {
    setIsLoading(true);

    // Simulation d'un appel API
    await new Promise(resolve => setTimeout(resolve, 1200));

    // Données simulées de documents en workflow
    const documentsSimules: DocumentWorkflow[] = [
      {
        id: 'DOC001',
        titre: 'Projet de Budget 2025 - Direction des Ressources Humaines',
        type: 'BUDGET',
        description: 'Allocation budgétaire pour les formations du personnel et recrutements prévus',
        auteur: {
          nom: 'Marie NZUE',
          role: 'CHEF_SERVICE',
          organisation: 'Direction RH'
        },
        destinataire: {
          nom: 'Jean OBIANG',
          role: 'DIRECTEUR_GENERAL',
          organisation: 'Direction Générale'
        },
        priorite: 'HAUTE',
        date_creation: '2025-01-15T09:00:00Z',
        date_limite: '2025-01-25T17:00:00Z',
        statut_global: 'EN_VALIDATION',
        etapes: [
          {
            id: 'ETAPE1',
            ordre: 1,
            titre: 'Validation Chef de Service',
            description: 'Vérification de la cohérence budgétaire',
            validateur_role: 'CHEF_SERVICE',
            validateur_nom: 'Marie NZUE',
            statut: 'VALIDE',
            date_validation: '2025-01-15T14:30:00Z',
            commentaire: 'Budget conforme aux directives. Approuvé.',
            delai_max_jours: 2,
            obligatoire: true
          },
          {
            id: 'ETAPE2',
            ordre: 2,
            titre: 'Validation Directeur Adjoint',
            description: 'Contrôle administratif et réglementaire',
            validateur_role: 'DIRECTEUR_ADJOINT',
            validateur_nom: 'Paul MENGUE',
            statut: 'EN_ATTENTE',
            delai_max_jours: 3,
            obligatoire: true
          },
          {
            id: 'ETAPE3',
            ordre: 3,
            titre: 'Validation Directeur Général',
            description: 'Approbation finale et signature',
            validateur_role: 'DIRECTEUR_GENERAL',
            validateur_nom: 'Jean OBIANG',
            statut: 'EN_ATTENTE',
            delai_max_jours: 5,
            obligatoire: true
          }
        ],
        pieces_jointes: [
          { nom: 'Budget_RH_2025.xlsx', type: 'excel', taille: '2.3 MB', url: '#' },
          { nom: 'Justificatifs_formations.pdf', type: 'pdf', taille: '1.8 MB', url: '#' }
        ],
        historique: [
          {
            date: '2025-01-15T09:00:00Z',
            action: 'Création du document',
            utilisateur: 'Marie NZUE'
          },
          {
            date: '2025-01-15T14:30:00Z',
            action: 'Validation étape 1',
            utilisateur: 'Marie NZUE',
            commentaire: 'Budget conforme aux directives'
          }
        ]
      },
      {
        id: 'DOC002',
        titre: 'Rapport d\'Activité Trimestriel Q4 2024',
        type: 'RAPPORT',
        description: 'Synthèse des activités et réalisations du dernier trimestre 2024',
        auteur: {
          nom: 'Claude BIYOGHE',
          role: 'CHARGE_ETUDES',
          organisation: 'Service Statistiques'
        },
        priorite: 'NORMALE',
        date_creation: '2025-01-12T08:00:00Z',
        date_limite: '2025-01-20T17:00:00Z',
        statut_global: 'EN_VALIDATION',
        etapes: [
          {
            id: 'ETAPE1',
            ordre: 1,
            titre: 'Validation Chef de Service',
            description: 'Contrôle de la qualité et exactitude des données',
            validateur_role: 'CHEF_SERVICE',
            validateur_nom: 'André NKOGHE',
            statut: 'VALIDE',
            date_validation: '2025-01-13T16:00:00Z',
            commentaire: 'Données vérifiées et validées',
            delai_max_jours: 2,
            obligatoire: true
          },
          {
            id: 'ETAPE2',
            ordre: 2,
            titre: 'Validation Directeur',
            description: 'Approbation pour transmission',
            validateur_role: 'DIRECTEUR',
            validateur_nom: 'Sophie ELLA',
            statut: 'EN_ATTENTE',
            delai_max_jours: 3,
            obligatoire: true
          }
        ],
        pieces_jointes: [
          { nom: 'Rapport_Q4_2024.pdf', type: 'pdf', taille: '4.2 MB', url: '#' },
          { nom: 'Tableaux_statistiques.xlsx', type: 'excel', taille: '1.5 MB', url: '#' }
        ],
        historique: [
          {
            date: '2025-01-12T08:00:00Z',
            action: 'Création du document',
            utilisateur: 'Claude BIYOGHE'
          },
          {
            date: '2025-01-13T16:00:00Z',
            action: 'Validation étape 1',
            utilisateur: 'André NKOGHE',
            commentaire: 'Données vérifiées et validées'
          }
        ]
      },
      {
        id: 'DOC003',
        titre: 'Décision de Réorganisation Service Informatique',
        type: 'DECISION',
        description: 'Restructuration du service informatique et création de nouvelles unités',
        auteur: {
          nom: 'Thierry MVIE',
          role: 'DIRECTEUR',
          organisation: 'Direction Informatique'
        },
        priorite: 'URGENTE',
        date_creation: '2025-01-14T10:00:00Z',
        date_limite: '2025-01-18T17:00:00Z',
        statut_global: 'REJETE',
        etapes: [
          {
            id: 'ETAPE1',
            ordre: 1,
            titre: 'Validation DRH',
            description: 'Impact sur les ressources humaines',
            validateur_role: 'DIRECTEUR_RH',
            validateur_nom: 'Françoise MBOUMBA',
            statut: 'REJETE',
            date_validation: '2025-01-15T11:30:00Z',
            commentaire: 'Restructuration trop importante sans concertation préalable. Revoir la proposition.',
            delai_max_jours: 2,
            obligatoire: true
          }
        ],
        pieces_jointes: [
          { nom: 'Organigramme_propose.pdf', type: 'pdf', taille: '0.8 MB', url: '#' },
          { nom: 'Note_explicative.docx', type: 'word', taille: '0.3 MB', url: '#' }
        ],
        historique: [
          {
            date: '2025-01-14T10:00:00Z',
            action: 'Création du document',
            utilisateur: 'Thierry MVIE'
          },
          {
            date: '2025-01-15T11:30:00Z',
            action: 'Rejet étape 1',
            utilisateur: 'Françoise MBOUMBA',
            commentaire: 'Restructuration trop importante sans concertation préalable'
          }
        ]
      }
    ];

    setDocuments(documentsSimules);
    setIsLoading(false);
  };

  const documentsFiltres = documents.filter(doc => {
    if (filtreStatut !== 'TOUS' && doc.statut_global !== filtreStatut) return false;
    if (filtrePriorite !== 'TOUS' && doc.priorite !== filtrePriorite) return false;
    return true;
  });

  const getStatutColor = (statut: string) => {
    switch (statut) {
      case 'BROUILLON': return 'bg-gray-100 text-gray-800';
      case 'EN_VALIDATION': return 'bg-blue-100 text-blue-800';
      case 'VALIDE': return 'bg-green-100 text-green-800';
      case 'REJETE': return 'bg-red-100 text-red-800';
      case 'ARCHIVE': return 'bg-gray-100 text-gray-600';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getPrioriteColor = (priorite: string) => {
    switch (priorite) {
      case 'BASSE': return 'bg-gray-100 text-gray-600';
      case 'NORMALE': return 'bg-blue-100 text-blue-700';
      case 'HAUTE': return 'bg-orange-100 text-orange-700';
      case 'URGENTE': return 'bg-red-100 text-red-700';
      default: return 'bg-gray-100 text-gray-600';
    }
  };

  const getEtapeIcon = (statut: string) => {
    switch (statut) {
      case 'VALIDE': return <CheckCircle className="h-5 w-5 text-green-500" />;
      case 'REJETE': return <XCircle className="h-5 w-5 text-red-500" />;
      case 'EN_ATTENTE': return <Clock className="h-5 w-5 text-orange-500" />;
      case 'IGNORE': return <AlertTriangle className="h-5 w-5 text-gray-400" />;
      default: return <Clock className="h-5 w-5 text-gray-400" />;
    }
  };

  const peutValider = (etape: EtapeValidation): boolean => {
    return etape.statut === 'EN_ATTENTE' && etape.validateur_role === utilisateurRole;
  };

  const traiterValidation = async (documentId: string, etapeId: string, action: 'VALIDER' | 'REJETER') => {
    setActionEnCours(etapeId);

    try {
      // Simulation d'un appel API
      await new Promise(resolve => setTimeout(resolve, 1500));

      // Mettre à jour le document
      setDocuments(docs => docs.map(doc => {
        if (doc.id === documentId) {
          const nouvellesEtapes = doc.etapes.map(etape => {
            if (etape.id === etapeId) {
              return {
                ...etape,
                statut: action === 'VALIDER' ? 'VALIDE' : 'REJETE',
                date_validation: new Date().toISOString(),
                commentaire: commentaireValidation
              };
            }
            return etape;
          });

          // Mettre à jour le statut global
          let nouveauStatutGlobal = doc.statut_global;
          if (action === 'REJETER') {
            nouveauStatutGlobal = 'REJETE';
          } else if (nouvellesEtapes.every(e => e.statut === 'VALIDE' || !e.obligatoire)) {
            nouveauStatutGlobal = 'VALIDE';
          }

          return {
            ...doc,
            etapes: nouvellesEtapes,
            statut_global: nouveauStatutGlobal,
            historique: [
              ...doc.historique,
              {
                date: new Date().toISOString(),
                action: action === 'VALIDER' ? 'Validation' : 'Rejet',
                utilisateur: 'Utilisateur actuel',
                commentaire: commentaireValidation
              }
            ]
          };
        }
        return doc;
      }));

      toast.success(action === 'VALIDER' ? 'Document validé avec succès' : 'Document rejeté');
      setShowValidationDialog(false);
      setCommentaireValidation('');

    } catch (error) {
      toast.error('Erreur lors du traitement');
    } finally {
      setActionEnCours(null);
    }
  };

  const ouvrirDialogueValidation = (action: 'VALIDER' | 'REJETER') => {
    setActionType(action);
    setShowValidationDialog(true);
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleString('fr-FR', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const calculerDelaiRestant = (dateCreation: string, delaiMaxJours: number): string => {
    const creation = new Date(dateCreation);
    const limite = new Date(creation.getTime() + delaiMaxJours * 24 * 60 * 60 * 1000);
    const maintenant = new Date();
    const heuresRestantes = Math.round((limite.getTime() - maintenant.getTime()) / (1000 * 60 * 60));

    if (heuresRestantes < 0) return 'Dépassé';
    if (heuresRestantes < 24) return `${heuresRestantes}h restantes`;
    const joursRestants = Math.floor(heuresRestantes / 24);
    return `${joursRestants}j restants`;
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Chargement des workflows de validation...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* En-tête et filtres */}
      <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">Workflows de Validation</h2>
          <p className="text-gray-600">Gestion des documents en cours de validation hiérarchique</p>
        </div>

        <div className="flex items-center space-x-3">
          <Select value={filtreStatut} onValueChange={setFiltreStatut}>
            <SelectTrigger className="w-40">
              <SelectValue placeholder="Statut" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="TOUS">Tous les statuts</SelectItem>
              <SelectItem value="BROUILLON">Brouillon</SelectItem>
              <SelectItem value="EN_VALIDATION">En validation</SelectItem>
              <SelectItem value="VALIDE">Validé</SelectItem>
              <SelectItem value="REJETE">Rejeté</SelectItem>
            </SelectContent>
          </Select>

          <Select value={filtrePriorite} onValueChange={setFiltrePriorite}>
            <SelectTrigger className="w-40">
              <SelectValue placeholder="Priorité" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="TOUS">Toutes priorités</SelectItem>
              <SelectItem value="BASSE">Basse</SelectItem>
              <SelectItem value="NORMALE">Normale</SelectItem>
              <SelectItem value="HAUTE">Haute</SelectItem>
              <SelectItem value="URGENTE">Urgente</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>

      {/* Statistiques rapides */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center space-x-2">
              <Clock className="h-5 w-5 text-orange-500" />
              <div>
                <p className="text-sm text-gray-600">En attente</p>
                <p className="text-xl font-bold">
                  {documents.filter(d => d.statut_global === 'EN_VALIDATION').length}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center space-x-2">
              <CheckCircle className="h-5 w-5 text-green-500" />
              <div>
                <p className="text-sm text-gray-600">Validés</p>
                <p className="text-xl font-bold">
                  {documents.filter(d => d.statut_global === 'VALIDE').length}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center space-x-2">
              <XCircle className="h-5 w-5 text-red-500" />
              <div>
                <p className="text-sm text-gray-600">Rejetés</p>
                <p className="text-xl font-bold">
                  {documents.filter(d => d.statut_global === 'REJETE').length}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center space-x-2">
              <Flag className="h-5 w-5 text-red-500" />
              <div>
                <p className="text-sm text-gray-600">Urgents</p>
                <p className="text-xl font-bold">
                  {documents.filter(d => d.priorite === 'URGENTE').length}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Liste des documents */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {documentsFiltres.map((document) => (
          <Card key={document.id} className="border-l-4 border-l-blue-500">
            <CardHeader>
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <CardTitle className="text-lg mb-2">{document.titre}</CardTitle>
                  <CardDescription className="text-sm">{document.description}</CardDescription>
                </div>
                <div className="flex flex-col items-end space-y-2">
                  <Badge className={getStatutColor(document.statut_global)}>
                    {document.statut_global.replace('_', ' ')}
                  </Badge>
                  <Badge className={getPrioriteColor(document.priorite)}>
                    {document.priorite}
                  </Badge>
                </div>
              </div>

              <div className="flex items-center space-x-4 text-sm text-gray-600">
                <div className="flex items-center space-x-1">
                  <User className="h-4 w-4" />
                  <span>{document.auteur.nom}</span>
                </div>
                <div className="flex items-center space-x-1">
                  <Calendar className="h-4 w-4" />
                  <span>{formatDate(document.date_creation)}</span>
                </div>
                {document.date_limite && (
                  <div className="flex items-center space-x-1">
                    <Clock className="h-4 w-4" />
                    <span>Échéance: {formatDate(document.date_limite)}</span>
                  </div>
                )}
              </div>
            </CardHeader>

            <CardContent>
              {/* Workflow d'étapes */}
              <div className="space-y-3">
                <h4 className="font-medium text-sm text-gray-700">Étapes de validation</h4>
                {document.etapes.map((etape, index) => (
                  <div key={etape.id} className="flex items-center space-x-3">
                    {getEtapeIcon(etape.statut)}
                    <div className="flex-1">
                      <div className="flex items-center justify-between">
                        <span className="text-sm font-medium">{etape.titre}</span>
                        {etape.statut === 'EN_ATTENTE' && (
                          <span className="text-xs text-orange-600">
                            {calculerDelaiRestant(document.date_creation, etape.delai_max_jours)}
                          </span>
                        )}
                      </div>
                      <p className="text-xs text-gray-600">{etape.validateur_nom}</p>
                      {etape.commentaire && (
                        <p className="text-xs text-gray-500 italic mt-1">{etape.commentaire}</p>
                      )}
                    </div>
                    {index < document.etapes.length - 1 && (
                      <ArrowDown className="h-4 w-4 text-gray-300" />
                    )}
                  </div>
                ))}
              </div>

              {/* Actions disponibles */}
              <div className="mt-4 pt-4 border-t">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => setDocumentSelectionne(document)}
                    >
                      <Eye className="h-4 w-4 mr-1" />
                      Détails
                    </Button>

                    {document.pieces_jointes.length > 0 && (
                      <Badge variant="outline" className="text-xs">
                        {document.pieces_jointes.length} pièce(s)
                      </Badge>
                    )}
                  </div>

                  {/* Actions de validation si applicable */}
                  {document.etapes.some(etape => peutValider(etape)) && (
                    <div className="flex items-center space-x-2">
                      <Button
                        variant="outline"
                        size="sm"
                        className="text-red-600 border-red-200 hover:bg-red-50"
                        onClick={() => {
                          setDocumentSelectionne(document);
                          ouvrirDialogueValidation('REJETER');
                        }}
                        disabled={actionEnCours !== null}
                      >
                        <XCircle className="h-4 w-4 mr-1" />
                        Rejeter
                      </Button>
                      <Button
                        size="sm"
                        className="bg-green-600 hover:bg-green-700"
                        onClick={() => {
                          setDocumentSelectionne(document);
                          ouvrirDialogueValidation('VALIDER');
                        }}
                        disabled={actionEnCours !== null}
                      >
                        <CheckCircle className="h-4 w-4 mr-1" />
                        Valider
                      </Button>
                    </div>
                  )}
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {documentsFiltres.length === 0 && (
        <div className="text-center py-12">
          <FileText className="h-12 w-12 text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-semibold text-gray-900 mb-2">Aucun document trouvé</h3>
          <p className="text-gray-600">Aucun document ne correspond aux filtres sélectionnés.</p>
        </div>
      )}

      {/* Dialog de validation/rejet */}
      <Dialog open={showValidationDialog} onOpenChange={setShowValidationDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>
              {actionType === 'VALIDER' ? 'Valider le document' : 'Rejeter le document'}
            </DialogTitle>
            <DialogDescription>
              {documentSelectionne?.titre}
            </DialogDescription>
          </DialogHeader>

          <div className="space-y-4">
            <div>
              <label className="text-sm font-medium">
                Commentaire {actionType === 'REJETER' ? '(obligatoire)' : '(optionnel)'}
              </label>
              <Textarea
                value={commentaireValidation}
                onChange={(e) => setCommentaireValidation(e.target.value)}
                placeholder={actionType === 'VALIDER'
                  ? 'Commentaire sur la validation...'
                  : 'Motif du rejet...'
                }
                className="mt-1"
                rows={3}
              />
            </div>

            {actionType === 'REJETER' && !commentaireValidation.trim() && (
              <Alert>
                <AlertTriangle className="h-4 w-4" />
                <AlertDescription>
                  Un commentaire expliquant le motif du rejet est obligatoire.
                </AlertDescription>
              </Alert>
            )}
          </div>

          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => setShowValidationDialog(false)}
              disabled={actionEnCours !== null}
            >
              Annuler
            </Button>
            <Button
              variant={actionType === 'VALIDER' ? 'default' : 'destructive'}
              onClick={() => {
                if (documentSelectionne && actionType) {
                  const etapeEnAttente = documentSelectionne.etapes.find(e => peutValider(e));
                  if (etapeEnAttente) {
                    traiterValidation(documentSelectionne.id, etapeEnAttente.id, actionType);
                  }
                }
              }}
              disabled={
                actionEnCours !== null ||
                (actionType === 'REJETER' && !commentaireValidation.trim())
              }
            >
              {actionEnCours ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                  Traitement...
                </>
              ) : (
                <>
                  {actionType === 'VALIDER' ? (
                    <><CheckCircle className="h-4 w-4 mr-2" />Valider</>
                  ) : (
                    <><XCircle className="h-4 w-4 mr-2" />Rejeter</>
                  )}
                </>
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Dialog de détails du document */}
      {documentSelectionne && !showValidationDialog && (
        <Dialog open={!!documentSelectionne} onOpenChange={() => setDocumentSelectionne(null)}>
          <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle>{documentSelectionne.titre}</DialogTitle>
              <DialogDescription>{documentSelectionne.description}</DialogDescription>
            </DialogHeader>

            <div className="space-y-6">
              {/* Informations générales */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <h4 className="font-medium mb-2">Informations générales</h4>
                  <div className="space-y-2 text-sm">
                    <div><strong>Type:</strong> {documentSelectionne.type}</div>
                    <div><strong>Auteur:</strong> {documentSelectionne.auteur.nom} ({documentSelectionne.auteur.role})</div>
                    <div><strong>Organisation:</strong> {documentSelectionne.auteur.organisation}</div>
                    <div><strong>Créé le:</strong> {formatDate(documentSelectionne.date_creation)}</div>
                    {documentSelectionne.date_limite && (
                      <div><strong>Échéance:</strong> {formatDate(documentSelectionne.date_limite)}</div>
                    )}
                  </div>
                </div>

                <div>
                  <h4 className="font-medium mb-2">Statut</h4>
                  <div className="space-y-2">
                    <Badge className={getStatutColor(documentSelectionne.statut_global)}>
                      {documentSelectionne.statut_global.replace('_', ' ')}
                    </Badge>
                    <Badge className={getPrioriteColor(documentSelectionne.priorite)}>
                      Priorité: {documentSelectionne.priorite}
                    </Badge>
                  </div>
                </div>
              </div>

              {/* Pièces jointes */}
              {documentSelectionne.pieces_jointes.length > 0 && (
                <div>
                  <h4 className="font-medium mb-2">Pièces jointes</h4>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                    {documentSelectionne.pieces_jointes.map((piece, index) => (
                      <div key={index} className="flex items-center space-x-2 p-2 border rounded">
                        <FileText className="h-4 w-4 text-gray-500" />
                        <div className="flex-1">
                          <p className="text-sm font-medium">{piece.nom}</p>
                          <p className="text-xs text-gray-600">{piece.taille}</p>
                        </div>
                        <Button variant="ghost" size="sm">
                          <Eye className="h-4 w-4" />
                        </Button>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Workflow détaillé */}
              <div>
                <h4 className="font-medium mb-2">Workflow de validation</h4>
                <div className="space-y-3">
                  {documentSelectionne.etapes.map((etape, index) => (
                    <div key={etape.id} className="border rounded p-3">
                      <div className="flex items-center justify-between mb-2">
                        <div className="flex items-center space-x-2">
                          {getEtapeIcon(etape.statut)}
                          <span className="font-medium">{etape.titre}</span>
                          {etape.obligatoire && (
                            <Badge variant="outline" className="text-xs">Obligatoire</Badge>
                          )}
                        </div>
                        <span className="text-sm text-gray-600">
                          Délai: {etape.delai_max_jours} jour(s)
                        </span>
                      </div>
                      <p className="text-sm text-gray-600 mb-2">{etape.description}</p>
                      <div className="text-sm">
                        <strong>Validateur:</strong> {etape.validateur_nom} ({etape.validateur_role})
                      </div>
                      {etape.date_validation && (
                        <div className="text-sm text-gray-600">
                          <strong>Traité le:</strong> {formatDate(etape.date_validation)}
                        </div>
                      )}
                      {etape.commentaire && (
                        <div className="mt-2 p-2 bg-gray-50 rounded text-sm">
                          <strong>Commentaire:</strong> {etape.commentaire}
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              </div>

              {/* Historique */}
              <div>
                <h4 className="font-medium mb-2">Historique</h4>
                <div className="space-y-2">
                  {documentSelectionne.historique.map((event, index) => (
                    <div key={index} className="flex items-start space-x-3 text-sm">
                      <div className="w-2 h-2 bg-blue-500 rounded-full mt-2"></div>
                      <div className="flex-1">
                        <div className="flex items-center justify-between">
                          <span className="font-medium">{event.action}</span>
                          <span className="text-gray-500">{formatDate(event.date)}</span>
                        </div>
                        <p className="text-gray-600">par {event.utilisateur}</p>
                        {event.commentaire && (
                          <p className="text-gray-600 italic">{event.commentaire}</p>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </DialogContent>
        </Dialog>
      )}
    </div>
  );
}
