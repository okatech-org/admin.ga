name: 🔍 Validate Secrets Configuration

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environnement à valider (all, app, staging, production, notifications)'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - app
          - staging
          - production
          - notifications
  schedule:
    # Vérification hebdomadaire des secrets (dimanche à 00:00 UTC)
    - cron: '0 0 * * 0'

jobs:
  validate-secrets:
    name: 🛡️ Validate Required Secrets
    runs-on: ubuntu-latest

    steps:
    - name: 📋 Validate Application Secrets
      if: ${{ github.event.inputs.environment == 'all' || github.event.inputs.environment == 'app' || github.event.inputs.environment == '' }}
      continue-on-error: true
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
        NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      run: |
        echo "🔍 Validation des secrets d'application..."
        MISSING_SECRETS=()

        # Vérification des secrets d'application
        if [ -z "$DATABASE_URL" ]; then
          MISSING_SECRETS+=("DATABASE_URL")
        fi

        if [ -z "$NEXTAUTH_SECRET" ]; then
          MISSING_SECRETS+=("NEXTAUTH_SECRET")
        fi

        if [ -z "$NEXTAUTH_URL" ]; then
          MISSING_SECRETS+=("NEXTAUTH_URL")
        fi

        if [ -z "$SNYK_TOKEN" ]; then
          MISSING_SECRETS+=("SNYK_TOKEN")
        fi

        if [ ${#MISSING_SECRETS[@]} -gt 0 ]; then
          echo "⚠️ Secrets d'application manquants (optionnels):"
          printf '  - %s\n' "${MISSING_SECRETS[@]}"
        else
          echo "✅ Tous les secrets d'application sont configurés!"
        fi

    - name: 📋 Validate Staging Secrets
      if: ${{ github.event.inputs.environment == 'all' || github.event.inputs.environment == 'staging' || github.event.inputs.environment == '' }}
      continue-on-error: true
      env:
        STAGING_HOST: ${{ secrets.STAGING_HOST }}
        STAGING_USER: ${{ secrets.STAGING_USER }}
        STAGING_SSH_KEY: ${{ secrets.STAGING_SSH_KEY }}
        STAGING_URL: ${{ secrets.STAGING_URL }}
      run: |
        echo "🔍 Validation des secrets de staging..."
        MISSING_SECRETS=()

        # Vérification des secrets de staging
        if [ -z "$STAGING_HOST" ]; then
          MISSING_SECRETS+=("STAGING_HOST")
        fi

        if [ -z "$STAGING_USER" ]; then
          MISSING_SECRETS+=("STAGING_USER")
        fi

        if [ -z "$STAGING_SSH_KEY" ]; then
          MISSING_SECRETS+=("STAGING_SSH_KEY")
        fi

        if [ -z "$STAGING_URL" ]; then
          MISSING_SECRETS+=("STAGING_URL")
        fi

        if [ ${#MISSING_SECRETS[@]} -gt 0 ]; then
          echo "⚠️  Secrets de staging manquants (optionnels):"
          printf '  - %s\n' "${MISSING_SECRETS[@]}"
        else
          echo "✅ Tous les secrets de staging sont configurés!"
        fi

    - name: 📋 Validate Production Secrets
      if: ${{ github.event.inputs.environment == 'all' || github.event.inputs.environment == 'production' || github.event.inputs.environment == '' }}
      continue-on-error: true
      env:
        PRODUCTION_HOST: ${{ secrets.PRODUCTION_HOST }}
        PRODUCTION_USER: ${{ secrets.PRODUCTION_USER }}
        PRODUCTION_SSH_KEY: ${{ secrets.PRODUCTION_SSH_KEY }}
        PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
      run: |
        echo "🔍 Validation des secrets de production..."
        MISSING_SECRETS=()

        # Vérification des secrets de production
        if [ -z "$PRODUCTION_HOST" ]; then
          MISSING_SECRETS+=("PRODUCTION_HOST")
        fi

        if [ -z "$PRODUCTION_USER" ]; then
          MISSING_SECRETS+=("PRODUCTION_USER")
        fi

        if [ -z "$PRODUCTION_SSH_KEY" ]; then
          MISSING_SECRETS+=("PRODUCTION_SSH_KEY")
        fi

        if [ -z "$PRODUCTION_URL" ]; then
          MISSING_SECRETS+=("PRODUCTION_URL")
        fi

        if [ ${#MISSING_SECRETS[@]} -gt 0 ]; then
          echo "⚠️  Secrets de production manquants (optionnels):"
          printf '  - %s\n' "${MISSING_SECRETS[@]}"
        else
          echo "✅ Tous les secrets de production sont configurés!"
        fi

    - name: 📋 Validate Notification Secrets
      if: ${{ github.event.inputs.environment == 'all' || github.event.inputs.environment == 'notifications' || github.event.inputs.environment == '' }}
      continue-on-error: true
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        MONITORING_WEBHOOK: ${{ secrets.MONITORING_WEBHOOK }}
      run: |
        echo "🔍 Validation des secrets de notification..."
        MISSING_SECRETS=()

        # Vérification des secrets de notification
        if [ -z "$SLACK_WEBHOOK_URL" ]; then
          MISSING_SECRETS+=("SLACK_WEBHOOK_URL")
        fi

        if [ -z "$MONITORING_WEBHOOK" ]; then
          MISSING_SECRETS+=("MONITORING_WEBHOOK")
        fi

        if [ ${#MISSING_SECRETS[@]} -gt 0 ]; then
          echo "⚠️  Secrets de notification manquants (optionnels):"
          printf '  - %s\n' "${MISSING_SECRETS[@]}"
        else
          echo "✅ Tous les secrets de notification sont configurés!"
        fi

    - name: 📋 Configuration Guide
      if: failure()
      run: |
        echo ""
        echo "📋 Pour configurer les secrets manquants:"
        echo "1. Allez dans Settings > Secrets and variables > Actions"
        echo "2. Cliquez sur 'New repository secret'"
        echo "3. Ajoutez chaque secret manquant"
        echo ""
        echo "📖 Voir la documentation complète dans docs/DEPLOYMENT_GUIDE.md"

    - name: 📊 Generate Secrets Report
      if: success()
      run: |
        echo "📊 Rapport de configuration des secrets"
        echo "========================================"
        echo "✅ Secrets d'application: Configurés"
        echo "✅ Configuration validée avec succès!"
        echo ""
        echo "🎉 Prêt pour le déploiement!"
